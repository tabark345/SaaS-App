{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"file":"index.js","sources":["turbopack:///[project]/node_modules/@sentry/vercel-edge/src/client.ts","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/suppress-tracing.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/constants.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/utils.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/baggage/propagation/W3CBaggagePropagator.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/attributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/logging-error-handler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/global-error-handler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/sampling.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/environment.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/environment.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/performance.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/version.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/sdk-info.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/platform/node/timer-util.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/common/time.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/ExportResult.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/propagation/composite.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/internal/validators.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/TraceState.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/trace/W3CTraceContextPropagator.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/lodash.merge.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/merge.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/promise.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/core/build/esm/utils/callback.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/build/esm/platform/node/default-service-name.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/resources/build/esm/Resource.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/enums.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Span.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Sampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOffSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/AlwaysOnSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/ParentBasedSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/sampler/TraceIdRatioBasedSampler.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/config.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/utility.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/BatchSpanProcessorBase.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/export/BatchSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/platform/node/RandomIdGenerator.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/Tracer.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/MultiSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/export/NoopSpanProcessor.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/sdk-trace-base/build/esm/BasicTracerProvider.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/trace/SemanticAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/resource/SemanticResourceAttributes.js","turbopack:///[project]/node_modules/node_modules/@opentelemetry/semantic-conventions/build/esm/stable_attributes.js","turbopack:///[project]/node_modules/@sentry/opentelemetry/build/esm/index.js","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/debug-build.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/integrations/wintercg-fetch.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/transports/index.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/utils/vercel.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/vendored/abstract-async-hooks-context-manager.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/vendored/async-local-storage-context-manager.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/sdk.ts","turbopack:///[project]/node_modules/@sentry/vercel-edge/src/logs/exports.ts"],"sourcesContent":["import type { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport type { ServerRuntimeClientOptions } from '@sentry/core';\nimport { applySdkMetadata, ServerRuntimeClient } from '@sentry/core';\nimport type { VercelEdgeClientOptions } from './types';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * The Sentry Vercel Edge Runtime SDK Client.\n *\n * @see VercelEdgeClientOptions for documentation on configuration options.\n * @see ServerRuntimeClient for usage documentation.\n */\nexport class VercelEdgeClient extends ServerRuntimeClient<VercelEdgeClientOptions> {\n  public traceProvider: BasicTracerProvider | undefined;\n\n  /**\n   * Creates a new Vercel Edge Runtime SDK instance.\n   * @param options Configuration options for this SDK.\n   */\n  public constructor(options: VercelEdgeClientOptions) {\n    applySdkMetadata(options, 'vercel-edge');\n    options._metadata = options._metadata || {};\n\n    const clientOptions: ServerRuntimeClientOptions = {\n      ...options,\n      platform: 'javascript',\n      // TODO: Grab version information\n      runtime: { name: 'vercel-edge' },\n      serverName: options.serverName || process.env.SENTRY_NAME,\n    };\n\n    super(clientOptions);\n  }\n\n  // Eslint ignore explanation: This is already documented in super.\n  // eslint-disable-next-line jsdoc/require-jsdoc\n  public async flush(timeout?: number): Promise<boolean> {\n    const provider = this.traceProvider;\n    const spanProcessor = provider?.activeSpanProcessor;\n\n    if (spanProcessor) {\n      await spanProcessor.forceFlush();\n    }\n\n    if (this.getOptions().sendClientReports) {\n      this._flushOutcomes();\n    }\n\n    return super.flush(timeout);\n  }\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUD_PROVIDER = 'cloud.provider';\nvar TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nvar TMP_CLOUD_REGION = 'cloud.region';\nvar TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nvar TMP_CLOUD_PLATFORM = 'cloud.platform';\nvar TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nvar TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nvar TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nvar TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nvar TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nvar TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nvar TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nvar TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nvar TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nvar TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nvar TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nvar TMP_CONTAINER_NAME = 'container.name';\nvar TMP_CONTAINER_ID = 'container.id';\nvar TMP_CONTAINER_RUNTIME = 'container.runtime';\nvar TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nvar TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nvar TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nvar TMP_DEVICE_ID = 'device.id';\nvar TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nvar TMP_DEVICE_MODEL_NAME = 'device.model.name';\nvar TMP_FAAS_NAME = 'faas.name';\nvar TMP_FAAS_ID = 'faas.id';\nvar TMP_FAAS_VERSION = 'faas.version';\nvar TMP_FAAS_INSTANCE = 'faas.instance';\nvar TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nvar TMP_HOST_ID = 'host.id';\nvar TMP_HOST_NAME = 'host.name';\nvar TMP_HOST_TYPE = 'host.type';\nvar TMP_HOST_ARCH = 'host.arch';\nvar TMP_HOST_IMAGE_NAME = 'host.image.name';\nvar TMP_HOST_IMAGE_ID = 'host.image.id';\nvar TMP_HOST_IMAGE_VERSION = 'host.image.version';\nvar TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nvar TMP_K8S_NODE_NAME = 'k8s.node.name';\nvar TMP_K8S_NODE_UID = 'k8s.node.uid';\nvar TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nvar TMP_K8S_POD_UID = 'k8s.pod.uid';\nvar TMP_K8S_POD_NAME = 'k8s.pod.name';\nvar TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nvar TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nvar TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nvar TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nvar TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nvar TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nvar TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nvar TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nvar TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nvar TMP_K8S_JOB_UID = 'k8s.job.uid';\nvar TMP_K8S_JOB_NAME = 'k8s.job.name';\nvar TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nvar TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nvar TMP_OS_TYPE = 'os.type';\nvar TMP_OS_DESCRIPTION = 'os.description';\nvar TMP_OS_NAME = 'os.name';\nvar TMP_OS_VERSION = 'os.version';\nvar TMP_PROCESS_PID = 'process.pid';\nvar TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nvar TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nvar TMP_PROCESS_COMMAND = 'process.command';\nvar TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nvar TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nvar TMP_PROCESS_OWNER = 'process.owner';\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nvar TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nvar TMP_SERVICE_VERSION = 'service.version';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nvar TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nvar TMP_WEBENGINE_NAME = 'webengine.name';\nvar TMP_WEBENGINE_VERSION = 'webengine.version';\nvar TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport var SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nvar TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport var CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nvar TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nvar TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nvar TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nvar TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport var CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nvar TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport var AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nvar TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nvar TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nvar TMP_HOSTARCHVALUES_IA64 = 'ia64';\nvar TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nvar TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nvar TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport var HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_OSTYPEVALUES_WINDOWS = 'windows';\nvar TMP_OSTYPEVALUES_LINUX = 'linux';\nvar TMP_OSTYPEVALUES_DARWIN = 'darwin';\nvar TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nvar TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nvar TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nvar TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nvar TMP_OSTYPEVALUES_HPUX = 'hpux';\nvar TMP_OSTYPEVALUES_AIX = 'aix';\nvar TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nvar TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport var OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport var TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createContextKey } from '@opentelemetry/api';\nvar SUPPRESS_TRACING_KEY = createContextKey('OpenTelemetry SDK Context Key SUPPRESS_TRACING');\nexport function suppressTracing(context) {\n    return context.setValue(SUPPRESS_TRACING_KEY, true);\n}\nexport function unsuppressTracing(context) {\n    return context.deleteValue(SUPPRESS_TRACING_KEY);\n}\nexport function isTracingSuppressed(context) {\n    return context.getValue(SUPPRESS_TRACING_KEY) === true;\n}\n//# sourceMappingURL=suppress-tracing.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var BAGGAGE_KEY_PAIR_SEPARATOR = '=';\nexport var BAGGAGE_PROPERTIES_SEPARATOR = ';';\nexport var BAGGAGE_ITEMS_SEPARATOR = ',';\n// Name of the http header used to propagate the baggage\nexport var BAGGAGE_HEADER = 'baggage';\n// Maximum number of name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_NAME_VALUE_PAIRS = 180;\n// Maximum number of bytes per a single name-value pair allowed by w3c spec\nexport var BAGGAGE_MAX_PER_NAME_VALUE_PAIRS = 4096;\n// Maximum total length of all name-value pairs allowed by w3c spec\nexport var BAGGAGE_MAX_TOTAL_LENGTH = 8192;\n//# sourceMappingURL=constants.js.map","var __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\n/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { baggageEntryMetadataFromString, } from '@opentelemetry/api';\nimport { BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_PROPERTIES_SEPARATOR, BAGGAGE_KEY_PAIR_SEPARATOR, BAGGAGE_MAX_TOTAL_LENGTH, } from './constants';\nexport function serializeKeyPairs(keyPairs) {\n    return keyPairs.reduce(function (hValue, current) {\n        var value = \"\" + hValue + (hValue !== '' ? BAGGAGE_ITEMS_SEPARATOR : '') + current;\n        return value.length > BAGGAGE_MAX_TOTAL_LENGTH ? hValue : value;\n    }, '');\n}\nexport function getKeyPairs(baggage) {\n    return baggage.getAllEntries().map(function (_a) {\n        var _b = __read(_a, 2), key = _b[0], value = _b[1];\n        var entry = encodeURIComponent(key) + \"=\" + encodeURIComponent(value.value);\n        // include opaque metadata if provided\n        // NOTE: we intentionally don't URI-encode the metadata - that responsibility falls on the metadata implementation\n        if (value.metadata !== undefined) {\n            entry += BAGGAGE_PROPERTIES_SEPARATOR + value.metadata.toString();\n        }\n        return entry;\n    });\n}\nexport function parsePairKeyValue(entry) {\n    var valueProps = entry.split(BAGGAGE_PROPERTIES_SEPARATOR);\n    if (valueProps.length <= 0)\n        return;\n    var keyPairPart = valueProps.shift();\n    if (!keyPairPart)\n        return;\n    var separatorIndex = keyPairPart.indexOf(BAGGAGE_KEY_PAIR_SEPARATOR);\n    if (separatorIndex <= 0)\n        return;\n    var key = decodeURIComponent(keyPairPart.substring(0, separatorIndex).trim());\n    var value = decodeURIComponent(keyPairPart.substring(separatorIndex + 1).trim());\n    var metadata;\n    if (valueProps.length > 0) {\n        metadata = baggageEntryMetadataFromString(valueProps.join(BAGGAGE_PROPERTIES_SEPARATOR));\n    }\n    return { key: key, value: value, metadata: metadata };\n}\n/**\n * Parse a string serialized in the baggage HTTP Format (without metadata):\n * https://github.com/w3c/baggage/blob/master/baggage/HTTP_HEADER_FORMAT.md\n */\nexport function parseKeyPairsIntoRecord(value) {\n    if (typeof value !== 'string' || value.length === 0)\n        return {};\n    return value\n        .split(BAGGAGE_ITEMS_SEPARATOR)\n        .map(function (entry) {\n        return parsePairKeyValue(entry);\n    })\n        .filter(function (keyPair) { return keyPair !== undefined && keyPair.value.length > 0; })\n        .reduce(function (headers, keyPair) {\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        headers[keyPair.key] = keyPair.value;\n        return headers;\n    }, {});\n}\n//# sourceMappingURL=utils.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { propagation, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from '../../trace/suppress-tracing';\nimport { BAGGAGE_HEADER, BAGGAGE_ITEMS_SEPARATOR, BAGGAGE_MAX_NAME_VALUE_PAIRS, BAGGAGE_MAX_PER_NAME_VALUE_PAIRS, } from '../constants';\nimport { getKeyPairs, parsePairKeyValue, serializeKeyPairs } from '../utils';\n/**\n * Propagates {@link Baggage} through Context format propagation.\n *\n * Based on the Baggage specification:\n * https://w3c.github.io/baggage/\n */\nvar W3CBaggagePropagator = /** @class */ (function () {\n    function W3CBaggagePropagator() {\n    }\n    W3CBaggagePropagator.prototype.inject = function (context, carrier, setter) {\n        var baggage = propagation.getBaggage(context);\n        if (!baggage || isTracingSuppressed(context))\n            return;\n        var keyPairs = getKeyPairs(baggage)\n            .filter(function (pair) {\n            return pair.length <= BAGGAGE_MAX_PER_NAME_VALUE_PAIRS;\n        })\n            .slice(0, BAGGAGE_MAX_NAME_VALUE_PAIRS);\n        var headerValue = serializeKeyPairs(keyPairs);\n        if (headerValue.length > 0) {\n            setter.set(carrier, BAGGAGE_HEADER, headerValue);\n        }\n    };\n    W3CBaggagePropagator.prototype.extract = function (context, carrier, getter) {\n        var headerValue = getter.get(carrier, BAGGAGE_HEADER);\n        var baggageString = Array.isArray(headerValue)\n            ? headerValue.join(BAGGAGE_ITEMS_SEPARATOR)\n            : headerValue;\n        if (!baggageString)\n            return context;\n        var baggage = {};\n        if (baggageString.length === 0) {\n            return context;\n        }\n        var pairs = baggageString.split(BAGGAGE_ITEMS_SEPARATOR);\n        pairs.forEach(function (entry) {\n            var keyPair = parsePairKeyValue(entry);\n            if (keyPair) {\n                var baggageEntry = { value: keyPair.value };\n                if (keyPair.metadata) {\n                    baggageEntry.metadata = keyPair.metadata;\n                }\n                baggage[keyPair.key] = baggageEntry;\n            }\n        });\n        if (Object.entries(baggage).length === 0) {\n            return context;\n        }\n        return propagation.setBaggage(context, propagation.createBaggage(baggage));\n    };\n    W3CBaggagePropagator.prototype.fields = function () {\n        return [BAGGAGE_HEADER];\n    };\n    return W3CBaggagePropagator;\n}());\nexport { W3CBaggagePropagator };\n//# sourceMappingURL=W3CBaggagePropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nexport function sanitizeAttributes(attributes) {\n    var e_1, _a;\n    var out = {};\n    if (typeof attributes !== 'object' || attributes == null) {\n        return out;\n    }\n    try {\n        for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n            var _d = __read(_c.value, 2), key = _d[0], val = _d[1];\n            if (!isAttributeKey(key)) {\n                diag.warn(\"Invalid attribute key: \" + key);\n                continue;\n            }\n            if (!isAttributeValue(val)) {\n                diag.warn(\"Invalid attribute value set for key: \" + key);\n                continue;\n            }\n            if (Array.isArray(val)) {\n                out[key] = val.slice();\n            }\n            else {\n                out[key] = val;\n            }\n        }\n    }\n    catch (e_1_1) { e_1 = { error: e_1_1 }; }\n    finally {\n        try {\n            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n        }\n        finally { if (e_1) throw e_1.error; }\n    }\n    return out;\n}\nexport function isAttributeKey(key) {\n    return typeof key === 'string' && key.length > 0;\n}\nexport function isAttributeValue(val) {\n    if (val == null) {\n        return true;\n    }\n    if (Array.isArray(val)) {\n        return isHomogeneousAttributeValueArray(val);\n    }\n    return isValidPrimitiveAttributeValue(val);\n}\nfunction isHomogeneousAttributeValueArray(arr) {\n    var e_2, _a;\n    var type;\n    try {\n        for (var arr_1 = __values(arr), arr_1_1 = arr_1.next(); !arr_1_1.done; arr_1_1 = arr_1.next()) {\n            var element = arr_1_1.value;\n            // null/undefined elements are allowed\n            if (element == null)\n                continue;\n            if (!type) {\n                if (isValidPrimitiveAttributeValue(element)) {\n                    type = typeof element;\n                    continue;\n                }\n                // encountered an invalid primitive\n                return false;\n            }\n            if (typeof element === type) {\n                continue;\n            }\n            return false;\n        }\n    }\n    catch (e_2_1) { e_2 = { error: e_2_1 }; }\n    finally {\n        try {\n            if (arr_1_1 && !arr_1_1.done && (_a = arr_1.return)) _a.call(arr_1);\n        }\n        finally { if (e_2) throw e_2.error; }\n    }\n    return true;\n}\nfunction isValidPrimitiveAttributeValue(val) {\n    switch (typeof val) {\n        case 'number':\n        case 'boolean':\n        case 'string':\n            return true;\n    }\n    return false;\n}\n//# sourceMappingURL=attributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\n/**\n * Returns a function that logs an error using the provided logger, or a\n * console logger if one was not provided.\n */\nexport function loggingErrorHandler() {\n    return function (ex) {\n        diag.error(stringifyException(ex));\n    };\n}\n/**\n * Converts an exception into a string representation\n * @param {Exception} ex\n */\nfunction stringifyException(ex) {\n    if (typeof ex === 'string') {\n        return ex;\n    }\n    else {\n        return JSON.stringify(flattenException(ex));\n    }\n}\n/**\n * Flattens an exception into key-value pairs by traversing the prototype chain\n * and coercing values to strings. Duplicate properties will not be overwritten;\n * the first insert wins.\n */\nfunction flattenException(ex) {\n    var result = {};\n    var current = ex;\n    while (current !== null) {\n        Object.getOwnPropertyNames(current).forEach(function (propertyName) {\n            if (result[propertyName])\n                return;\n            var value = current[propertyName];\n            if (value) {\n                result[propertyName] = String(value);\n            }\n        });\n        current = Object.getPrototypeOf(current);\n    }\n    return result;\n}\n//# sourceMappingURL=logging-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { loggingErrorHandler } from './logging-error-handler';\n/** The global error handler delegate */\nvar delegateHandler = loggingErrorHandler();\n/**\n * Set the global error handler\n * @param {ErrorHandler} handler\n */\nexport function setGlobalErrorHandler(handler) {\n    delegateHandler = handler;\n}\n/**\n * Return the global error handler\n * @param {Exception} ex\n */\nexport function globalErrorHandler(ex) {\n    try {\n        delegateHandler(ex);\n    }\n    catch (_a) { } // eslint-disable-line no-empty\n}\n//# sourceMappingURL=global-error-handler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var TracesSamplerValues;\n(function (TracesSamplerValues) {\n    TracesSamplerValues[\"AlwaysOff\"] = \"always_off\";\n    TracesSamplerValues[\"AlwaysOn\"] = \"always_on\";\n    TracesSamplerValues[\"ParentBasedAlwaysOff\"] = \"parentbased_always_off\";\n    TracesSamplerValues[\"ParentBasedAlwaysOn\"] = \"parentbased_always_on\";\n    TracesSamplerValues[\"ParentBasedTraceIdRatio\"] = \"parentbased_traceidratio\";\n    TracesSamplerValues[\"TraceIdRatio\"] = \"traceidratio\";\n})(TracesSamplerValues || (TracesSamplerValues = {}));\n//# sourceMappingURL=sampling.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DiagLogLevel } from '@opentelemetry/api';\nimport { TracesSamplerValues } from './sampling';\nvar DEFAULT_LIST_SEPARATOR = ',';\n/**\n * Environment interface to define all names\n */\nvar ENVIRONMENT_BOOLEAN_KEYS = ['OTEL_SDK_DISABLED'];\nfunction isEnvVarABoolean(key) {\n    return (ENVIRONMENT_BOOLEAN_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_NUMBERS_KEYS = [\n    'OTEL_BSP_EXPORT_TIMEOUT',\n    'OTEL_BSP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BSP_MAX_QUEUE_SIZE',\n    'OTEL_BSP_SCHEDULE_DELAY',\n    'OTEL_BLRP_EXPORT_TIMEOUT',\n    'OTEL_BLRP_MAX_EXPORT_BATCH_SIZE',\n    'OTEL_BLRP_MAX_QUEUE_SIZE',\n    'OTEL_BLRP_SCHEDULE_DELAY',\n    'OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT',\n    'OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT',\n    'OTEL_SPAN_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_LINK_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT',\n    'OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT',\n    'OTEL_EXPORTER_OTLP_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_TRACES_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_METRICS_TIMEOUT',\n    'OTEL_EXPORTER_OTLP_LOGS_TIMEOUT',\n    'OTEL_EXPORTER_JAEGER_AGENT_PORT',\n];\nfunction isEnvVarANumber(key) {\n    return (ENVIRONMENT_NUMBERS_KEYS.indexOf(key) > -1);\n}\nvar ENVIRONMENT_LISTS_KEYS = [\n    'OTEL_NO_PATCH_MODULES',\n    'OTEL_PROPAGATORS',\n    'OTEL_SEMCONV_STABILITY_OPT_IN',\n];\nfunction isEnvVarAList(key) {\n    return ENVIRONMENT_LISTS_KEYS.indexOf(key) > -1;\n}\nexport var DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT = Infinity;\nexport var DEFAULT_ATTRIBUTE_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT = 128;\nexport var DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT = 128;\n/**\n * Default environment variables\n */\nexport var DEFAULT_ENVIRONMENT = {\n    OTEL_SDK_DISABLED: false,\n    CONTAINER_NAME: '',\n    ECS_CONTAINER_METADATA_URI_V4: '',\n    ECS_CONTAINER_METADATA_URI: '',\n    HOSTNAME: '',\n    KUBERNETES_SERVICE_HOST: '',\n    NAMESPACE: '',\n    OTEL_BSP_EXPORT_TIMEOUT: 30000,\n    OTEL_BSP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BSP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BSP_SCHEDULE_DELAY: 5000,\n    OTEL_BLRP_EXPORT_TIMEOUT: 30000,\n    OTEL_BLRP_MAX_EXPORT_BATCH_SIZE: 512,\n    OTEL_BLRP_MAX_QUEUE_SIZE: 2048,\n    OTEL_BLRP_SCHEDULE_DELAY: 5000,\n    OTEL_EXPORTER_JAEGER_AGENT_HOST: '',\n    OTEL_EXPORTER_JAEGER_AGENT_PORT: 6832,\n    OTEL_EXPORTER_JAEGER_ENDPOINT: '',\n    OTEL_EXPORTER_JAEGER_PASSWORD: '',\n    OTEL_EXPORTER_JAEGER_USER: '',\n    OTEL_EXPORTER_OTLP_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_TRACES_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_METRICS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_LOGS_ENDPOINT: '',\n    OTEL_EXPORTER_OTLP_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TRACES_HEADERS: '',\n    OTEL_EXPORTER_OTLP_METRICS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_LOGS_HEADERS: '',\n    OTEL_EXPORTER_OTLP_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_TRACES_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_METRICS_TIMEOUT: 10000,\n    OTEL_EXPORTER_OTLP_LOGS_TIMEOUT: 10000,\n    OTEL_EXPORTER_ZIPKIN_ENDPOINT: 'http://localhost:9411/api/v2/spans',\n    OTEL_LOG_LEVEL: DiagLogLevel.INFO,\n    OTEL_NO_PATCH_MODULES: [],\n    OTEL_PROPAGATORS: ['tracecontext', 'baggage'],\n    OTEL_RESOURCE_ATTRIBUTES: '',\n    OTEL_SERVICE_NAME: '',\n    OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_VALUE_LENGTH_LIMIT: DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n    OTEL_LOGRECORD_ATTRIBUTE_COUNT_LIMIT: DEFAULT_ATTRIBUTE_COUNT_LIMIT,\n    OTEL_SPAN_EVENT_COUNT_LIMIT: 128,\n    OTEL_SPAN_LINK_COUNT_LIMIT: 128,\n    OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n    OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT: DEFAULT_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n    OTEL_TRACES_EXPORTER: '',\n    OTEL_TRACES_SAMPLER: TracesSamplerValues.ParentBasedAlwaysOn,\n    OTEL_TRACES_SAMPLER_ARG: '',\n    OTEL_LOGS_EXPORTER: '',\n    OTEL_EXPORTER_OTLP_INSECURE: '',\n    OTEL_EXPORTER_OTLP_TRACES_INSECURE: '',\n    OTEL_EXPORTER_OTLP_METRICS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_LOGS_INSECURE: '',\n    OTEL_EXPORTER_OTLP_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_TRACES_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_METRICS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_LOGS_COMPRESSION: '',\n    OTEL_EXPORTER_OTLP_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_KEY: '',\n    OTEL_EXPORTER_OTLP_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_TRACES_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_METRICS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_LOGS_CLIENT_CERTIFICATE: '',\n    OTEL_EXPORTER_OTLP_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_TRACES_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_LOGS_PROTOCOL: 'http/protobuf',\n    OTEL_EXPORTER_OTLP_METRICS_TEMPORALITY_PREFERENCE: 'cumulative',\n    OTEL_SEMCONV_STABILITY_OPT_IN: [],\n};\n/**\n * @param key\n * @param environment\n * @param values\n */\nfunction parseBoolean(key, environment, values) {\n    if (typeof values[key] === 'undefined') {\n        return;\n    }\n    var value = String(values[key]);\n    // support case-insensitive \"true\"\n    environment[key] = value.toLowerCase() === 'true';\n}\n/**\n * Parses a variable as number with number validation\n * @param name\n * @param environment\n * @param values\n * @param min\n * @param max\n */\nfunction parseNumber(name, environment, values, min, max) {\n    if (min === void 0) { min = -Infinity; }\n    if (max === void 0) { max = Infinity; }\n    if (typeof values[name] !== 'undefined') {\n        var value = Number(values[name]);\n        if (!isNaN(value)) {\n            if (value < min) {\n                environment[name] = min;\n            }\n            else if (value > max) {\n                environment[name] = max;\n            }\n            else {\n                environment[name] = value;\n            }\n        }\n    }\n}\n/**\n * Parses list-like strings from input into output.\n * @param name\n * @param environment\n * @param values\n * @param separator\n */\nfunction parseStringList(name, output, input, separator) {\n    if (separator === void 0) { separator = DEFAULT_LIST_SEPARATOR; }\n    var givenValue = input[name];\n    if (typeof givenValue === 'string') {\n        output[name] = givenValue.split(separator).map(function (v) { return v.trim(); });\n    }\n}\n// The support string -> DiagLogLevel mappings\nvar logLevelMap = {\n    ALL: DiagLogLevel.ALL,\n    VERBOSE: DiagLogLevel.VERBOSE,\n    DEBUG: DiagLogLevel.DEBUG,\n    INFO: DiagLogLevel.INFO,\n    WARN: DiagLogLevel.WARN,\n    ERROR: DiagLogLevel.ERROR,\n    NONE: DiagLogLevel.NONE,\n};\n/**\n * Environmentally sets log level if valid log level string is provided\n * @param key\n * @param environment\n * @param values\n */\nfunction setLogLevelFromEnv(key, environment, values) {\n    var value = values[key];\n    if (typeof value === 'string') {\n        var theLevel = logLevelMap[value.toUpperCase()];\n        if (theLevel != null) {\n            environment[key] = theLevel;\n        }\n    }\n}\n/**\n * Parses environment values\n * @param values\n */\nexport function parseEnvironment(values) {\n    var environment = {};\n    for (var env in DEFAULT_ENVIRONMENT) {\n        var key = env;\n        switch (key) {\n            case 'OTEL_LOG_LEVEL':\n                setLogLevelFromEnv(key, environment, values);\n                break;\n            default:\n                if (isEnvVarABoolean(key)) {\n                    parseBoolean(key, environment, values);\n                }\n                else if (isEnvVarANumber(key)) {\n                    parseNumber(key, environment, values);\n                }\n                else if (isEnvVarAList(key)) {\n                    parseStringList(key, environment, values);\n                }\n                else {\n                    var value = values[key];\n                    if (typeof value !== 'undefined' && value !== null) {\n                        environment[key] = String(value);\n                    }\n                }\n        }\n    }\n    return environment;\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { DEFAULT_ENVIRONMENT, parseEnvironment, } from '../../utils/environment';\n/**\n * Gets the environment variables\n */\nexport function getEnv() {\n    var processEnv = parseEnvironment(process.env);\n    return Object.assign({}, DEFAULT_ENVIRONMENT, processEnv);\n}\nexport function getEnvWithoutDefaults() {\n    return parseEnvironment(process.env);\n}\n//# sourceMappingURL=environment.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { performance } from 'perf_hooks';\nexport var otperformance = performance;\n//# sourceMappingURL=performance.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// this is autogenerated file, see scripts/version-update.js\nexport var VERSION = '1.30.1';\n//# sourceMappingURL=version.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUD_PROVIDER = 'cloud.provider';\nvar TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nvar TMP_CLOUD_REGION = 'cloud.region';\nvar TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nvar TMP_CLOUD_PLATFORM = 'cloud.platform';\nvar TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nvar TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nvar TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nvar TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nvar TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nvar TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nvar TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nvar TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nvar TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nvar TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nvar TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nvar TMP_CONTAINER_NAME = 'container.name';\nvar TMP_CONTAINER_ID = 'container.id';\nvar TMP_CONTAINER_RUNTIME = 'container.runtime';\nvar TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nvar TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nvar TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nvar TMP_DEVICE_ID = 'device.id';\nvar TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nvar TMP_DEVICE_MODEL_NAME = 'device.model.name';\nvar TMP_FAAS_NAME = 'faas.name';\nvar TMP_FAAS_ID = 'faas.id';\nvar TMP_FAAS_VERSION = 'faas.version';\nvar TMP_FAAS_INSTANCE = 'faas.instance';\nvar TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nvar TMP_HOST_ID = 'host.id';\nvar TMP_HOST_NAME = 'host.name';\nvar TMP_HOST_TYPE = 'host.type';\nvar TMP_HOST_ARCH = 'host.arch';\nvar TMP_HOST_IMAGE_NAME = 'host.image.name';\nvar TMP_HOST_IMAGE_ID = 'host.image.id';\nvar TMP_HOST_IMAGE_VERSION = 'host.image.version';\nvar TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nvar TMP_K8S_NODE_NAME = 'k8s.node.name';\nvar TMP_K8S_NODE_UID = 'k8s.node.uid';\nvar TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nvar TMP_K8S_POD_UID = 'k8s.pod.uid';\nvar TMP_K8S_POD_NAME = 'k8s.pod.name';\nvar TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nvar TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nvar TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nvar TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nvar TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nvar TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nvar TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nvar TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nvar TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nvar TMP_K8S_JOB_UID = 'k8s.job.uid';\nvar TMP_K8S_JOB_NAME = 'k8s.job.name';\nvar TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nvar TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nvar TMP_OS_TYPE = 'os.type';\nvar TMP_OS_DESCRIPTION = 'os.description';\nvar TMP_OS_NAME = 'os.name';\nvar TMP_OS_VERSION = 'os.version';\nvar TMP_PROCESS_PID = 'process.pid';\nvar TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nvar TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nvar TMP_PROCESS_COMMAND = 'process.command';\nvar TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nvar TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nvar TMP_PROCESS_OWNER = 'process.owner';\nvar TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nvar TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nvar TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nvar TMP_SERVICE_NAME = 'service.name';\nvar TMP_SERVICE_NAMESPACE = 'service.namespace';\nvar TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nvar TMP_SERVICE_VERSION = 'service.version';\nvar TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nvar TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nvar TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nvar TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nvar TMP_WEBENGINE_NAME = 'webengine.name';\nvar TMP_WEBENGINE_VERSION = 'webengine.version';\nvar TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport var SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport var SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport var SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport var SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nvar TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport var CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nvar TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nvar TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nvar TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nvar TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nvar TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nvar TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nvar TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nvar TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nvar TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport var CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nvar TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport var AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nvar TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nvar TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nvar TMP_HOSTARCHVALUES_IA64 = 'ia64';\nvar TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nvar TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nvar TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport var HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_OSTYPEVALUES_WINDOWS = 'windows';\nvar TMP_OSTYPEVALUES_LINUX = 'linux';\nvar TMP_OSTYPEVALUES_DARWIN = 'darwin';\nvar TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nvar TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nvar TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nvar TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nvar TMP_OSTYPEVALUES_HPUX = 'hpux';\nvar TMP_OSTYPEVALUES_AIX = 'aix';\nvar TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nvar TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport var OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nvar TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport var TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport var TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar _a;\nimport { VERSION } from '../../version';\nimport { SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_PROCESS_RUNTIME_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, TELEMETRYSDKLANGUAGEVALUES_NODEJS, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\n/** Constants describing the SDK in use */\nexport var SDK_INFO = (_a = {},\n    _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = 'opentelemetry',\n    _a[SEMRESATTRS_PROCESS_RUNTIME_NAME] = 'node',\n    _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = VERSION,\n    _a);\n//# sourceMappingURL=sdk-info.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function unrefTimer(timer) {\n    timer.unref();\n}\n//# sourceMappingURL=timer-util.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { otperformance as performance } from '../platform';\nvar NANOSECOND_DIGITS = 9;\nvar NANOSECOND_DIGITS_IN_MILLIS = 6;\nvar MILLISECONDS_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS_IN_MILLIS);\nvar SECOND_TO_NANOSECONDS = Math.pow(10, NANOSECOND_DIGITS);\n/**\n * Converts a number of milliseconds from epoch to HrTime([seconds, remainder in nanoseconds]).\n * @param epochMillis\n */\nexport function millisToHrTime(epochMillis) {\n    var epochSeconds = epochMillis / 1000;\n    // Decimals only.\n    var seconds = Math.trunc(epochSeconds);\n    // Round sub-nanosecond accuracy to nanosecond.\n    var nanos = Math.round((epochMillis % 1000) * MILLISECONDS_TO_NANOSECONDS);\n    return [seconds, nanos];\n}\nexport function getTimeOrigin() {\n    var timeOrigin = performance.timeOrigin;\n    if (typeof timeOrigin !== 'number') {\n        var perf = performance;\n        timeOrigin = perf.timing && perf.timing.fetchStart;\n    }\n    return timeOrigin;\n}\n/**\n * Returns an hrtime calculated via performance component.\n * @param performanceNow\n */\nexport function hrTime(performanceNow) {\n    var timeOrigin = millisToHrTime(getTimeOrigin());\n    var now = millisToHrTime(typeof performanceNow === 'number' ? performanceNow : performance.now());\n    return addHrTimes(timeOrigin, now);\n}\n/**\n *\n * Converts a TimeInput to an HrTime, defaults to _hrtime().\n * @param time\n */\nexport function timeInputToHrTime(time) {\n    // process.hrtime\n    if (isTimeInputHrTime(time)) {\n        return time;\n    }\n    else if (typeof time === 'number') {\n        // Must be a performance.now() if it's smaller than process start time.\n        if (time < getTimeOrigin()) {\n            return hrTime(time);\n        }\n        else {\n            // epoch milliseconds or performance.timeOrigin\n            return millisToHrTime(time);\n        }\n    }\n    else if (time instanceof Date) {\n        return millisToHrTime(time.getTime());\n    }\n    else {\n        throw TypeError('Invalid input type');\n    }\n}\n/**\n * Returns a duration of two hrTime.\n * @param startTime\n * @param endTime\n */\nexport function hrTimeDuration(startTime, endTime) {\n    var seconds = endTime[0] - startTime[0];\n    var nanos = endTime[1] - startTime[1];\n    // overflow\n    if (nanos < 0) {\n        seconds -= 1;\n        // negate\n        nanos += SECOND_TO_NANOSECONDS;\n    }\n    return [seconds, nanos];\n}\n/**\n * Convert hrTime to timestamp, for example \"2019-05-14T17:00:00.000123456Z\"\n * @param time\n */\nexport function hrTimeToTimeStamp(time) {\n    var precision = NANOSECOND_DIGITS;\n    var tmp = \"\" + '0'.repeat(precision) + time[1] + \"Z\";\n    var nanoString = tmp.substring(tmp.length - precision - 1);\n    var date = new Date(time[0] * 1000).toISOString();\n    return date.replace('000Z', nanoString);\n}\n/**\n * Convert hrTime to nanoseconds.\n * @param time\n */\nexport function hrTimeToNanoseconds(time) {\n    return time[0] * SECOND_TO_NANOSECONDS + time[1];\n}\n/**\n * Convert hrTime to milliseconds.\n * @param time\n */\nexport function hrTimeToMilliseconds(time) {\n    return time[0] * 1e3 + time[1] / 1e6;\n}\n/**\n * Convert hrTime to microseconds.\n * @param time\n */\nexport function hrTimeToMicroseconds(time) {\n    return time[0] * 1e6 + time[1] / 1e3;\n}\n/**\n * check if time is HrTime\n * @param value\n */\nexport function isTimeInputHrTime(value) {\n    return (Array.isArray(value) &&\n        value.length === 2 &&\n        typeof value[0] === 'number' &&\n        typeof value[1] === 'number');\n}\n/**\n * check if input value is a correct types.TimeInput\n * @param value\n */\nexport function isTimeInput(value) {\n    return (isTimeInputHrTime(value) ||\n        typeof value === 'number' ||\n        value instanceof Date);\n}\n/**\n * Given 2 HrTime formatted times, return their sum as an HrTime.\n */\nexport function addHrTimes(time1, time2) {\n    var out = [time1[0] + time2[0], time1[1] + time2[1]];\n    // Nanoseconds\n    if (out[1] >= SECOND_TO_NANOSECONDS) {\n        out[1] -= SECOND_TO_NANOSECONDS;\n        out[0] += 1;\n    }\n    return out;\n}\n//# sourceMappingURL=time.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport var ExportResultCode;\n(function (ExportResultCode) {\n    ExportResultCode[ExportResultCode[\"SUCCESS\"] = 0] = \"SUCCESS\";\n    ExportResultCode[ExportResultCode[\"FAILED\"] = 1] = \"FAILED\";\n})(ExportResultCode || (ExportResultCode = {}));\n//# sourceMappingURL=ExportResult.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { diag, } from '@opentelemetry/api';\n/** Combines multiple propagators into a single propagator. */\nvar CompositePropagator = /** @class */ (function () {\n    /**\n     * Construct a composite propagator from a list of propagators.\n     *\n     * @param [config] Configuration object for composite propagator\n     */\n    function CompositePropagator(config) {\n        if (config === void 0) { config = {}; }\n        var _a;\n        this._propagators = (_a = config.propagators) !== null && _a !== void 0 ? _a : [];\n        this._fields = Array.from(new Set(this._propagators\n            // older propagators may not have fields function, null check to be sure\n            .map(function (p) { return (typeof p.fields === 'function' ? p.fields() : []); })\n            .reduce(function (x, y) { return x.concat(y); }, [])));\n    }\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same carrier key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to inject\n     * @param carrier Carrier into which context will be injected\n     */\n    CompositePropagator.prototype.inject = function (context, carrier, setter) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(this._propagators), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var propagator = _c.value;\n                try {\n                    propagator.inject(context, carrier, setter);\n                }\n                catch (err) {\n                    diag.warn(\"Failed to inject with \" + propagator.constructor.name + \". Err: \" + err.message);\n                }\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n    };\n    /**\n     * Run each of the configured propagators with the given context and carrier.\n     * Propagators are run in the order they are configured, so if multiple\n     * propagators write the same context key, the propagator later in the list\n     * will \"win\".\n     *\n     * @param context Context to add values to\n     * @param carrier Carrier from which to extract context\n     */\n    CompositePropagator.prototype.extract = function (context, carrier, getter) {\n        return this._propagators.reduce(function (ctx, propagator) {\n            try {\n                return propagator.extract(ctx, carrier, getter);\n            }\n            catch (err) {\n                diag.warn(\"Failed to extract with \" + propagator.constructor.name + \". Err: \" + err.message);\n            }\n            return ctx;\n        }, context);\n    };\n    CompositePropagator.prototype.fields = function () {\n        // return a new array so our fields cannot be modified\n        return this._fields.slice();\n    };\n    return CompositePropagator;\n}());\nexport { CompositePropagator };\n//# sourceMappingURL=composite.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar VALID_KEY_CHAR_RANGE = '[_0-9a-z-*/]';\nvar VALID_KEY = \"[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,255}\";\nvar VALID_VENDOR_KEY = \"[a-z0-9]\" + VALID_KEY_CHAR_RANGE + \"{0,240}@[a-z]\" + VALID_KEY_CHAR_RANGE + \"{0,13}\";\nvar VALID_KEY_REGEX = new RegExp(\"^(?:\" + VALID_KEY + \"|\" + VALID_VENDOR_KEY + \")$\");\nvar VALID_VALUE_BASE_REGEX = /^[ -~]{0,255}[!-~]$/;\nvar INVALID_VALUE_COMMA_EQUAL_REGEX = /,|=/;\n/**\n * Key is opaque string up to 256 characters printable. It MUST begin with a\n * lowercase letter, and can only contain lowercase letters a-z, digits 0-9,\n * underscores _, dashes -, asterisks *, and forward slashes /.\n * For multi-tenant vendor scenarios, an at sign (@) can be used to prefix the\n * vendor name. Vendors SHOULD set the tenant ID at the beginning of the key.\n * see https://www.w3.org/TR/trace-context/#key\n */\nexport function validateKey(key) {\n    return VALID_KEY_REGEX.test(key);\n}\n/**\n * Value is opaque string up to 256 characters printable ASCII RFC0020\n * characters (i.e., the range 0x20 to 0x7E) except comma , and =.\n */\nexport function validateValue(value) {\n    return (VALID_VALUE_BASE_REGEX.test(value) &&\n        !INVALID_VALUE_COMMA_EQUAL_REGEX.test(value));\n}\n//# sourceMappingURL=validators.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { validateKey, validateValue } from '../internal/validators';\nvar MAX_TRACE_STATE_ITEMS = 32;\nvar MAX_TRACE_STATE_LEN = 512;\nvar LIST_MEMBERS_SEPARATOR = ',';\nvar LIST_MEMBER_KEY_VALUE_SPLITTER = '=';\n/**\n * TraceState must be a class and not a simple object type because of the spec\n * requirement (https://www.w3.org/TR/trace-context/#tracestate-field).\n *\n * Here is the list of allowed mutations:\n * - New key-value pair should be added into the beginning of the list\n * - The value of any key can be updated. Modified keys MUST be moved to the\n * beginning of the list.\n */\nvar TraceState = /** @class */ (function () {\n    function TraceState(rawTraceState) {\n        this._internalState = new Map();\n        if (rawTraceState)\n            this._parse(rawTraceState);\n    }\n    TraceState.prototype.set = function (key, value) {\n        // TODO: Benchmark the different approaches(map vs list) and\n        // use the faster one.\n        var traceState = this._clone();\n        if (traceState._internalState.has(key)) {\n            traceState._internalState.delete(key);\n        }\n        traceState._internalState.set(key, value);\n        return traceState;\n    };\n    TraceState.prototype.unset = function (key) {\n        var traceState = this._clone();\n        traceState._internalState.delete(key);\n        return traceState;\n    };\n    TraceState.prototype.get = function (key) {\n        return this._internalState.get(key);\n    };\n    TraceState.prototype.serialize = function () {\n        var _this = this;\n        return this._keys()\n            .reduce(function (agg, key) {\n            agg.push(key + LIST_MEMBER_KEY_VALUE_SPLITTER + _this.get(key));\n            return agg;\n        }, [])\n            .join(LIST_MEMBERS_SEPARATOR);\n    };\n    TraceState.prototype._parse = function (rawTraceState) {\n        if (rawTraceState.length > MAX_TRACE_STATE_LEN)\n            return;\n        this._internalState = rawTraceState\n            .split(LIST_MEMBERS_SEPARATOR)\n            .reverse() // Store in reverse so new keys (.set(...)) will be placed at the beginning\n            .reduce(function (agg, part) {\n            var listMember = part.trim(); // Optional Whitespace (OWS) handling\n            var i = listMember.indexOf(LIST_MEMBER_KEY_VALUE_SPLITTER);\n            if (i !== -1) {\n                var key = listMember.slice(0, i);\n                var value = listMember.slice(i + 1, part.length);\n                if (validateKey(key) && validateValue(value)) {\n                    agg.set(key, value);\n                }\n                else {\n                    // TODO: Consider to add warning log\n                }\n            }\n            return agg;\n        }, new Map());\n        // Because of the reverse() requirement, trunc must be done after map is created\n        if (this._internalState.size > MAX_TRACE_STATE_ITEMS) {\n            this._internalState = new Map(Array.from(this._internalState.entries())\n                .reverse() // Use reverse same as original tracestate parse chain\n                .slice(0, MAX_TRACE_STATE_ITEMS));\n        }\n    };\n    TraceState.prototype._keys = function () {\n        return Array.from(this._internalState.keys()).reverse();\n    };\n    TraceState.prototype._clone = function () {\n        var traceState = new TraceState();\n        traceState._internalState = new Map(this._internalState);\n        return traceState;\n    };\n    return TraceState;\n}());\nexport { TraceState };\n//# sourceMappingURL=TraceState.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, trace, TraceFlags, } from '@opentelemetry/api';\nimport { isTracingSuppressed } from './suppress-tracing';\nimport { TraceState } from './TraceState';\nexport var TRACE_PARENT_HEADER = 'traceparent';\nexport var TRACE_STATE_HEADER = 'tracestate';\nvar VERSION = '00';\nvar VERSION_PART = '(?!ff)[\\\\da-f]{2}';\nvar TRACE_ID_PART = '(?![0]{32})[\\\\da-f]{32}';\nvar PARENT_ID_PART = '(?![0]{16})[\\\\da-f]{16}';\nvar FLAGS_PART = '[\\\\da-f]{2}';\nvar TRACE_PARENT_REGEX = new RegExp(\"^\\\\s?(\" + VERSION_PART + \")-(\" + TRACE_ID_PART + \")-(\" + PARENT_ID_PART + \")-(\" + FLAGS_PART + \")(-.*)?\\\\s?$\");\n/**\n * Parses information from the [traceparent] span tag and converts it into {@link SpanContext}\n * @param traceParent - A meta property that comes from server.\n *     It should be dynamically generated server side to have the server's request trace Id,\n *     a parent span Id that was set on the server's request span,\n *     and the trace flags to indicate the server's sampling decision\n *     (01 = sampled, 00 = not sampled).\n *     for example: '{version}-{traceId}-{spanId}-{sampleDecision}'\n *     For more information see {@link https://www.w3.org/TR/trace-context/}\n */\nexport function parseTraceParent(traceParent) {\n    var match = TRACE_PARENT_REGEX.exec(traceParent);\n    if (!match)\n        return null;\n    // According to the specification the implementation should be compatible\n    // with future versions. If there are more parts, we only reject it if it's using version 00\n    // See https://www.w3.org/TR/trace-context/#versioning-of-traceparent\n    if (match[1] === '00' && match[5])\n        return null;\n    return {\n        traceId: match[2],\n        spanId: match[3],\n        traceFlags: parseInt(match[4], 16),\n    };\n}\n/**\n * Propagates {@link SpanContext} through Trace Context format propagation.\n *\n * Based on the Trace Context specification:\n * https://www.w3.org/TR/trace-context/\n */\nvar W3CTraceContextPropagator = /** @class */ (function () {\n    function W3CTraceContextPropagator() {\n    }\n    W3CTraceContextPropagator.prototype.inject = function (context, carrier, setter) {\n        var spanContext = trace.getSpanContext(context);\n        if (!spanContext ||\n            isTracingSuppressed(context) ||\n            !isSpanContextValid(spanContext))\n            return;\n        var traceParent = VERSION + \"-\" + spanContext.traceId + \"-\" + spanContext.spanId + \"-0\" + Number(spanContext.traceFlags || TraceFlags.NONE).toString(16);\n        setter.set(carrier, TRACE_PARENT_HEADER, traceParent);\n        if (spanContext.traceState) {\n            setter.set(carrier, TRACE_STATE_HEADER, spanContext.traceState.serialize());\n        }\n    };\n    W3CTraceContextPropagator.prototype.extract = function (context, carrier, getter) {\n        var traceParentHeader = getter.get(carrier, TRACE_PARENT_HEADER);\n        if (!traceParentHeader)\n            return context;\n        var traceParent = Array.isArray(traceParentHeader)\n            ? traceParentHeader[0]\n            : traceParentHeader;\n        if (typeof traceParent !== 'string')\n            return context;\n        var spanContext = parseTraceParent(traceParent);\n        if (!spanContext)\n            return context;\n        spanContext.isRemote = true;\n        var traceStateHeader = getter.get(carrier, TRACE_STATE_HEADER);\n        if (traceStateHeader) {\n            // If more than one `tracestate` header is found, we merge them into a\n            // single header.\n            var state = Array.isArray(traceStateHeader)\n                ? traceStateHeader.join(',')\n                : traceStateHeader;\n            spanContext.traceState = new TraceState(typeof state === 'string' ? state : undefined);\n        }\n        return trace.setSpanContext(context, spanContext);\n    };\n    W3CTraceContextPropagator.prototype.fields = function () {\n        return [TRACE_PARENT_HEADER, TRACE_STATE_HEADER];\n    };\n    return W3CTraceContextPropagator;\n}());\nexport { W3CTraceContextPropagator };\n//# sourceMappingURL=W3CTraceContextPropagator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\n/**\n * based on lodash in order to support esm builds without esModuleInterop.\n * lodash is using MIT License.\n **/\nvar objectTag = '[object Object]';\nvar nullTag = '[object Null]';\nvar undefinedTag = '[object Undefined]';\nvar funcProto = Function.prototype;\nvar funcToString = funcProto.toString;\nvar objectCtorString = funcToString.call(Object);\nvar getPrototype = overArg(Object.getPrototypeOf, Object);\nvar objectProto = Object.prototype;\nvar hasOwnProperty = objectProto.hasOwnProperty;\nvar symToStringTag = Symbol ? Symbol.toStringTag : undefined;\nvar nativeObjectToString = objectProto.toString;\n/**\n * Creates a unary function that invokes `func` with its argument transformed.\n *\n * @private\n * @param {Function} func The function to wrap.\n * @param {Function} transform The argument transform.\n * @returns {Function} Returns the new function.\n */\nfunction overArg(func, transform) {\n    return function (arg) {\n        return func(transform(arg));\n    };\n}\n/**\n * Checks if `value` is a plain object, that is, an object created by the\n * `Object` constructor or one with a `[[Prototype]]` of `null`.\n *\n * @static\n * @memberOf _\n * @since 0.8.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a plain object, else `false`.\n * @example\n *\n * function Foo() {\n *   this.a = 1;\n * }\n *\n * _.isPlainObject(new Foo);\n * // => false\n *\n * _.isPlainObject([1, 2, 3]);\n * // => false\n *\n * _.isPlainObject({ 'x': 0, 'y': 0 });\n * // => true\n *\n * _.isPlainObject(Object.create(null));\n * // => true\n */\nexport function isPlainObject(value) {\n    if (!isObjectLike(value) || baseGetTag(value) !== objectTag) {\n        return false;\n    }\n    var proto = getPrototype(value);\n    if (proto === null) {\n        return true;\n    }\n    var Ctor = hasOwnProperty.call(proto, 'constructor') && proto.constructor;\n    return (typeof Ctor == 'function' &&\n        Ctor instanceof Ctor &&\n        funcToString.call(Ctor) === objectCtorString);\n}\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n    return value != null && typeof value == 'object';\n}\n/**\n * The base implementation of `getTag` without fallbacks for buggy environments.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the `toStringTag`.\n */\nfunction baseGetTag(value) {\n    if (value == null) {\n        return value === undefined ? undefinedTag : nullTag;\n    }\n    return symToStringTag && symToStringTag in Object(value)\n        ? getRawTag(value)\n        : objectToString(value);\n}\n/**\n * A specialized version of `baseGetTag` which ignores `Symbol.toStringTag` values.\n *\n * @private\n * @param {*} value The value to query.\n * @returns {string} Returns the raw `toStringTag`.\n */\nfunction getRawTag(value) {\n    var isOwn = hasOwnProperty.call(value, symToStringTag), tag = value[symToStringTag];\n    var unmasked = false;\n    try {\n        value[symToStringTag] = undefined;\n        unmasked = true;\n    }\n    catch (e) {\n        // silence\n    }\n    var result = nativeObjectToString.call(value);\n    if (unmasked) {\n        if (isOwn) {\n            value[symToStringTag] = tag;\n        }\n        else {\n            delete value[symToStringTag];\n        }\n    }\n    return result;\n}\n/**\n * Converts `value` to a string using `Object.prototype.toString`.\n *\n * @private\n * @param {*} value The value to convert.\n * @returns {string} Returns the converted string.\n */\nfunction objectToString(value) {\n    return nativeObjectToString.call(value);\n}\n//# sourceMappingURL=lodash.merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* eslint-disable @typescript-eslint/no-explicit-any */\nimport { isPlainObject } from './lodash.merge';\nvar MAX_LEVEL = 20;\n/**\n * Merges objects together\n * @param args - objects / values to be merged\n */\nexport function merge() {\n    var args = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        args[_i] = arguments[_i];\n    }\n    var result = args.shift();\n    var objects = new WeakMap();\n    while (args.length > 0) {\n        result = mergeTwoObjects(result, args.shift(), 0, objects);\n    }\n    return result;\n}\nfunction takeValue(value) {\n    if (isArray(value)) {\n        return value.slice();\n    }\n    return value;\n}\n/**\n * Merges two objects\n * @param one - first object\n * @param two - second object\n * @param level - current deep level\n * @param objects - objects holder that has been already referenced - to prevent\n * cyclic dependency\n */\nfunction mergeTwoObjects(one, two, level, objects) {\n    if (level === void 0) { level = 0; }\n    var result;\n    if (level > MAX_LEVEL) {\n        return undefined;\n    }\n    level++;\n    if (isPrimitive(one) || isPrimitive(two) || isFunction(two)) {\n        result = takeValue(two);\n    }\n    else if (isArray(one)) {\n        result = one.slice();\n        if (isArray(two)) {\n            for (var i = 0, j = two.length; i < j; i++) {\n                result.push(takeValue(two[i]));\n            }\n        }\n        else if (isObject(two)) {\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                result[key] = takeValue(two[key]);\n            }\n        }\n    }\n    else if (isObject(one)) {\n        if (isObject(two)) {\n            if (!shouldMerge(one, two)) {\n                return two;\n            }\n            result = Object.assign({}, one);\n            var keys = Object.keys(two);\n            for (var i = 0, j = keys.length; i < j; i++) {\n                var key = keys[i];\n                var twoValue = two[key];\n                if (isPrimitive(twoValue)) {\n                    if (typeof twoValue === 'undefined') {\n                        delete result[key];\n                    }\n                    else {\n                        // result[key] = takeValue(twoValue);\n                        result[key] = twoValue;\n                    }\n                }\n                else {\n                    var obj1 = result[key];\n                    var obj2 = twoValue;\n                    if (wasObjectReferenced(one, key, objects) ||\n                        wasObjectReferenced(two, key, objects)) {\n                        delete result[key];\n                    }\n                    else {\n                        if (isObject(obj1) && isObject(obj2)) {\n                            var arr1 = objects.get(obj1) || [];\n                            var arr2 = objects.get(obj2) || [];\n                            arr1.push({ obj: one, key: key });\n                            arr2.push({ obj: two, key: key });\n                            objects.set(obj1, arr1);\n                            objects.set(obj2, arr2);\n                        }\n                        result[key] = mergeTwoObjects(result[key], twoValue, level, objects);\n                    }\n                }\n            }\n        }\n        else {\n            result = two;\n        }\n    }\n    return result;\n}\n/**\n * Function to check if object has been already reference\n * @param obj\n * @param key\n * @param objects\n */\nfunction wasObjectReferenced(obj, key, objects) {\n    var arr = objects.get(obj[key]) || [];\n    for (var i = 0, j = arr.length; i < j; i++) {\n        var info = arr[i];\n        if (info.key === key && info.obj === obj) {\n            return true;\n        }\n    }\n    return false;\n}\nfunction isArray(value) {\n    return Array.isArray(value);\n}\nfunction isFunction(value) {\n    return typeof value === 'function';\n}\nfunction isObject(value) {\n    return (!isPrimitive(value) &&\n        !isArray(value) &&\n        !isFunction(value) &&\n        typeof value === 'object');\n}\nfunction isPrimitive(value) {\n    return (typeof value === 'string' ||\n        typeof value === 'number' ||\n        typeof value === 'boolean' ||\n        typeof value === 'undefined' ||\n        value instanceof Date ||\n        value instanceof RegExp ||\n        value === null);\n}\nfunction shouldMerge(one, two) {\n    if (!isPlainObject(one) || !isPlainObject(two)) {\n        return false;\n    }\n    return true;\n}\n//# sourceMappingURL=merge.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar Deferred = /** @class */ (function () {\n    function Deferred() {\n        var _this = this;\n        this._promise = new Promise(function (resolve, reject) {\n            _this._resolve = resolve;\n            _this._reject = reject;\n        });\n    }\n    Object.defineProperty(Deferred.prototype, \"promise\", {\n        get: function () {\n            return this._promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Deferred.prototype.resolve = function (val) {\n        this._resolve(val);\n    };\n    Deferred.prototype.reject = function (err) {\n        this._reject(err);\n    };\n    return Deferred;\n}());\nexport { Deferred };\n//# sourceMappingURL=promise.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { Deferred } from './promise';\n/**\n * Bind the callback and only invoke the callback once regardless how many times `BindOnceFuture.call` is invoked.\n */\nvar BindOnceFuture = /** @class */ (function () {\n    function BindOnceFuture(_callback, _that) {\n        this._callback = _callback;\n        this._that = _that;\n        this._isCalled = false;\n        this._deferred = new Deferred();\n    }\n    Object.defineProperty(BindOnceFuture.prototype, \"isCalled\", {\n        get: function () {\n            return this._isCalled;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(BindOnceFuture.prototype, \"promise\", {\n        get: function () {\n            return this._deferred.promise;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    BindOnceFuture.prototype.call = function () {\n        var _a;\n        var _this = this;\n        var args = [];\n        for (var _i = 0; _i < arguments.length; _i++) {\n            args[_i] = arguments[_i];\n        }\n        if (!this._isCalled) {\n            this._isCalled = true;\n            try {\n                Promise.resolve((_a = this._callback).call.apply(_a, __spreadArray([this._that], __read(args), false))).then(function (val) { return _this._deferred.resolve(val); }, function (err) { return _this._deferred.reject(err); });\n            }\n            catch (err) {\n                this._deferred.reject(err);\n            }\n        }\n        return this._deferred.promise;\n    };\n    return BindOnceFuture;\n}());\nexport { BindOnceFuture };\n//# sourceMappingURL=callback.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nexport function defaultServiceName() {\n    return \"unknown_service:\" + process.argv0;\n}\n//# sourceMappingURL=default-service-name.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nvar __generator = (this && this.__generator) || function (thisArg, body) {\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\n    function verb(n) { return function (v) { return step([n, v]); }; }\n    function step(op) {\n        if (f) throw new TypeError(\"Generator is already executing.\");\n        while (_) try {\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n            if (y = 0, t) op = [op[0] & 2, t.value];\n            switch (op[0]) {\n                case 0: case 1: t = op; break;\n                case 4: _.label++; return { value: op[1], done: false };\n                case 5: _.label++; y = op[1]; op = [0]; continue;\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\n                default:\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\n                    if (t[2]) _.ops.pop();\n                    _.trys.pop(); continue;\n            }\n            op = body.call(thisArg, _);\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\n    }\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nimport { diag } from '@opentelemetry/api';\nimport { SEMRESATTRS_SERVICE_NAME, SEMRESATTRS_TELEMETRY_SDK_LANGUAGE, SEMRESATTRS_TELEMETRY_SDK_NAME, SEMRESATTRS_TELEMETRY_SDK_VERSION, } from '@opentelemetry/semantic-conventions';\nimport { SDK_INFO } from '@opentelemetry/core';\nimport { defaultServiceName } from './platform';\n/**\n * A Resource describes the entity for which a signals (metrics or trace) are\n * collected.\n */\nvar Resource = /** @class */ (function () {\n    function Resource(\n    /**\n     * A dictionary of attributes with string keys and values that provide\n     * information about the entity as numbers, strings or booleans\n     * TODO: Consider to add check/validation on attributes.\n     */\n    attributes, asyncAttributesPromise) {\n        var _this = this;\n        var _a;\n        this._attributes = attributes;\n        this.asyncAttributesPending = asyncAttributesPromise != null;\n        this._syncAttributes = (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        this._asyncAttributesPromise = asyncAttributesPromise === null || asyncAttributesPromise === void 0 ? void 0 : asyncAttributesPromise.then(function (asyncAttributes) {\n            _this._attributes = Object.assign({}, _this._attributes, asyncAttributes);\n            _this.asyncAttributesPending = false;\n            return asyncAttributes;\n        }, function (err) {\n            diag.debug(\"a resource's async attributes promise rejected: %s\", err);\n            _this.asyncAttributesPending = false;\n            return {};\n        });\n    }\n    /**\n     * Returns an empty Resource\n     */\n    Resource.empty = function () {\n        return Resource.EMPTY;\n    };\n    /**\n     * Returns a Resource that identifies the SDK in use.\n     */\n    Resource.default = function () {\n        var _a;\n        return new Resource((_a = {},\n            _a[SEMRESATTRS_SERVICE_NAME] = defaultServiceName(),\n            _a[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_LANGUAGE],\n            _a[SEMRESATTRS_TELEMETRY_SDK_NAME] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_NAME],\n            _a[SEMRESATTRS_TELEMETRY_SDK_VERSION] = SDK_INFO[SEMRESATTRS_TELEMETRY_SDK_VERSION],\n            _a));\n    };\n    Object.defineProperty(Resource.prototype, \"attributes\", {\n        get: function () {\n            var _a;\n            if (this.asyncAttributesPending) {\n                diag.error('Accessing resource attributes before async attributes settled');\n            }\n            return (_a = this._attributes) !== null && _a !== void 0 ? _a : {};\n        },\n        enumerable: false,\n        configurable: true\n    });\n    /**\n     * Returns a promise that will never be rejected. Resolves when all async attributes have finished being added to\n     * this Resource's attributes. This is useful in exporters to block until resource detection\n     * has finished.\n     */\n    Resource.prototype.waitForAsyncAttributes = function () {\n        return __awaiter(this, void 0, void 0, function () {\n            return __generator(this, function (_a) {\n                switch (_a.label) {\n                    case 0:\n                        if (!this.asyncAttributesPending) return [3 /*break*/, 2];\n                        return [4 /*yield*/, this._asyncAttributesPromise];\n                    case 1:\n                        _a.sent();\n                        _a.label = 2;\n                    case 2: return [2 /*return*/];\n                }\n            });\n        });\n    };\n    /**\n     * Returns a new, merged {@link Resource} by merging the current Resource\n     * with the other Resource. In case of a collision, other Resource takes\n     * precedence.\n     *\n     * @param other the Resource that will be merged with this.\n     * @returns the newly merged Resource.\n     */\n    Resource.prototype.merge = function (other) {\n        var _this = this;\n        var _a;\n        if (!other)\n            return this;\n        // SpanAttributes from other resource overwrite attributes from this resource.\n        var mergedSyncAttributes = __assign(__assign({}, this._syncAttributes), ((_a = other._syncAttributes) !== null && _a !== void 0 ? _a : other.attributes));\n        if (!this._asyncAttributesPromise &&\n            !other._asyncAttributesPromise) {\n            return new Resource(mergedSyncAttributes);\n        }\n        var mergedAttributesPromise = Promise.all([\n            this._asyncAttributesPromise,\n            other._asyncAttributesPromise,\n        ]).then(function (_a) {\n            var _b;\n            var _c = __read(_a, 2), thisAsyncAttributes = _c[0], otherAsyncAttributes = _c[1];\n            return __assign(__assign(__assign(__assign({}, _this._syncAttributes), thisAsyncAttributes), ((_b = other._syncAttributes) !== null && _b !== void 0 ? _b : other.attributes)), otherAsyncAttributes);\n        });\n        return new Resource(mergedSyncAttributes, mergedAttributesPromise);\n    };\n    Resource.EMPTY = new Resource({});\n    return Resource;\n}());\nexport { Resource };\n//# sourceMappingURL=Resource.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nvar TMP_DB_SYSTEM = 'db.system';\nvar TMP_DB_CONNECTION_STRING = 'db.connection_string';\nvar TMP_DB_USER = 'db.user';\nvar TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nvar TMP_DB_NAME = 'db.name';\nvar TMP_DB_STATEMENT = 'db.statement';\nvar TMP_DB_OPERATION = 'db.operation';\nvar TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nvar TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nvar TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nvar TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nvar TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nvar TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nvar TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nvar TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nvar TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nvar TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nvar TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nvar TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nvar TMP_DB_SQL_TABLE = 'db.sql.table';\nvar TMP_EXCEPTION_TYPE = 'exception.type';\nvar TMP_EXCEPTION_MESSAGE = 'exception.message';\nvar TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nvar TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nvar TMP_FAAS_TRIGGER = 'faas.trigger';\nvar TMP_FAAS_EXECUTION = 'faas.execution';\nvar TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nvar TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nvar TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nvar TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nvar TMP_FAAS_TIME = 'faas.time';\nvar TMP_FAAS_CRON = 'faas.cron';\nvar TMP_FAAS_COLDSTART = 'faas.coldstart';\nvar TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nvar TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nvar TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nvar TMP_NET_TRANSPORT = 'net.transport';\nvar TMP_NET_PEER_IP = 'net.peer.ip';\nvar TMP_NET_PEER_PORT = 'net.peer.port';\nvar TMP_NET_PEER_NAME = 'net.peer.name';\nvar TMP_NET_HOST_IP = 'net.host.ip';\nvar TMP_NET_HOST_PORT = 'net.host.port';\nvar TMP_NET_HOST_NAME = 'net.host.name';\nvar TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nvar TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nvar TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nvar TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nvar TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nvar TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nvar TMP_PEER_SERVICE = 'peer.service';\nvar TMP_ENDUSER_ID = 'enduser.id';\nvar TMP_ENDUSER_ROLE = 'enduser.role';\nvar TMP_ENDUSER_SCOPE = 'enduser.scope';\nvar TMP_THREAD_ID = 'thread.id';\nvar TMP_THREAD_NAME = 'thread.name';\nvar TMP_CODE_FUNCTION = 'code.function';\nvar TMP_CODE_NAMESPACE = 'code.namespace';\nvar TMP_CODE_FILEPATH = 'code.filepath';\nvar TMP_CODE_LINENO = 'code.lineno';\nvar TMP_HTTP_METHOD = 'http.method';\nvar TMP_HTTP_URL = 'http.url';\nvar TMP_HTTP_TARGET = 'http.target';\nvar TMP_HTTP_HOST = 'http.host';\nvar TMP_HTTP_SCHEME = 'http.scheme';\nvar TMP_HTTP_STATUS_CODE = 'http.status_code';\nvar TMP_HTTP_FLAVOR = 'http.flavor';\nvar TMP_HTTP_USER_AGENT = 'http.user_agent';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nvar TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nvar TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nvar TMP_HTTP_SERVER_NAME = 'http.server_name';\nvar TMP_HTTP_ROUTE = 'http.route';\nvar TMP_HTTP_CLIENT_IP = 'http.client_ip';\nvar TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nvar TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nvar TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nvar TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nvar TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nvar TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nvar TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nvar TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nvar TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nvar TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nvar TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nvar TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nvar TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nvar TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nvar TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nvar TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nvar TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nvar TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nvar TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nvar TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nvar TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nvar TMP_MESSAGING_SYSTEM = 'messaging.system';\nvar TMP_MESSAGING_DESTINATION = 'messaging.destination';\nvar TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nvar TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nvar TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nvar TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nvar TMP_MESSAGING_URL = 'messaging.url';\nvar TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nvar TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nvar TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nvar TMP_MESSAGING_OPERATION = 'messaging.operation';\nvar TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nvar TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nvar TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nvar TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nvar TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nvar TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nvar TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nvar TMP_RPC_SYSTEM = 'rpc.system';\nvar TMP_RPC_SERVICE = 'rpc.service';\nvar TMP_RPC_METHOD = 'rpc.method';\nvar TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nvar TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nvar TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nvar TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nvar TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nvar TMP_MESSAGE_TYPE = 'message.type';\nvar TMP_MESSAGE_ID = 'message.id';\nvar TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nvar TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport var SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport var SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport var SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport var SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport var SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport var SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport var SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport var SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport var SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport var SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport var SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nvar TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nvar TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nvar TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nvar TMP_DBSYSTEMVALUES_DB2 = 'db2';\nvar TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nvar TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nvar TMP_DBSYSTEMVALUES_HIVE = 'hive';\nvar TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nvar TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nvar TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nvar TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nvar TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nvar TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nvar TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nvar TMP_DBSYSTEMVALUES_EDB = 'edb';\nvar TMP_DBSYSTEMVALUES_CACHE = 'cache';\nvar TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nvar TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nvar TMP_DBSYSTEMVALUES_DERBY = 'derby';\nvar TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nvar TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nvar TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nvar TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nvar TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nvar TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nvar TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nvar TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nvar TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nvar TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nvar TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nvar TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nvar TMP_DBSYSTEMVALUES_H2 = 'h2';\nvar TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nvar TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nvar TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nvar TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nvar TMP_DBSYSTEMVALUES_REDIS = 'redis';\nvar TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nvar TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nvar TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nvar TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nvar TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nvar TMP_DBSYSTEMVALUES_GEODE = 'geode';\nvar TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nvar TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nvar TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport var DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nvar TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport var DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nvar TMP_FAASTRIGGERVALUES_HTTP = 'http';\nvar TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nvar TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nvar TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport var FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nvar TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport var FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nvar TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nvar TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport var FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nvar TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nvar TMP_NETTRANSPORTVALUES_IP = 'ip';\nvar TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nvar TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nvar TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nvar TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport var NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport var NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport var NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nvar TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nvar TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport var NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nvar TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nvar TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nvar TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nvar TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport var HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nvar TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport var MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport var MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nvar TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport var MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nvar TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nvar TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nvar TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nvar TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nvar TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nvar TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nvar TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nvar TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nvar TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nvar TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport var RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nvar TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nvar TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport var MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport var MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n// Event name definitions\nexport var ExceptionEventName = 'exception';\n//# sourceMappingURL=enums.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { diag, SpanStatusCode, } from '@opentelemetry/api';\nimport { addHrTimes, millisToHrTime, getTimeOrigin, hrTime, hrTimeDuration, isAttributeValue, isTimeInput, isTimeInputHrTime, otperformance, sanitizeAttributes, } from '@opentelemetry/core';\nimport { SEMATTRS_EXCEPTION_MESSAGE, SEMATTRS_EXCEPTION_STACKTRACE, SEMATTRS_EXCEPTION_TYPE, } from '@opentelemetry/semantic-conventions';\nimport { ExceptionEventName } from './enums';\n/**\n * This class represents a span.\n */\nvar Span = /** @class */ (function () {\n    /**\n     * Constructs a new Span instance.\n     *\n     * @deprecated calling Span constructor directly is not supported. Please use tracer.startSpan.\n     * */\n    function Span(parentTracer, context, spanName, spanContext, kind, parentSpanId, links, startTime, _deprecatedClock, // keeping this argument even though it is unused to ensure backwards compatibility\n    attributes) {\n        if (links === void 0) { links = []; }\n        this.attributes = {};\n        this.links = [];\n        this.events = [];\n        this._droppedAttributesCount = 0;\n        this._droppedEventsCount = 0;\n        this._droppedLinksCount = 0;\n        this.status = {\n            code: SpanStatusCode.UNSET,\n        };\n        this.endTime = [0, 0];\n        this._ended = false;\n        this._duration = [-1, -1];\n        this.name = spanName;\n        this._spanContext = spanContext;\n        this.parentSpanId = parentSpanId;\n        this.kind = kind;\n        this.links = links;\n        var now = Date.now();\n        this._performanceStartTime = otperformance.now();\n        this._performanceOffset =\n            now - (this._performanceStartTime + getTimeOrigin());\n        this._startTimeProvided = startTime != null;\n        this.startTime = this._getTime(startTime !== null && startTime !== void 0 ? startTime : now);\n        this.resource = parentTracer.resource;\n        this.instrumentationLibrary = parentTracer.instrumentationLibrary;\n        this._spanLimits = parentTracer.getSpanLimits();\n        this._attributeValueLengthLimit =\n            this._spanLimits.attributeValueLengthLimit || 0;\n        if (attributes != null) {\n            this.setAttributes(attributes);\n        }\n        this._spanProcessor = parentTracer.getActiveSpanProcessor();\n        this._spanProcessor.onStart(this, context);\n    }\n    Span.prototype.spanContext = function () {\n        return this._spanContext;\n    };\n    Span.prototype.setAttribute = function (key, value) {\n        if (value == null || this._isSpanEnded())\n            return this;\n        if (key.length === 0) {\n            diag.warn(\"Invalid attribute key: \" + key);\n            return this;\n        }\n        if (!isAttributeValue(value)) {\n            diag.warn(\"Invalid attribute value set for key: \" + key);\n            return this;\n        }\n        if (Object.keys(this.attributes).length >=\n            this._spanLimits.attributeCountLimit &&\n            !Object.prototype.hasOwnProperty.call(this.attributes, key)) {\n            this._droppedAttributesCount++;\n            return this;\n        }\n        this.attributes[key] = this._truncateToSize(value);\n        return this;\n    };\n    Span.prototype.setAttributes = function (attributes) {\n        var e_1, _a;\n        try {\n            for (var _b = __values(Object.entries(attributes)), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var _d = __read(_c.value, 2), k = _d[0], v = _d[1];\n                this.setAttribute(k, v);\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return this;\n    };\n    /**\n     *\n     * @param name Span Name\n     * @param [attributesOrStartTime] Span attributes or start time\n     *     if type is {@type TimeInput} and 3rd param is undefined\n     * @param [timeStamp] Specified time stamp for the event\n     */\n    Span.prototype.addEvent = function (name, attributesOrStartTime, timeStamp) {\n        if (this._isSpanEnded())\n            return this;\n        if (this._spanLimits.eventCountLimit === 0) {\n            diag.warn('No events allowed.');\n            this._droppedEventsCount++;\n            return this;\n        }\n        if (this.events.length >= this._spanLimits.eventCountLimit) {\n            if (this._droppedEventsCount === 0) {\n                diag.debug('Dropping extra events.');\n            }\n            this.events.shift();\n            this._droppedEventsCount++;\n        }\n        if (isTimeInput(attributesOrStartTime)) {\n            if (!isTimeInput(timeStamp)) {\n                timeStamp = attributesOrStartTime;\n            }\n            attributesOrStartTime = undefined;\n        }\n        var attributes = sanitizeAttributes(attributesOrStartTime);\n        this.events.push({\n            name: name,\n            attributes: attributes,\n            time: this._getTime(timeStamp),\n            droppedAttributesCount: 0,\n        });\n        return this;\n    };\n    Span.prototype.addLink = function (link) {\n        this.links.push(link);\n        return this;\n    };\n    Span.prototype.addLinks = function (links) {\n        var _a;\n        (_a = this.links).push.apply(_a, __spreadArray([], __read(links), false));\n        return this;\n    };\n    Span.prototype.setStatus = function (status) {\n        if (this._isSpanEnded())\n            return this;\n        this.status = __assign({}, status);\n        // When using try-catch, the caught \"error\" is of type `any`. When then assigning `any` to `status.message`,\n        // TypeScript will not error. While this can happen during use of any API, it is more common on Span#setStatus()\n        // as it's likely used in a catch-block. Therefore, we validate if `status.message` is actually a string, null, or\n        // undefined to avoid an incorrect type causing issues downstream.\n        if (this.status.message != null && typeof status.message !== 'string') {\n            diag.warn(\"Dropping invalid status.message of type '\" + typeof status.message + \"', expected 'string'\");\n            delete this.status.message;\n        }\n        return this;\n    };\n    Span.prototype.updateName = function (name) {\n        if (this._isSpanEnded())\n            return this;\n        this.name = name;\n        return this;\n    };\n    Span.prototype.end = function (endTime) {\n        if (this._isSpanEnded()) {\n            diag.error(this.name + \" \" + this._spanContext.traceId + \"-\" + this._spanContext.spanId + \" - You can only call end() on a span once.\");\n            return;\n        }\n        this._ended = true;\n        this.endTime = this._getTime(endTime);\n        this._duration = hrTimeDuration(this.startTime, this.endTime);\n        if (this._duration[0] < 0) {\n            diag.warn('Inconsistent start and end time, startTime > endTime. Setting span duration to 0ms.', this.startTime, this.endTime);\n            this.endTime = this.startTime.slice();\n            this._duration = [0, 0];\n        }\n        if (this._droppedEventsCount > 0) {\n            diag.warn(\"Dropped \" + this._droppedEventsCount + \" events because eventCountLimit reached\");\n        }\n        this._spanProcessor.onEnd(this);\n    };\n    Span.prototype._getTime = function (inp) {\n        if (typeof inp === 'number' && inp <= otperformance.now()) {\n            // must be a performance timestamp\n            // apply correction and convert to hrtime\n            return hrTime(inp + this._performanceOffset);\n        }\n        if (typeof inp === 'number') {\n            return millisToHrTime(inp);\n        }\n        if (inp instanceof Date) {\n            return millisToHrTime(inp.getTime());\n        }\n        if (isTimeInputHrTime(inp)) {\n            return inp;\n        }\n        if (this._startTimeProvided) {\n            // if user provided a time for the start manually\n            // we can't use duration to calculate event/end times\n            return millisToHrTime(Date.now());\n        }\n        var msDuration = otperformance.now() - this._performanceStartTime;\n        return addHrTimes(this.startTime, millisToHrTime(msDuration));\n    };\n    Span.prototype.isRecording = function () {\n        return this._ended === false;\n    };\n    Span.prototype.recordException = function (exception, time) {\n        var attributes = {};\n        if (typeof exception === 'string') {\n            attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception;\n        }\n        else if (exception) {\n            if (exception.code) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.code.toString();\n            }\n            else if (exception.name) {\n                attributes[SEMATTRS_EXCEPTION_TYPE] = exception.name;\n            }\n            if (exception.message) {\n                attributes[SEMATTRS_EXCEPTION_MESSAGE] = exception.message;\n            }\n            if (exception.stack) {\n                attributes[SEMATTRS_EXCEPTION_STACKTRACE] = exception.stack;\n            }\n        }\n        // these are minimum requirements from spec\n        if (attributes[SEMATTRS_EXCEPTION_TYPE] ||\n            attributes[SEMATTRS_EXCEPTION_MESSAGE]) {\n            this.addEvent(ExceptionEventName, attributes, time);\n        }\n        else {\n            diag.warn(\"Failed to record an exception \" + exception);\n        }\n    };\n    Object.defineProperty(Span.prototype, \"duration\", {\n        get: function () {\n            return this._duration;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"ended\", {\n        get: function () {\n            return this._ended;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedAttributesCount\", {\n        get: function () {\n            return this._droppedAttributesCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedEventsCount\", {\n        get: function () {\n            return this._droppedEventsCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Object.defineProperty(Span.prototype, \"droppedLinksCount\", {\n        get: function () {\n            return this._droppedLinksCount;\n        },\n        enumerable: false,\n        configurable: true\n    });\n    Span.prototype._isSpanEnded = function () {\n        if (this._ended) {\n            diag.warn(\"Can not execute the operation on ended Span {traceId: \" + this._spanContext.traceId + \", spanId: \" + this._spanContext.spanId + \"}\");\n        }\n        return this._ended;\n    };\n    // Utility function to truncate given value within size\n    // for value type of string, will truncate to given limit\n    // for type of non-string, will return same value\n    Span.prototype._truncateToLimitUtil = function (value, limit) {\n        if (value.length <= limit) {\n            return value;\n        }\n        return value.substring(0, limit);\n    };\n    /**\n     * If the given attribute value is of type string and has more characters than given {@code attributeValueLengthLimit} then\n     * return string with truncated to {@code attributeValueLengthLimit} characters\n     *\n     * If the given attribute value is array of strings then\n     * return new array of strings with each element truncated to {@code attributeValueLengthLimit} characters\n     *\n     * Otherwise return same Attribute {@code value}\n     *\n     * @param value Attribute value\n     * @returns truncated attribute value if required, otherwise same value\n     */\n    Span.prototype._truncateToSize = function (value) {\n        var _this = this;\n        var limit = this._attributeValueLengthLimit;\n        // Check limit\n        if (limit <= 0) {\n            // Negative values are invalid, so do not truncate\n            diag.warn(\"Attribute value limit must be positive, got \" + limit);\n            return value;\n        }\n        // String\n        if (typeof value === 'string') {\n            return this._truncateToLimitUtil(value, limit);\n        }\n        // Array of strings\n        if (Array.isArray(value)) {\n            return value.map(function (val) {\n                return typeof val === 'string' ? _this._truncateToLimitUtil(val, limit) : val;\n            });\n        }\n        // Other types, no need to apply value length limit\n        return value;\n    };\n    return Span;\n}());\nexport { Span };\n//# sourceMappingURL=Span.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/**\n * A sampling decision that determines how a {@link Span} will be recorded\n * and collected.\n */\nexport var SamplingDecision;\n(function (SamplingDecision) {\n    /**\n     * `Span.isRecording() === false`, span will not be recorded and all events\n     * and attributes will be dropped.\n     */\n    SamplingDecision[SamplingDecision[\"NOT_RECORD\"] = 0] = \"NOT_RECORD\";\n    /**\n     * `Span.isRecording() === true`, but `Sampled` flag in {@link TraceFlags}\n     * MUST NOT be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD\"] = 1] = \"RECORD\";\n    /**\n     * `Span.isRecording() === true` AND `Sampled` flag in {@link TraceFlags}\n     * MUST be set.\n     */\n    SamplingDecision[SamplingDecision[\"RECORD_AND_SAMPLED\"] = 2] = \"RECORD_AND_SAMPLED\";\n})(SamplingDecision || (SamplingDecision = {}));\n//# sourceMappingURL=Sampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples no traces. */\nvar AlwaysOffSampler = /** @class */ (function () {\n    function AlwaysOffSampler() {\n    }\n    AlwaysOffSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.NOT_RECORD,\n        };\n    };\n    AlwaysOffSampler.prototype.toString = function () {\n        return 'AlwaysOffSampler';\n    };\n    return AlwaysOffSampler;\n}());\nexport { AlwaysOffSampler };\n//# sourceMappingURL=AlwaysOffSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples all traces. */\nvar AlwaysOnSampler = /** @class */ (function () {\n    function AlwaysOnSampler() {\n    }\n    AlwaysOnSampler.prototype.shouldSample = function () {\n        return {\n            decision: SamplingDecision.RECORD_AND_SAMPLED,\n        };\n    };\n    AlwaysOnSampler.prototype.toString = function () {\n        return 'AlwaysOnSampler';\n    };\n    return AlwaysOnSampler;\n}());\nexport { AlwaysOnSampler };\n//# sourceMappingURL=AlwaysOnSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isSpanContextValid, TraceFlags, trace, } from '@opentelemetry/api';\nimport { globalErrorHandler } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './AlwaysOffSampler';\nimport { AlwaysOnSampler } from './AlwaysOnSampler';\n/**\n * A composite sampler that either respects the parent span's sampling decision\n * or delegates to `delegateSampler` for root spans.\n */\nvar ParentBasedSampler = /** @class */ (function () {\n    function ParentBasedSampler(config) {\n        var _a, _b, _c, _d;\n        this._root = config.root;\n        if (!this._root) {\n            globalErrorHandler(new Error('ParentBasedSampler must have a root sampler configured'));\n            this._root = new AlwaysOnSampler();\n        }\n        this._remoteParentSampled =\n            (_a = config.remoteParentSampled) !== null && _a !== void 0 ? _a : new AlwaysOnSampler();\n        this._remoteParentNotSampled =\n            (_b = config.remoteParentNotSampled) !== null && _b !== void 0 ? _b : new AlwaysOffSampler();\n        this._localParentSampled =\n            (_c = config.localParentSampled) !== null && _c !== void 0 ? _c : new AlwaysOnSampler();\n        this._localParentNotSampled =\n            (_d = config.localParentNotSampled) !== null && _d !== void 0 ? _d : new AlwaysOffSampler();\n    }\n    ParentBasedSampler.prototype.shouldSample = function (context, traceId, spanName, spanKind, attributes, links) {\n        var parentContext = trace.getSpanContext(context);\n        if (!parentContext || !isSpanContextValid(parentContext)) {\n            return this._root.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.isRemote) {\n            if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n                return this._remoteParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n            }\n            return this._remoteParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        if (parentContext.traceFlags & TraceFlags.SAMPLED) {\n            return this._localParentSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n        }\n        return this._localParentNotSampled.shouldSample(context, traceId, spanName, spanKind, attributes, links);\n    };\n    ParentBasedSampler.prototype.toString = function () {\n        return \"ParentBased{root=\" + this._root.toString() + \", remoteParentSampled=\" + this._remoteParentSampled.toString() + \", remoteParentNotSampled=\" + this._remoteParentNotSampled.toString() + \", localParentSampled=\" + this._localParentSampled.toString() + \", localParentNotSampled=\" + this._localParentNotSampled.toString() + \"}\";\n    };\n    return ParentBasedSampler;\n}());\nexport { ParentBasedSampler };\n//# sourceMappingURL=ParentBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { isValidTraceId } from '@opentelemetry/api';\nimport { SamplingDecision } from '../Sampler';\n/** Sampler that samples a given fraction of traces based of trace id deterministically. */\nvar TraceIdRatioBasedSampler = /** @class */ (function () {\n    function TraceIdRatioBasedSampler(_ratio) {\n        if (_ratio === void 0) { _ratio = 0; }\n        this._ratio = _ratio;\n        this._ratio = this._normalize(_ratio);\n        this._upperBound = Math.floor(this._ratio * 0xffffffff);\n    }\n    TraceIdRatioBasedSampler.prototype.shouldSample = function (context, traceId) {\n        return {\n            decision: isValidTraceId(traceId) && this._accumulate(traceId) < this._upperBound\n                ? SamplingDecision.RECORD_AND_SAMPLED\n                : SamplingDecision.NOT_RECORD,\n        };\n    };\n    TraceIdRatioBasedSampler.prototype.toString = function () {\n        return \"TraceIdRatioBased{\" + this._ratio + \"}\";\n    };\n    TraceIdRatioBasedSampler.prototype._normalize = function (ratio) {\n        if (typeof ratio !== 'number' || isNaN(ratio))\n            return 0;\n        return ratio >= 1 ? 1 : ratio <= 0 ? 0 : ratio;\n    };\n    TraceIdRatioBasedSampler.prototype._accumulate = function (traceId) {\n        var accumulation = 0;\n        for (var i = 0; i < traceId.length / 8; i++) {\n            var pos = i * 8;\n            var part = parseInt(traceId.slice(pos, pos + 8), 16);\n            accumulation = (accumulation ^ part) >>> 0;\n        }\n        return accumulation;\n    };\n    return TraceIdRatioBasedSampler;\n}());\nexport { TraceIdRatioBasedSampler };\n//# sourceMappingURL=TraceIdRatioBasedSampler.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { diag } from '@opentelemetry/api';\nimport { getEnv, TracesSamplerValues } from '@opentelemetry/core';\nimport { AlwaysOffSampler } from './sampler/AlwaysOffSampler';\nimport { AlwaysOnSampler } from './sampler/AlwaysOnSampler';\nimport { ParentBasedSampler } from './sampler/ParentBasedSampler';\nimport { TraceIdRatioBasedSampler } from './sampler/TraceIdRatioBasedSampler';\nvar FALLBACK_OTEL_TRACES_SAMPLER = TracesSamplerValues.AlwaysOn;\nvar DEFAULT_RATIO = 1;\n/**\n * Load default configuration. For fields with primitive values, any user-provided\n * value will override the corresponding default value. For fields with\n * non-primitive values (like `spanLimits`), the user-provided value will be\n * used to extend the default value.\n */\n// object needs to be wrapped in this function and called when needed otherwise\n// envs are parsed before tests are ran - causes tests using these envs to fail\nexport function loadDefaultConfig() {\n    var env = getEnv();\n    return {\n        sampler: buildSamplerFromEnv(env),\n        forceFlushTimeoutMillis: 30000,\n        generalLimits: {\n            attributeValueLengthLimit: env.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_ATTRIBUTE_COUNT_LIMIT,\n        },\n        spanLimits: {\n            attributeValueLengthLimit: env.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT,\n            attributeCountLimit: env.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT,\n            linkCountLimit: env.OTEL_SPAN_LINK_COUNT_LIMIT,\n            eventCountLimit: env.OTEL_SPAN_EVENT_COUNT_LIMIT,\n            attributePerEventCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_EVENT_COUNT_LIMIT,\n            attributePerLinkCountLimit: env.OTEL_SPAN_ATTRIBUTE_PER_LINK_COUNT_LIMIT,\n        },\n        mergeResourceWithDefaults: true,\n    };\n}\n/**\n * Based on environment, builds a sampler, complies with specification.\n * @param environment optional, by default uses getEnv(), but allows passing a value to reuse parsed environment\n */\nexport function buildSamplerFromEnv(environment) {\n    if (environment === void 0) { environment = getEnv(); }\n    switch (environment.OTEL_TRACES_SAMPLER) {\n        case TracesSamplerValues.AlwaysOn:\n            return new AlwaysOnSampler();\n        case TracesSamplerValues.AlwaysOff:\n            return new AlwaysOffSampler();\n        case TracesSamplerValues.ParentBasedAlwaysOn:\n            return new ParentBasedSampler({\n                root: new AlwaysOnSampler(),\n            });\n        case TracesSamplerValues.ParentBasedAlwaysOff:\n            return new ParentBasedSampler({\n                root: new AlwaysOffSampler(),\n            });\n        case TracesSamplerValues.TraceIdRatio:\n            return new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment));\n        case TracesSamplerValues.ParentBasedTraceIdRatio:\n            return new ParentBasedSampler({\n                root: new TraceIdRatioBasedSampler(getSamplerProbabilityFromEnv(environment)),\n            });\n        default:\n            diag.error(\"OTEL_TRACES_SAMPLER value \\\"\" + environment.OTEL_TRACES_SAMPLER + \" invalid, defaulting to \" + FALLBACK_OTEL_TRACES_SAMPLER + \"\\\".\");\n            return new AlwaysOnSampler();\n    }\n}\nfunction getSamplerProbabilityFromEnv(environment) {\n    if (environment.OTEL_TRACES_SAMPLER_ARG === undefined ||\n        environment.OTEL_TRACES_SAMPLER_ARG === '') {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG is blank, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    var probability = Number(environment.OTEL_TRACES_SAMPLER_ARG);\n    if (isNaN(probability)) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is invalid, defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    if (probability < 0 || probability > 1) {\n        diag.error(\"OTEL_TRACES_SAMPLER_ARG=\" + environment.OTEL_TRACES_SAMPLER_ARG + \" was given, but it is out of range ([0..1]), defaulting to \" + DEFAULT_RATIO + \".\");\n        return DEFAULT_RATIO;\n    }\n    return probability;\n}\n//# sourceMappingURL=config.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { buildSamplerFromEnv, loadDefaultConfig } from './config';\nimport { DEFAULT_ATTRIBUTE_COUNT_LIMIT, DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT, getEnvWithoutDefaults, } from '@opentelemetry/core';\n/**\n * Function to merge Default configuration (as specified in './config') with\n * user provided configurations.\n */\nexport function mergeConfig(userConfig) {\n    var perInstanceDefaults = {\n        sampler: buildSamplerFromEnv(),\n    };\n    var DEFAULT_CONFIG = loadDefaultConfig();\n    var target = Object.assign({}, DEFAULT_CONFIG, perInstanceDefaults, userConfig);\n    target.generalLimits = Object.assign({}, DEFAULT_CONFIG.generalLimits, userConfig.generalLimits || {});\n    target.spanLimits = Object.assign({}, DEFAULT_CONFIG.spanLimits, userConfig.spanLimits || {});\n    return target;\n}\n/**\n * When general limits are provided and model specific limits are not,\n * configures the model specific limits by using the values from the general ones.\n * @param userConfig User provided tracer configuration\n */\nexport function reconfigureLimits(userConfig) {\n    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k, _l, _m;\n    var spanLimits = Object.assign({}, userConfig.spanLimits);\n    var parsedEnvConfig = getEnvWithoutDefaults();\n    /**\n     * Reassign span attribute count limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeCountLimit =\n        (_f = (_e = (_d = (_b = (_a = userConfig.spanLimits) === null || _a === void 0 ? void 0 : _a.attributeCountLimit) !== null && _b !== void 0 ? _b : (_c = userConfig.generalLimits) === null || _c === void 0 ? void 0 : _c.attributeCountLimit) !== null && _d !== void 0 ? _d : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_COUNT_LIMIT) !== null && _e !== void 0 ? _e : parsedEnvConfig.OTEL_ATTRIBUTE_COUNT_LIMIT) !== null && _f !== void 0 ? _f : DEFAULT_ATTRIBUTE_COUNT_LIMIT;\n    /**\n     * Reassign span attribute value length limit to use first non null value defined by user or use default value\n     */\n    spanLimits.attributeValueLengthLimit =\n        (_m = (_l = (_k = (_h = (_g = userConfig.spanLimits) === null || _g === void 0 ? void 0 : _g.attributeValueLengthLimit) !== null && _h !== void 0 ? _h : (_j = userConfig.generalLimits) === null || _j === void 0 ? void 0 : _j.attributeValueLengthLimit) !== null && _k !== void 0 ? _k : parsedEnvConfig.OTEL_SPAN_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _l !== void 0 ? _l : parsedEnvConfig.OTEL_ATTRIBUTE_VALUE_LENGTH_LIMIT) !== null && _m !== void 0 ? _m : DEFAULT_ATTRIBUTE_VALUE_LENGTH_LIMIT;\n    return Object.assign({}, userConfig, { spanLimits: spanLimits });\n}\n//# sourceMappingURL=utility.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { context, diag, TraceFlags } from '@opentelemetry/api';\nimport { BindOnceFuture, ExportResultCode, getEnv, globalErrorHandler, suppressTracing, unrefTimer, } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that batches spans exported by\n * the SDK then pushes them to the exporter pipeline.\n */\nvar BatchSpanProcessorBase = /** @class */ (function () {\n    function BatchSpanProcessorBase(_exporter, config) {\n        this._exporter = _exporter;\n        this._isExporting = false;\n        this._finishedSpans = [];\n        this._droppedSpansCount = 0;\n        var env = getEnv();\n        this._maxExportBatchSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxExportBatchSize) === 'number'\n                ? config.maxExportBatchSize\n                : env.OTEL_BSP_MAX_EXPORT_BATCH_SIZE;\n        this._maxQueueSize =\n            typeof (config === null || config === void 0 ? void 0 : config.maxQueueSize) === 'number'\n                ? config.maxQueueSize\n                : env.OTEL_BSP_MAX_QUEUE_SIZE;\n        this._scheduledDelayMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.scheduledDelayMillis) === 'number'\n                ? config.scheduledDelayMillis\n                : env.OTEL_BSP_SCHEDULE_DELAY;\n        this._exportTimeoutMillis =\n            typeof (config === null || config === void 0 ? void 0 : config.exportTimeoutMillis) === 'number'\n                ? config.exportTimeoutMillis\n                : env.OTEL_BSP_EXPORT_TIMEOUT;\n        this._shutdownOnce = new BindOnceFuture(this._shutdown, this);\n        if (this._maxExportBatchSize > this._maxQueueSize) {\n            diag.warn('BatchSpanProcessor: maxExportBatchSize must be smaller or equal to maxQueueSize, setting maxExportBatchSize to match maxQueueSize');\n            this._maxExportBatchSize = this._maxQueueSize;\n        }\n    }\n    BatchSpanProcessorBase.prototype.forceFlush = function () {\n        if (this._shutdownOnce.isCalled) {\n            return this._shutdownOnce.promise;\n        }\n        return this._flushAll();\n    };\n    // does nothing.\n    BatchSpanProcessorBase.prototype.onStart = function (_span, _parentContext) { };\n    BatchSpanProcessorBase.prototype.onEnd = function (span) {\n        if (this._shutdownOnce.isCalled) {\n            return;\n        }\n        if ((span.spanContext().traceFlags & TraceFlags.SAMPLED) === 0) {\n            return;\n        }\n        this._addToBuffer(span);\n    };\n    BatchSpanProcessorBase.prototype.shutdown = function () {\n        return this._shutdownOnce.call();\n    };\n    BatchSpanProcessorBase.prototype._shutdown = function () {\n        var _this = this;\n        return Promise.resolve()\n            .then(function () {\n            return _this.onShutdown();\n        })\n            .then(function () {\n            return _this._flushAll();\n        })\n            .then(function () {\n            return _this._exporter.shutdown();\n        });\n    };\n    /** Add a span in the buffer. */\n    BatchSpanProcessorBase.prototype._addToBuffer = function (span) {\n        if (this._finishedSpans.length >= this._maxQueueSize) {\n            // limit reached, drop span\n            if (this._droppedSpansCount === 0) {\n                diag.debug('maxQueueSize reached, dropping spans');\n            }\n            this._droppedSpansCount++;\n            return;\n        }\n        if (this._droppedSpansCount > 0) {\n            // some spans were dropped, log once with count of spans dropped\n            diag.warn(\"Dropped \" + this._droppedSpansCount + \" spans because maxQueueSize reached\");\n            this._droppedSpansCount = 0;\n        }\n        this._finishedSpans.push(span);\n        this._maybeStartTimer();\n    };\n    /**\n     * Send all spans to the exporter respecting the batch size limit\n     * This function is used only on forceFlush or shutdown,\n     * for all other cases _flush should be used\n     * */\n    BatchSpanProcessorBase.prototype._flushAll = function () {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            var promises = [];\n            // calculate number of batches\n            var count = Math.ceil(_this._finishedSpans.length / _this._maxExportBatchSize);\n            for (var i = 0, j = count; i < j; i++) {\n                promises.push(_this._flushOneBatch());\n            }\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(reject);\n        });\n    };\n    BatchSpanProcessorBase.prototype._flushOneBatch = function () {\n        var _this = this;\n        this._clearTimer();\n        if (this._finishedSpans.length === 0) {\n            return Promise.resolve();\n        }\n        return new Promise(function (resolve, reject) {\n            var timer = setTimeout(function () {\n                // don't wait anymore for export, this way the next batch can start\n                reject(new Error('Timeout'));\n            }, _this._exportTimeoutMillis);\n            // prevent downstream exporter calls from generating spans\n            context.with(suppressTracing(context.active()), function () {\n                // Reset the finished spans buffer here because the next invocations of the _flush method\n                // could pass the same finished spans to the exporter if the buffer is cleared\n                // outside the execution of this callback.\n                var spans;\n                if (_this._finishedSpans.length <= _this._maxExportBatchSize) {\n                    spans = _this._finishedSpans;\n                    _this._finishedSpans = [];\n                }\n                else {\n                    spans = _this._finishedSpans.splice(0, _this._maxExportBatchSize);\n                }\n                var doExport = function () {\n                    return _this._exporter.export(spans, function (result) {\n                        var _a;\n                        clearTimeout(timer);\n                        if (result.code === ExportResultCode.SUCCESS) {\n                            resolve();\n                        }\n                        else {\n                            reject((_a = result.error) !== null && _a !== void 0 ? _a : new Error('BatchSpanProcessor: span export failed'));\n                        }\n                    });\n                };\n                var pendingResources = null;\n                for (var i = 0, len = spans.length; i < len; i++) {\n                    var span = spans[i];\n                    if (span.resource.asyncAttributesPending &&\n                        span.resource.waitForAsyncAttributes) {\n                        pendingResources !== null && pendingResources !== void 0 ? pendingResources : (pendingResources = []);\n                        pendingResources.push(span.resource.waitForAsyncAttributes());\n                    }\n                }\n                // Avoid scheduling a promise to make the behavior more predictable and easier to test\n                if (pendingResources === null) {\n                    doExport();\n                }\n                else {\n                    Promise.all(pendingResources).then(doExport, function (err) {\n                        globalErrorHandler(err);\n                        reject(err);\n                    });\n                }\n            });\n        });\n    };\n    BatchSpanProcessorBase.prototype._maybeStartTimer = function () {\n        var _this = this;\n        if (this._isExporting)\n            return;\n        var flush = function () {\n            _this._isExporting = true;\n            _this._flushOneBatch()\n                .finally(function () {\n                _this._isExporting = false;\n                if (_this._finishedSpans.length > 0) {\n                    _this._clearTimer();\n                    _this._maybeStartTimer();\n                }\n            })\n                .catch(function (e) {\n                _this._isExporting = false;\n                globalErrorHandler(e);\n            });\n        };\n        // we only wait if the queue doesn't have enough elements yet\n        if (this._finishedSpans.length >= this._maxExportBatchSize) {\n            return flush();\n        }\n        if (this._timer !== undefined)\n            return;\n        this._timer = setTimeout(function () { return flush(); }, this._scheduledDelayMillis);\n        unrefTimer(this._timer);\n    };\n    BatchSpanProcessorBase.prototype._clearTimer = function () {\n        if (this._timer !== undefined) {\n            clearTimeout(this._timer);\n            this._timer = undefined;\n        }\n    };\n    return BatchSpanProcessorBase;\n}());\nexport { BatchSpanProcessorBase };\n//# sourceMappingURL=BatchSpanProcessorBase.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        if (typeof b !== \"function\" && b !== null)\n            throw new TypeError(\"Class extends value \" + String(b) + \" is not a constructor or null\");\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport { BatchSpanProcessorBase } from '../../../export/BatchSpanProcessorBase';\nvar BatchSpanProcessor = /** @class */ (function (_super) {\n    __extends(BatchSpanProcessor, _super);\n    function BatchSpanProcessor() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    BatchSpanProcessor.prototype.onShutdown = function () { };\n    return BatchSpanProcessor;\n}(BatchSpanProcessorBase));\nexport { BatchSpanProcessor };\n//# sourceMappingURL=BatchSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar SPAN_ID_BYTES = 8;\nvar TRACE_ID_BYTES = 16;\nvar RandomIdGenerator = /** @class */ (function () {\n    function RandomIdGenerator() {\n        /**\n         * Returns a random 16-byte trace ID formatted/encoded as a 32 lowercase hex\n         * characters corresponding to 128 bits.\n         */\n        this.generateTraceId = getIdGenerator(TRACE_ID_BYTES);\n        /**\n         * Returns a random 8-byte span ID formatted/encoded as a 16 lowercase hex\n         * characters corresponding to 64 bits.\n         */\n        this.generateSpanId = getIdGenerator(SPAN_ID_BYTES);\n    }\n    return RandomIdGenerator;\n}());\nexport { RandomIdGenerator };\nvar SHARED_BUFFER = Buffer.allocUnsafe(TRACE_ID_BYTES);\nfunction getIdGenerator(bytes) {\n    return function generateId() {\n        for (var i = 0; i < bytes / 4; i++) {\n            // unsigned right shift drops decimal part of the number\n            // it is required because if a number between 2**32 and 2**32 - 1 is generated, an out of range error is thrown by writeUInt32BE\n            SHARED_BUFFER.writeUInt32BE((Math.random() * Math.pow(2, 32)) >>> 0, i * 4);\n        }\n        // If buffer is all 0, set the last byte to 1 to guarantee a valid w3c id is generated\n        for (var i = 0; i < bytes; i++) {\n            if (SHARED_BUFFER[i] > 0) {\n                break;\n            }\n            else if (i === bytes - 1) {\n                SHARED_BUFFER[bytes - 1] = 1;\n            }\n        }\n        return SHARED_BUFFER.toString('hex', 0, bytes);\n    };\n}\n//# sourceMappingURL=RandomIdGenerator.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport * as api from '@opentelemetry/api';\nimport { sanitizeAttributes, isTracingSuppressed, } from '@opentelemetry/core';\nimport { Span } from './Span';\nimport { mergeConfig } from './utility';\nimport { RandomIdGenerator } from './platform';\n/**\n * This class represents a basic tracer.\n */\nvar Tracer = /** @class */ (function () {\n    /**\n     * Constructs a new Tracer instance.\n     */\n    function Tracer(instrumentationLibrary, config, _tracerProvider) {\n        this._tracerProvider = _tracerProvider;\n        var localConfig = mergeConfig(config);\n        this._sampler = localConfig.sampler;\n        this._generalLimits = localConfig.generalLimits;\n        this._spanLimits = localConfig.spanLimits;\n        this._idGenerator = config.idGenerator || new RandomIdGenerator();\n        this.resource = _tracerProvider.resource;\n        this.instrumentationLibrary = instrumentationLibrary;\n    }\n    /**\n     * Starts a new Span or returns the default NoopSpan based on the sampling\n     * decision.\n     */\n    Tracer.prototype.startSpan = function (name, options, context) {\n        var _a, _b, _c;\n        if (options === void 0) { options = {}; }\n        if (context === void 0) { context = api.context.active(); }\n        // remove span from context in case a root span is requested via options\n        if (options.root) {\n            context = api.trace.deleteSpan(context);\n        }\n        var parentSpan = api.trace.getSpan(context);\n        if (isTracingSuppressed(context)) {\n            api.diag.debug('Instrumentation suppressed, returning Noop Span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(api.INVALID_SPAN_CONTEXT);\n            return nonRecordingSpan;\n        }\n        var parentSpanContext = parentSpan === null || parentSpan === void 0 ? void 0 : parentSpan.spanContext();\n        var spanId = this._idGenerator.generateSpanId();\n        var traceId;\n        var traceState;\n        var parentSpanId;\n        if (!parentSpanContext ||\n            !api.trace.isSpanContextValid(parentSpanContext)) {\n            // New root span.\n            traceId = this._idGenerator.generateTraceId();\n        }\n        else {\n            // New child span.\n            traceId = parentSpanContext.traceId;\n            traceState = parentSpanContext.traceState;\n            parentSpanId = parentSpanContext.spanId;\n        }\n        var spanKind = (_a = options.kind) !== null && _a !== void 0 ? _a : api.SpanKind.INTERNAL;\n        var links = ((_b = options.links) !== null && _b !== void 0 ? _b : []).map(function (link) {\n            return {\n                context: link.context,\n                attributes: sanitizeAttributes(link.attributes),\n            };\n        });\n        var attributes = sanitizeAttributes(options.attributes);\n        // make sampling decision\n        var samplingResult = this._sampler.shouldSample(context, traceId, name, spanKind, attributes, links);\n        traceState = (_c = samplingResult.traceState) !== null && _c !== void 0 ? _c : traceState;\n        var traceFlags = samplingResult.decision === api.SamplingDecision.RECORD_AND_SAMPLED\n            ? api.TraceFlags.SAMPLED\n            : api.TraceFlags.NONE;\n        var spanContext = { traceId: traceId, spanId: spanId, traceFlags: traceFlags, traceState: traceState };\n        if (samplingResult.decision === api.SamplingDecision.NOT_RECORD) {\n            api.diag.debug('Recording is off, propagating context in a non-recording span');\n            var nonRecordingSpan = api.trace.wrapSpanContext(spanContext);\n            return nonRecordingSpan;\n        }\n        // Set initial span attributes. The attributes object may have been mutated\n        // by the sampler, so we sanitize the merged attributes before setting them.\n        var initAttributes = sanitizeAttributes(Object.assign(attributes, samplingResult.attributes));\n        var span = new Span(this, context, name, spanContext, spanKind, parentSpanId, links, options.startTime, undefined, initAttributes);\n        return span;\n    };\n    Tracer.prototype.startActiveSpan = function (name, arg2, arg3, arg4) {\n        var opts;\n        var ctx;\n        var fn;\n        if (arguments.length < 2) {\n            return;\n        }\n        else if (arguments.length === 2) {\n            fn = arg2;\n        }\n        else if (arguments.length === 3) {\n            opts = arg2;\n            fn = arg3;\n        }\n        else {\n            opts = arg2;\n            ctx = arg3;\n            fn = arg4;\n        }\n        var parentContext = ctx !== null && ctx !== void 0 ? ctx : api.context.active();\n        var span = this.startSpan(name, opts, parentContext);\n        var contextWithSpanSet = api.trace.setSpan(parentContext, span);\n        return api.context.with(contextWithSpanSet, fn, undefined, span);\n    };\n    /** Returns the active {@link GeneralLimits}. */\n    Tracer.prototype.getGeneralLimits = function () {\n        return this._generalLimits;\n    };\n    /** Returns the active {@link SpanLimits}. */\n    Tracer.prototype.getSpanLimits = function () {\n        return this._spanLimits;\n    };\n    Tracer.prototype.getActiveSpanProcessor = function () {\n        return this._tracerProvider.getActiveSpanProcessor();\n    };\n    return Tracer;\n}());\nexport { Tracer };\n//# sourceMappingURL=Tracer.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __values = (this && this.__values) || function(o) {\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\n    if (m) return m.call(o);\n    if (o && typeof o.length === \"number\") return {\n        next: function () {\n            if (o && i >= o.length) o = void 0;\n            return { value: o && o[i++], done: !o };\n        }\n    };\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\n};\nimport { globalErrorHandler } from '@opentelemetry/core';\n/**\n * Implementation of the {@link SpanProcessor} that simply forwards all\n * received events to a list of {@link SpanProcessor}s.\n */\nvar MultiSpanProcessor = /** @class */ (function () {\n    function MultiSpanProcessor(_spanProcessors) {\n        this._spanProcessors = _spanProcessors;\n    }\n    MultiSpanProcessor.prototype.forceFlush = function () {\n        var e_1, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.forceFlush());\n            }\n        }\n        catch (e_1_1) { e_1 = { error: e_1_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_1) throw e_1.error; }\n        }\n        return new Promise(function (resolve) {\n            Promise.all(promises)\n                .then(function () {\n                resolve();\n            })\n                .catch(function (error) {\n                globalErrorHandler(error || new Error('MultiSpanProcessor: forceFlush failed'));\n                resolve();\n            });\n        });\n    };\n    MultiSpanProcessor.prototype.onStart = function (span, context) {\n        var e_2, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onStart(span, context);\n            }\n        }\n        catch (e_2_1) { e_2 = { error: e_2_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_2) throw e_2.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.onEnd = function (span) {\n        var e_3, _a;\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                spanProcessor.onEnd(span);\n            }\n        }\n        catch (e_3_1) { e_3 = { error: e_3_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_3) throw e_3.error; }\n        }\n    };\n    MultiSpanProcessor.prototype.shutdown = function () {\n        var e_4, _a;\n        var promises = [];\n        try {\n            for (var _b = __values(this._spanProcessors), _c = _b.next(); !_c.done; _c = _b.next()) {\n                var spanProcessor = _c.value;\n                promises.push(spanProcessor.shutdown());\n            }\n        }\n        catch (e_4_1) { e_4 = { error: e_4_1 }; }\n        finally {\n            try {\n                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);\n            }\n            finally { if (e_4) throw e_4.error; }\n        }\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises).then(function () {\n                resolve();\n            }, reject);\n        });\n    };\n    return MultiSpanProcessor;\n}());\nexport { MultiSpanProcessor };\n//# sourceMappingURL=MultiSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/** No-op implementation of SpanProcessor */\nvar NoopSpanProcessor = /** @class */ (function () {\n    function NoopSpanProcessor() {\n    }\n    NoopSpanProcessor.prototype.onStart = function (_span, _context) { };\n    NoopSpanProcessor.prototype.onEnd = function (_span) { };\n    NoopSpanProcessor.prototype.shutdown = function () {\n        return Promise.resolve();\n    };\n    NoopSpanProcessor.prototype.forceFlush = function () {\n        return Promise.resolve();\n    };\n    return NoopSpanProcessor;\n}());\nexport { NoopSpanProcessor };\n//# sourceMappingURL=NoopSpanProcessor.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nvar __read = (this && this.__read) || function (o, n) {\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\n    if (!m) return o;\n    var i = m.call(o), r, ar = [], e;\n    try {\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\n    }\n    catch (error) { e = { error: error }; }\n    finally {\n        try {\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\n        }\n        finally { if (e) throw e.error; }\n    }\n    return ar;\n};\nvar __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {\n    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {\n        if (ar || !(i in from)) {\n            if (!ar) ar = Array.prototype.slice.call(from, 0, i);\n            ar[i] = from[i];\n        }\n    }\n    return to.concat(ar || Array.prototype.slice.call(from));\n};\nimport { context, diag, propagation, trace, } from '@opentelemetry/api';\nimport { CompositePropagator, W3CBaggagePropagator, W3CTraceContextPropagator, getEnv, merge, } from '@opentelemetry/core';\nimport { Resource } from '@opentelemetry/resources';\nimport { Tracer } from './Tracer';\nimport { loadDefaultConfig } from './config';\nimport { MultiSpanProcessor } from './MultiSpanProcessor';\nimport { NoopSpanProcessor } from './export/NoopSpanProcessor';\nimport { BatchSpanProcessor } from './platform';\nimport { reconfigureLimits } from './utility';\nexport var ForceFlushState;\n(function (ForceFlushState) {\n    ForceFlushState[ForceFlushState[\"resolved\"] = 0] = \"resolved\";\n    ForceFlushState[ForceFlushState[\"timeout\"] = 1] = \"timeout\";\n    ForceFlushState[ForceFlushState[\"error\"] = 2] = \"error\";\n    ForceFlushState[ForceFlushState[\"unresolved\"] = 3] = \"unresolved\";\n})(ForceFlushState || (ForceFlushState = {}));\n/**\n * This class represents a basic tracer provider which platform libraries can extend\n */\nvar BasicTracerProvider = /** @class */ (function () {\n    function BasicTracerProvider(config) {\n        if (config === void 0) { config = {}; }\n        var _a, _b;\n        this._registeredSpanProcessors = [];\n        this._tracers = new Map();\n        var mergedConfig = merge({}, loadDefaultConfig(), reconfigureLimits(config));\n        this.resource = (_a = mergedConfig.resource) !== null && _a !== void 0 ? _a : Resource.empty();\n        if (mergedConfig.mergeResourceWithDefaults) {\n            this.resource = Resource.default().merge(this.resource);\n        }\n        this._config = Object.assign({}, mergedConfig, {\n            resource: this.resource,\n        });\n        if ((_b = config.spanProcessors) === null || _b === void 0 ? void 0 : _b.length) {\n            this._registeredSpanProcessors = __spreadArray([], __read(config.spanProcessors), false);\n            this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n        }\n        else {\n            var defaultExporter = this._buildExporterFromEnv();\n            if (defaultExporter !== undefined) {\n                var batchProcessor = new BatchSpanProcessor(defaultExporter);\n                this.activeSpanProcessor = batchProcessor;\n            }\n            else {\n                this.activeSpanProcessor = new NoopSpanProcessor();\n            }\n        }\n    }\n    BasicTracerProvider.prototype.getTracer = function (name, version, options) {\n        var key = name + \"@\" + (version || '') + \":\" + ((options === null || options === void 0 ? void 0 : options.schemaUrl) || '');\n        if (!this._tracers.has(key)) {\n            this._tracers.set(key, new Tracer({ name: name, version: version, schemaUrl: options === null || options === void 0 ? void 0 : options.schemaUrl }, this._config, this));\n        }\n        // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n        return this._tracers.get(key);\n    };\n    /**\n     * @deprecated please use {@link TracerConfig} spanProcessors property\n     * Adds a new {@link SpanProcessor} to this tracer.\n     * @param spanProcessor the new SpanProcessor to be added.\n     */\n    BasicTracerProvider.prototype.addSpanProcessor = function (spanProcessor) {\n        if (this._registeredSpanProcessors.length === 0) {\n            // since we might have enabled by default a batchProcessor, we disable it\n            // before adding the new one\n            this.activeSpanProcessor\n                .shutdown()\n                .catch(function (err) {\n                return diag.error('Error while trying to shutdown current span processor', err);\n            });\n        }\n        this._registeredSpanProcessors.push(spanProcessor);\n        this.activeSpanProcessor = new MultiSpanProcessor(this._registeredSpanProcessors);\n    };\n    BasicTracerProvider.prototype.getActiveSpanProcessor = function () {\n        return this.activeSpanProcessor;\n    };\n    /**\n     * Register this TracerProvider for use with the OpenTelemetry API.\n     * Undefined values may be replaced with defaults, and\n     * null values will be skipped.\n     *\n     * @param config Configuration object for SDK registration\n     */\n    BasicTracerProvider.prototype.register = function (config) {\n        if (config === void 0) { config = {}; }\n        trace.setGlobalTracerProvider(this);\n        if (config.propagator === undefined) {\n            config.propagator = this._buildPropagatorFromEnv();\n        }\n        if (config.contextManager) {\n            context.setGlobalContextManager(config.contextManager);\n        }\n        if (config.propagator) {\n            propagation.setGlobalPropagator(config.propagator);\n        }\n    };\n    BasicTracerProvider.prototype.forceFlush = function () {\n        var timeout = this._config.forceFlushTimeoutMillis;\n        var promises = this._registeredSpanProcessors.map(function (spanProcessor) {\n            return new Promise(function (resolve) {\n                var state;\n                var timeoutInterval = setTimeout(function () {\n                    resolve(new Error(\"Span processor did not completed within timeout period of \" + timeout + \" ms\"));\n                    state = ForceFlushState.timeout;\n                }, timeout);\n                spanProcessor\n                    .forceFlush()\n                    .then(function () {\n                    clearTimeout(timeoutInterval);\n                    if (state !== ForceFlushState.timeout) {\n                        state = ForceFlushState.resolved;\n                        resolve(state);\n                    }\n                })\n                    .catch(function (error) {\n                    clearTimeout(timeoutInterval);\n                    state = ForceFlushState.error;\n                    resolve(error);\n                });\n            });\n        });\n        return new Promise(function (resolve, reject) {\n            Promise.all(promises)\n                .then(function (results) {\n                var errors = results.filter(function (result) { return result !== ForceFlushState.resolved; });\n                if (errors.length > 0) {\n                    reject(errors);\n                }\n                else {\n                    resolve();\n                }\n            })\n                .catch(function (error) { return reject([error]); });\n        });\n    };\n    BasicTracerProvider.prototype.shutdown = function () {\n        return this.activeSpanProcessor.shutdown();\n    };\n    /**\n     * TS cannot yet infer the type of this.constructor:\n     * https://github.com/Microsoft/TypeScript/issues/3841#issuecomment-337560146\n     * There is no need to override either of the getters in your child class.\n     * The type of the registered component maps should be the same across all\n     * classes in the inheritance tree.\n     */\n    BasicTracerProvider.prototype._getPropagator = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredPropagators.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._getSpanExporter = function (name) {\n        var _a;\n        return (_a = this.constructor._registeredExporters.get(name)) === null || _a === void 0 ? void 0 : _a();\n    };\n    BasicTracerProvider.prototype._buildPropagatorFromEnv = function () {\n        var _this = this;\n        // per spec, propagators from env must be deduplicated\n        var uniquePropagatorNames = Array.from(new Set(getEnv().OTEL_PROPAGATORS));\n        var propagators = uniquePropagatorNames.map(function (name) {\n            var propagator = _this._getPropagator(name);\n            if (!propagator) {\n                diag.warn(\"Propagator \\\"\" + name + \"\\\" requested through environment variable is unavailable.\");\n            }\n            return propagator;\n        });\n        var validPropagators = propagators.reduce(function (list, item) {\n            if (item) {\n                list.push(item);\n            }\n            return list;\n        }, []);\n        if (validPropagators.length === 0) {\n            return;\n        }\n        else if (uniquePropagatorNames.length === 1) {\n            return validPropagators[0];\n        }\n        else {\n            return new CompositePropagator({\n                propagators: validPropagators,\n            });\n        }\n    };\n    BasicTracerProvider.prototype._buildExporterFromEnv = function () {\n        var exporterName = getEnv().OTEL_TRACES_EXPORTER;\n        if (exporterName === 'none' || exporterName === '')\n            return;\n        var exporter = this._getSpanExporter(exporterName);\n        if (!exporter) {\n            diag.error(\"Exporter \\\"\" + exporterName + \"\\\" requested through environment variable is unavailable.\");\n        }\n        return exporter;\n    };\n    BasicTracerProvider._registeredPropagators = new Map([\n        ['tracecontext', function () { return new W3CTraceContextPropagator(); }],\n        ['baggage', function () { return new W3CBaggagePropagator(); }],\n    ]);\n    BasicTracerProvider._registeredExporters = new Map();\n    return BasicTracerProvider;\n}());\nexport { BasicTracerProvider };\n//# sourceMappingURL=BasicTracerProvider.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWS_LAMBDA_INVOKED_ARN = 'aws.lambda.invoked_arn';\nconst TMP_DB_SYSTEM = 'db.system';\nconst TMP_DB_CONNECTION_STRING = 'db.connection_string';\nconst TMP_DB_USER = 'db.user';\nconst TMP_DB_JDBC_DRIVER_CLASSNAME = 'db.jdbc.driver_classname';\nconst TMP_DB_NAME = 'db.name';\nconst TMP_DB_STATEMENT = 'db.statement';\nconst TMP_DB_OPERATION = 'db.operation';\nconst TMP_DB_MSSQL_INSTANCE_NAME = 'db.mssql.instance_name';\nconst TMP_DB_CASSANDRA_KEYSPACE = 'db.cassandra.keyspace';\nconst TMP_DB_CASSANDRA_PAGE_SIZE = 'db.cassandra.page_size';\nconst TMP_DB_CASSANDRA_CONSISTENCY_LEVEL = 'db.cassandra.consistency_level';\nconst TMP_DB_CASSANDRA_TABLE = 'db.cassandra.table';\nconst TMP_DB_CASSANDRA_IDEMPOTENCE = 'db.cassandra.idempotence';\nconst TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = 'db.cassandra.speculative_execution_count';\nconst TMP_DB_CASSANDRA_COORDINATOR_ID = 'db.cassandra.coordinator.id';\nconst TMP_DB_CASSANDRA_COORDINATOR_DC = 'db.cassandra.coordinator.dc';\nconst TMP_DB_HBASE_NAMESPACE = 'db.hbase.namespace';\nconst TMP_DB_REDIS_DATABASE_INDEX = 'db.redis.database_index';\nconst TMP_DB_MONGODB_COLLECTION = 'db.mongodb.collection';\nconst TMP_DB_SQL_TABLE = 'db.sql.table';\nconst TMP_EXCEPTION_TYPE = 'exception.type';\nconst TMP_EXCEPTION_MESSAGE = 'exception.message';\nconst TMP_EXCEPTION_STACKTRACE = 'exception.stacktrace';\nconst TMP_EXCEPTION_ESCAPED = 'exception.escaped';\nconst TMP_FAAS_TRIGGER = 'faas.trigger';\nconst TMP_FAAS_EXECUTION = 'faas.execution';\nconst TMP_FAAS_DOCUMENT_COLLECTION = 'faas.document.collection';\nconst TMP_FAAS_DOCUMENT_OPERATION = 'faas.document.operation';\nconst TMP_FAAS_DOCUMENT_TIME = 'faas.document.time';\nconst TMP_FAAS_DOCUMENT_NAME = 'faas.document.name';\nconst TMP_FAAS_TIME = 'faas.time';\nconst TMP_FAAS_CRON = 'faas.cron';\nconst TMP_FAAS_COLDSTART = 'faas.coldstart';\nconst TMP_FAAS_INVOKED_NAME = 'faas.invoked_name';\nconst TMP_FAAS_INVOKED_PROVIDER = 'faas.invoked_provider';\nconst TMP_FAAS_INVOKED_REGION = 'faas.invoked_region';\nconst TMP_NET_TRANSPORT = 'net.transport';\nconst TMP_NET_PEER_IP = 'net.peer.ip';\nconst TMP_NET_PEER_PORT = 'net.peer.port';\nconst TMP_NET_PEER_NAME = 'net.peer.name';\nconst TMP_NET_HOST_IP = 'net.host.ip';\nconst TMP_NET_HOST_PORT = 'net.host.port';\nconst TMP_NET_HOST_NAME = 'net.host.name';\nconst TMP_NET_HOST_CONNECTION_TYPE = 'net.host.connection.type';\nconst TMP_NET_HOST_CONNECTION_SUBTYPE = 'net.host.connection.subtype';\nconst TMP_NET_HOST_CARRIER_NAME = 'net.host.carrier.name';\nconst TMP_NET_HOST_CARRIER_MCC = 'net.host.carrier.mcc';\nconst TMP_NET_HOST_CARRIER_MNC = 'net.host.carrier.mnc';\nconst TMP_NET_HOST_CARRIER_ICC = 'net.host.carrier.icc';\nconst TMP_PEER_SERVICE = 'peer.service';\nconst TMP_ENDUSER_ID = 'enduser.id';\nconst TMP_ENDUSER_ROLE = 'enduser.role';\nconst TMP_ENDUSER_SCOPE = 'enduser.scope';\nconst TMP_THREAD_ID = 'thread.id';\nconst TMP_THREAD_NAME = 'thread.name';\nconst TMP_CODE_FUNCTION = 'code.function';\nconst TMP_CODE_NAMESPACE = 'code.namespace';\nconst TMP_CODE_FILEPATH = 'code.filepath';\nconst TMP_CODE_LINENO = 'code.lineno';\nconst TMP_HTTP_METHOD = 'http.method';\nconst TMP_HTTP_URL = 'http.url';\nconst TMP_HTTP_TARGET = 'http.target';\nconst TMP_HTTP_HOST = 'http.host';\nconst TMP_HTTP_SCHEME = 'http.scheme';\nconst TMP_HTTP_STATUS_CODE = 'http.status_code';\nconst TMP_HTTP_FLAVOR = 'http.flavor';\nconst TMP_HTTP_USER_AGENT = 'http.user_agent';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH = 'http.request_content_length';\nconst TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = 'http.request_content_length_uncompressed';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH = 'http.response_content_length';\nconst TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = 'http.response_content_length_uncompressed';\nconst TMP_HTTP_SERVER_NAME = 'http.server_name';\nconst TMP_HTTP_ROUTE = 'http.route';\nconst TMP_HTTP_CLIENT_IP = 'http.client_ip';\nconst TMP_AWS_DYNAMODB_TABLE_NAMES = 'aws.dynamodb.table_names';\nconst TMP_AWS_DYNAMODB_CONSUMED_CAPACITY = 'aws.dynamodb.consumed_capacity';\nconst TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = 'aws.dynamodb.item_collection_metrics';\nconst TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = 'aws.dynamodb.provisioned_read_capacity';\nconst TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = 'aws.dynamodb.provisioned_write_capacity';\nconst TMP_AWS_DYNAMODB_CONSISTENT_READ = 'aws.dynamodb.consistent_read';\nconst TMP_AWS_DYNAMODB_PROJECTION = 'aws.dynamodb.projection';\nconst TMP_AWS_DYNAMODB_LIMIT = 'aws.dynamodb.limit';\nconst TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET = 'aws.dynamodb.attributes_to_get';\nconst TMP_AWS_DYNAMODB_INDEX_NAME = 'aws.dynamodb.index_name';\nconst TMP_AWS_DYNAMODB_SELECT = 'aws.dynamodb.select';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = 'aws.dynamodb.global_secondary_indexes';\nconst TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = 'aws.dynamodb.local_secondary_indexes';\nconst TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = 'aws.dynamodb.exclusive_start_table';\nconst TMP_AWS_DYNAMODB_TABLE_COUNT = 'aws.dynamodb.table_count';\nconst TMP_AWS_DYNAMODB_SCAN_FORWARD = 'aws.dynamodb.scan_forward';\nconst TMP_AWS_DYNAMODB_SEGMENT = 'aws.dynamodb.segment';\nconst TMP_AWS_DYNAMODB_TOTAL_SEGMENTS = 'aws.dynamodb.total_segments';\nconst TMP_AWS_DYNAMODB_COUNT = 'aws.dynamodb.count';\nconst TMP_AWS_DYNAMODB_SCANNED_COUNT = 'aws.dynamodb.scanned_count';\nconst TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = 'aws.dynamodb.attribute_definitions';\nconst TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = 'aws.dynamodb.global_secondary_index_updates';\nconst TMP_MESSAGING_SYSTEM = 'messaging.system';\nconst TMP_MESSAGING_DESTINATION = 'messaging.destination';\nconst TMP_MESSAGING_DESTINATION_KIND = 'messaging.destination_kind';\nconst TMP_MESSAGING_TEMP_DESTINATION = 'messaging.temp_destination';\nconst TMP_MESSAGING_PROTOCOL = 'messaging.protocol';\nconst TMP_MESSAGING_PROTOCOL_VERSION = 'messaging.protocol_version';\nconst TMP_MESSAGING_URL = 'messaging.url';\nconst TMP_MESSAGING_MESSAGE_ID = 'messaging.message_id';\nconst TMP_MESSAGING_CONVERSATION_ID = 'messaging.conversation_id';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = 'messaging.message_payload_size_bytes';\nconst TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = 'messaging.message_payload_compressed_size_bytes';\nconst TMP_MESSAGING_OPERATION = 'messaging.operation';\nconst TMP_MESSAGING_CONSUMER_ID = 'messaging.consumer_id';\nconst TMP_MESSAGING_RABBITMQ_ROUTING_KEY = 'messaging.rabbitmq.routing_key';\nconst TMP_MESSAGING_KAFKA_MESSAGE_KEY = 'messaging.kafka.message_key';\nconst TMP_MESSAGING_KAFKA_CONSUMER_GROUP = 'messaging.kafka.consumer_group';\nconst TMP_MESSAGING_KAFKA_CLIENT_ID = 'messaging.kafka.client_id';\nconst TMP_MESSAGING_KAFKA_PARTITION = 'messaging.kafka.partition';\nconst TMP_MESSAGING_KAFKA_TOMBSTONE = 'messaging.kafka.tombstone';\nconst TMP_RPC_SYSTEM = 'rpc.system';\nconst TMP_RPC_SERVICE = 'rpc.service';\nconst TMP_RPC_METHOD = 'rpc.method';\nconst TMP_RPC_GRPC_STATUS_CODE = 'rpc.grpc.status_code';\nconst TMP_RPC_JSONRPC_VERSION = 'rpc.jsonrpc.version';\nconst TMP_RPC_JSONRPC_REQUEST_ID = 'rpc.jsonrpc.request_id';\nconst TMP_RPC_JSONRPC_ERROR_CODE = 'rpc.jsonrpc.error_code';\nconst TMP_RPC_JSONRPC_ERROR_MESSAGE = 'rpc.jsonrpc.error_message';\nconst TMP_MESSAGE_TYPE = 'message.type';\nconst TMP_MESSAGE_ID = 'message.id';\nconst TMP_MESSAGE_COMPRESSED_SIZE = 'message.compressed_size';\nconst TMP_MESSAGE_UNCOMPRESSED_SIZE = 'message.uncompressed_size';\n/**\n * The full invoked ARN as provided on the `Context` passed to the function (`Lambda-Runtime-Invoked-Function-Arn` header on the `/runtime/invocation/next` applicable).\n *\n * Note: This may be different from `faas.id` if an alias is involved.\n *\n * @deprecated Use ATTR_AWS_LAMBDA_INVOKED_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_LAMBDA_INVOKED_ARN = TMP_AWS_LAMBDA_INVOKED_ARN;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use ATTR_DB_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SYSTEM = TMP_DB_SYSTEM;\n/**\n * The connection string used to connect to the database. It is recommended to remove embedded credentials.\n *\n * @deprecated Use ATTR_DB_CONNECTION_STRING in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CONNECTION_STRING = TMP_DB_CONNECTION_STRING;\n/**\n * Username for accessing the database.\n *\n * @deprecated Use ATTR_DB_USER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_USER = TMP_DB_USER;\n/**\n * The fully-qualified class name of the [Java Database Connectivity (JDBC)](https://docs.oracle.com/javase/8/docs/technotes/guides/jdbc/) driver used to connect.\n *\n * @deprecated Use ATTR_DB_JDBC_DRIVER_CLASSNAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_JDBC_DRIVER_CLASSNAME = TMP_DB_JDBC_DRIVER_CLASSNAME;\n/**\n * If no [tech-specific attribute](#call-level-attributes-for-specific-technologies) is defined, this attribute is used to report the name of the database being accessed. For commands that switch the database, this should be set to the target database (even if the command fails).\n *\n * Note: In some SQL databases, the database name to be used is called &#34;schema name&#34;.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_NAME = TMP_DB_NAME;\n/**\n * The database statement being executed.\n *\n * Note: The value may be sanitized to exclude sensitive information.\n *\n * @deprecated Use ATTR_DB_STATEMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_STATEMENT = TMP_DB_STATEMENT;\n/**\n * The name of the operation being executed, e.g. the [MongoDB command name](https://docs.mongodb.com/manual/reference/command/#database-operations) such as `findAndModify`, or the SQL keyword.\n *\n * Note: When setting this to an SQL keyword, it is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if the operation name is provided by the library being instrumented. If the SQL statement has an ambiguous operation, or performs more than one operation, this value may be omitted.\n *\n * @deprecated Use ATTR_DB_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_OPERATION = TMP_DB_OPERATION;\n/**\n * The Microsoft SQL Server [instance name](https://docs.microsoft.com/en-us/sql/connect/jdbc/building-the-connection-url?view=sql-server-ver15) connecting to. This name is used to determine the port of a named instance.\n *\n * Note: If setting a `db.mssql.instance_name`, `net.peer.port` is no longer required (but still recommended if non-standard).\n *\n * @deprecated Use ATTR_DB_MSSQL_INSTANCE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MSSQL_INSTANCE_NAME = TMP_DB_MSSQL_INSTANCE_NAME;\n/**\n * The name of the keyspace being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_KEYSPACE = TMP_DB_CASSANDRA_KEYSPACE;\n/**\n * The fetch size used for paging, i.e. how many rows will be returned at once.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_PAGE_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_PAGE_SIZE = TMP_DB_CASSANDRA_PAGE_SIZE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use ATTR_DB_CASSANDRA_CONSISTENCY_LEVEL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_CONSISTENCY_LEVEL = TMP_DB_CASSANDRA_CONSISTENCY_LEVEL;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: This mirrors the db.sql.table attribute but references cassandra rather than sql. It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_TABLE = TMP_DB_CASSANDRA_TABLE;\n/**\n * Whether or not the query is idempotent.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_IDEMPOTENCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_IDEMPOTENCE = TMP_DB_CASSANDRA_IDEMPOTENCE;\n/**\n * The number of times a query was speculatively executed. Not set or `0` if the query was not executed speculatively.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT = TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT;\n/**\n * The ID of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_ID = TMP_DB_CASSANDRA_COORDINATOR_ID;\n/**\n * The data center of the coordinating node for a query.\n *\n * @deprecated Use ATTR_DB_CASSANDRA_COORDINATOR_DC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_CASSANDRA_COORDINATOR_DC = TMP_DB_CASSANDRA_COORDINATOR_DC;\n/**\n * The [HBase namespace](https://hbase.apache.org/book.html#_namespace) being accessed. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_HBASE_NAMESPACE = TMP_DB_HBASE_NAMESPACE;\n/**\n * The index of the database being accessed as used in the [`SELECT` command](https://redis.io/commands/select), provided as an integer. To be used instead of the generic `db.name` attribute.\n *\n * @deprecated Use ATTR_DB_REDIS_DATABASE_INDEX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_REDIS_DATABASE_INDEX = TMP_DB_REDIS_DATABASE_INDEX;\n/**\n * The collection being accessed within the database stated in `db.name`.\n *\n * @deprecated Use ATTR_DB_MONGODB_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_MONGODB_COLLECTION = TMP_DB_MONGODB_COLLECTION;\n/**\n * The name of the primary table that the operation is acting upon, including the schema name (if applicable).\n *\n * Note: It is not recommended to attempt any client-side parsing of `db.statement` just to get this property, but it should be set if it is provided by the library being instrumented. If the operation is acting upon an anonymous table, or more than one table, this value MUST NOT be set.\n *\n * @deprecated Use ATTR_DB_SQL_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_DB_SQL_TABLE = TMP_DB_SQL_TABLE;\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @deprecated Use ATTR_EXCEPTION_TYPE.\n */\nexport const SEMATTRS_EXCEPTION_TYPE = TMP_EXCEPTION_TYPE;\n/**\n * The exception message.\n *\n * @deprecated Use ATTR_EXCEPTION_MESSAGE.\n */\nexport const SEMATTRS_EXCEPTION_MESSAGE = TMP_EXCEPTION_MESSAGE;\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @deprecated Use ATTR_EXCEPTION_STACKTRACE.\n */\nexport const SEMATTRS_EXCEPTION_STACKTRACE = TMP_EXCEPTION_STACKTRACE;\n/**\n* SHOULD be set to true if the exception event is recorded at a point where it is known that the exception is escaping the scope of the span.\n*\n* Note: An exception is considered to have escaped (or left) the scope of a span,\nif that span is ended while the exception is still logically &#34;in flight&#34;.\nThis may be actually &#34;in flight&#34; in some languages (e.g. if the exception\nis passed to a Context manager&#39;s `__exit__` method in Python) but will\nusually be caught at the point of recording the exception in most languages.\n\nIt is usually not possible to determine at the point where an exception is thrown\nwhether it will escape the scope of a span.\nHowever, it is trivial to know that an exception\nwill escape, if one checks for an active exception just before ending the span,\nas done in the [example above](#exception-end-example).\n\nIt follows that an exception may still escape the scope of the span\neven if the `exception.escaped` attribute was not set or set to false,\nsince the event might have been recorded at a time where it was not\nclear whether the exception will escape.\n*\n* @deprecated Use ATTR_EXCEPTION_ESCAPED.\n*/\nexport const SEMATTRS_EXCEPTION_ESCAPED = TMP_EXCEPTION_ESCAPED;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use ATTR_FAAS_TRIGGER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TRIGGER = TMP_FAAS_TRIGGER;\n/**\n * The execution ID of the current function execution.\n *\n * @deprecated Use ATTR_FAAS_INVOCATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_EXECUTION = TMP_FAAS_EXECUTION;\n/**\n * The name of the source on which the triggering operation was performed. For example, in Cloud Storage or S3 corresponds to the bucket name, and in Cosmos DB to the database name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_COLLECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_COLLECTION = TMP_FAAS_DOCUMENT_COLLECTION;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_OPERATION = TMP_FAAS_DOCUMENT_OPERATION;\n/**\n * A string containing the time when the data was accessed in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_TIME = TMP_FAAS_DOCUMENT_TIME;\n/**\n * The document name/table subjected to the operation. For example, in Cloud Storage or S3 is the name of the file, and in Cosmos DB the table name.\n *\n * @deprecated Use ATTR_FAAS_DOCUMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_DOCUMENT_NAME = TMP_FAAS_DOCUMENT_NAME;\n/**\n * A string containing the function invocation time in the [ISO 8601](https://www.iso.org/iso-8601-date-and-time-format.html) format expressed in [UTC](https://www.w3.org/TR/NOTE-datetime).\n *\n * @deprecated Use ATTR_FAAS_TIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_TIME = TMP_FAAS_TIME;\n/**\n * A string containing the schedule period as [Cron Expression](https://docs.oracle.com/cd/E12058_01/doc/doc.1014/e12030/cron_expressions.htm).\n *\n * @deprecated Use ATTR_FAAS_CRON in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_CRON = TMP_FAAS_CRON;\n/**\n * A boolean that is true if the serverless function is executed for the first time (aka cold-start).\n *\n * @deprecated Use ATTR_FAAS_COLDSTART in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_COLDSTART = TMP_FAAS_COLDSTART;\n/**\n * The name of the invoked function.\n *\n * Note: SHOULD be equal to the `faas.name` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_NAME = TMP_FAAS_INVOKED_NAME;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_PROVIDER = TMP_FAAS_INVOKED_PROVIDER;\n/**\n * The cloud region of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.region` resource attribute of the invoked function.\n *\n * @deprecated Use ATTR_FAAS_INVOKED_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_FAAS_INVOKED_REGION = TMP_FAAS_INVOKED_REGION;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use ATTR_NET_TRANSPORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_TRANSPORT = TMP_NET_TRANSPORT;\n/**\n * Remote address of the peer (dotted decimal for IPv4 or [RFC5952](https://tools.ietf.org/html/rfc5952) for IPv6).\n *\n * @deprecated Use ATTR_NET_PEER_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_IP = TMP_NET_PEER_IP;\n/**\n * Remote port number.\n *\n * @deprecated Use ATTR_NET_PEER_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_PORT = TMP_NET_PEER_PORT;\n/**\n * Remote hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_PEER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_PEER_NAME = TMP_NET_PEER_NAME;\n/**\n * Like `net.peer.ip` but for the host IP. Useful in case of a multi-IP host.\n *\n * @deprecated Use ATTR_NET_HOST_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_IP = TMP_NET_HOST_IP;\n/**\n * Like `net.peer.port` but for the host port.\n *\n * @deprecated Use ATTR_NET_HOST_PORT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_PORT = TMP_NET_HOST_PORT;\n/**\n * Local hostname or similar, see note below.\n *\n * @deprecated Use ATTR_NET_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_NAME = TMP_NET_HOST_NAME;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_TYPE = TMP_NET_HOST_CONNECTION_TYPE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use ATTR_NETWORK_CONNECTION_SUBTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CONNECTION_SUBTYPE = TMP_NET_HOST_CONNECTION_SUBTYPE;\n/**\n * The name of the mobile carrier.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_NAME = TMP_NET_HOST_CARRIER_NAME;\n/**\n * The mobile carrier country code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MCC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MCC = TMP_NET_HOST_CARRIER_MCC;\n/**\n * The mobile carrier network code.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_MNC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_MNC = TMP_NET_HOST_CARRIER_MNC;\n/**\n * The ISO 3166-1 alpha-2 2-character country code associated with the mobile carrier network.\n *\n * @deprecated Use ATTR_NETWORK_CARRIER_ICC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_NET_HOST_CARRIER_ICC = TMP_NET_HOST_CARRIER_ICC;\n/**\n * The [`service.name`](../../resource/semantic_conventions/README.md#service) of the remote service. SHOULD be equal to the actual `service.name` resource attribute of the remote service if any.\n *\n * @deprecated Use ATTR_PEER_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_PEER_SERVICE = TMP_PEER_SERVICE;\n/**\n * Username or client_id extracted from the access token or [Authorization](https://tools.ietf.org/html/rfc7235#section-4.2) header in the inbound request from outside the system.\n *\n * @deprecated Use ATTR_ENDUSER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ID = TMP_ENDUSER_ID;\n/**\n * Actual/assumed role the client is making the request under extracted from token or application security context.\n *\n * @deprecated Use ATTR_ENDUSER_ROLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_ROLE = TMP_ENDUSER_ROLE;\n/**\n * Scopes or granted authorities the client currently possesses extracted from token or application security context. The value would come from the scope associated with an [OAuth 2.0 Access Token](https://tools.ietf.org/html/rfc6749#section-3.3) or an attribute value in a [SAML 2.0 Assertion](http://docs.oasis-open.org/security/saml/Post2.0/sstc-saml-tech-overview-2.0.html).\n *\n * @deprecated Use ATTR_ENDUSER_SCOPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_ENDUSER_SCOPE = TMP_ENDUSER_SCOPE;\n/**\n * Current &#34;managed&#34; thread ID (as opposed to OS thread ID).\n *\n * @deprecated Use ATTR_THREAD_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_ID = TMP_THREAD_ID;\n/**\n * Current thread name.\n *\n * @deprecated Use ATTR_THREAD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_THREAD_NAME = TMP_THREAD_NAME;\n/**\n * The method or function name, or equivalent (usually rightmost part of the code unit&#39;s name).\n *\n * @deprecated Use ATTR_CODE_FUNCTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FUNCTION = TMP_CODE_FUNCTION;\n/**\n * The &#34;namespace&#34; within which `code.function` is defined. Usually the qualified class or module name, such that `code.namespace` + some separator + `code.function` form a unique identifier for the code unit.\n *\n * @deprecated Use ATTR_CODE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_NAMESPACE = TMP_CODE_NAMESPACE;\n/**\n * The source code file name that identifies the code unit as uniquely as possible (preferably an absolute file path).\n *\n * @deprecated Use ATTR_CODE_FILEPATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_FILEPATH = TMP_CODE_FILEPATH;\n/**\n * The line number in `code.filepath` best representing the operation. It SHOULD point within the code unit named in `code.function`.\n *\n * @deprecated Use ATTR_CODE_LINENO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_CODE_LINENO = TMP_CODE_LINENO;\n/**\n * HTTP request method.\n *\n * @deprecated Use ATTR_HTTP_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_METHOD = TMP_HTTP_METHOD;\n/**\n * Full HTTP request URL in the form `scheme://host[:port]/path?query[#fragment]`. Usually the fragment is not transmitted over HTTP, but if it is known, it should be included nevertheless.\n *\n * Note: `http.url` MUST NOT contain credentials passed via URL in form of `https://username:password@www.example.com/`. In such case the attribute&#39;s value should be `https://www.example.com/`.\n *\n * @deprecated Use ATTR_HTTP_URL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_URL = TMP_HTTP_URL;\n/**\n * The full request target as passed in a HTTP request line or equivalent.\n *\n * @deprecated Use ATTR_HTTP_TARGET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_TARGET = TMP_HTTP_TARGET;\n/**\n * The value of the [HTTP host header](https://tools.ietf.org/html/rfc7230#section-5.4). An empty Host header should also be reported, see note.\n *\n * Note: When the header is present but empty the attribute SHOULD be set to the empty string. Note that this is a valid situation that is expected in certain cases, according the aforementioned [section of RFC 7230](https://tools.ietf.org/html/rfc7230#section-5.4). When the header is not set the attribute MUST NOT be set.\n *\n * @deprecated Use ATTR_HTTP_HOST in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_HOST = TMP_HTTP_HOST;\n/**\n * The URI scheme identifying the used protocol.\n *\n * @deprecated Use ATTR_HTTP_SCHEME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SCHEME = TMP_HTTP_SCHEME;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @deprecated Use ATTR_HTTP_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_STATUS_CODE = TMP_HTTP_STATUS_CODE;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use ATTR_HTTP_FLAVOR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_FLAVOR = TMP_HTTP_FLAVOR;\n/**\n * Value of the [HTTP User-Agent](https://tools.ietf.org/html/rfc7231#section-5.5.3) header sent by the client.\n *\n * @deprecated Use ATTR_HTTP_USER_AGENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_USER_AGENT = TMP_HTTP_USER_AGENT;\n/**\n * The size of the request payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH = TMP_HTTP_REQUEST_CONTENT_LENGTH;\n/**\n * The size of the uncompressed request payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The size of the response payload body in bytes. This is the number of bytes transferred excluding headers and is often, but not always, present as the [Content-Length](https://tools.ietf.org/html/rfc7230#section-3.3.2) header. For requests using transport encoding, this should be the compressed size.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH = TMP_HTTP_RESPONSE_CONTENT_LENGTH;\n/**\n * The size of the uncompressed response payload body after transport decoding. Not set if transport encoding not used.\n *\n * @deprecated Use ATTR_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED = TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED;\n/**\n * The primary server name of the matched virtual host. This should be obtained via configuration. If no such configuration can be obtained, this attribute MUST NOT be set ( `net.host.name` should be used instead).\n *\n * Note: `http.url` is usually not readily available on the server side but would have to be assembled in a cumbersome and sometimes lossy process from other information (see e.g. open-telemetry/opentelemetry-python/pull/148). It is thus preferred to supply the raw data that is available.\n *\n * @deprecated Use ATTR_HTTP_SERVER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_HTTP_SERVER_NAME = TMP_HTTP_SERVER_NAME;\n/**\n * The matched route (path template).\n *\n * @deprecated Use ATTR_HTTP_ROUTE.\n */\nexport const SEMATTRS_HTTP_ROUTE = TMP_HTTP_ROUTE;\n/**\n* The IP address of the original client behind all proxies, if known (e.g. from [X-Forwarded-For](https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/X-Forwarded-For)).\n*\n* Note: This is not necessarily the same as `net.peer.ip`, which would\nidentify the network-level peer, which may be a proxy.\n\nThis attribute should be set when a source of information different\nfrom the one used for `net.peer.ip`, is available even if that other\nsource just confirms the same value as `net.peer.ip`.\nRationale: For `net.peer.ip`, one typically does not know if it\ncomes from a proxy, reverse proxy, or the actual client. Setting\n`http.client_ip` when it&#39;s the same as `net.peer.ip` means that\none is at least somewhat confident that the address is not that of\nthe closest proxy.\n*\n* @deprecated Use ATTR_HTTP_CLIENT_IP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMATTRS_HTTP_CLIENT_IP = TMP_HTTP_CLIENT_IP;\n/**\n * The keys in the `RequestItems` object field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_NAMES = TMP_AWS_DYNAMODB_TABLE_NAMES;\n/**\n * The JSON-serialized value of each item in the `ConsumedCapacity` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSUMED_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSUMED_CAPACITY = TMP_AWS_DYNAMODB_CONSUMED_CAPACITY;\n/**\n * The JSON-serialized value of the `ItemCollectionMetrics` response field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ITEM_COLLECTION_METRICS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ITEM_COLLECTION_METRICS = TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS;\n/**\n * The value of the `ProvisionedThroughput.ReadCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY;\n/**\n * The value of the `ProvisionedThroughput.WriteCapacityUnits` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY = TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY;\n/**\n * The value of the `ConsistentRead` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_CONSISTENT_READ in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_CONSISTENT_READ = TMP_AWS_DYNAMODB_CONSISTENT_READ;\n/**\n * The value of the `ProjectionExpression` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_PROJECTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_PROJECTION = TMP_AWS_DYNAMODB_PROJECTION;\n/**\n * The value of the `Limit` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LIMIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LIMIT = TMP_AWS_DYNAMODB_LIMIT;\n/**\n * The value of the `AttributesToGet` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTES_TO_GET in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTES_TO_GET = TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET;\n/**\n * The value of the `IndexName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_INDEX_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_INDEX_NAME = TMP_AWS_DYNAMODB_INDEX_NAME;\n/**\n * The value of the `Select` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SELECT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SELECT = TMP_AWS_DYNAMODB_SELECT;\n/**\n * The JSON-serialized value of each item of the `GlobalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES;\n/**\n * The JSON-serialized value of each item of the `LocalSecondaryIndexes` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES = TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES;\n/**\n * The value of the `ExclusiveStartTableName` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_EXCLUSIVE_START_TABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_EXCLUSIVE_START_TABLE = TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE;\n/**\n * The the number of items in the `TableNames` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TABLE_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TABLE_COUNT = TMP_AWS_DYNAMODB_TABLE_COUNT;\n/**\n * The value of the `ScanIndexForward` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCAN_FORWARD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCAN_FORWARD = TMP_AWS_DYNAMODB_SCAN_FORWARD;\n/**\n * The value of the `Segment` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SEGMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SEGMENT = TMP_AWS_DYNAMODB_SEGMENT;\n/**\n * The value of the `TotalSegments` request parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_TOTAL_SEGMENTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_TOTAL_SEGMENTS = TMP_AWS_DYNAMODB_TOTAL_SEGMENTS;\n/**\n * The value of the `Count` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_COUNT = TMP_AWS_DYNAMODB_COUNT;\n/**\n * The value of the `ScannedCount` response parameter.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_SCANNED_COUNT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_SCANNED_COUNT = TMP_AWS_DYNAMODB_SCANNED_COUNT;\n/**\n * The JSON-serialized value of each item in the `AttributeDefinitions` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS = TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS;\n/**\n * The JSON-serialized value of each item in the the `GlobalSecondaryIndexUpdates` request field.\n *\n * @deprecated Use ATTR_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES = TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES;\n/**\n * A string identifying the messaging system.\n *\n * @deprecated Use ATTR_MESSAGING_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_SYSTEM = TMP_MESSAGING_SYSTEM;\n/**\n * The message destination name. This might be equal to the span name but is required nevertheless.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_DESTINATION = TMP_MESSAGING_DESTINATION;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const SEMATTRS_MESSAGING_DESTINATION_KIND = TMP_MESSAGING_DESTINATION_KIND;\n/**\n * A boolean that is true if the message destination is temporary.\n *\n * @deprecated Use ATTR_MESSAGING_DESTINATION_TEMPORARY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_TEMP_DESTINATION = TMP_MESSAGING_TEMP_DESTINATION;\n/**\n * The name of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_NAME.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL = TMP_MESSAGING_PROTOCOL;\n/**\n * The version of the transport protocol.\n *\n * @deprecated Use ATTR_NETWORK_PROTOCOL_VERSION.\n */\nexport const SEMATTRS_MESSAGING_PROTOCOL_VERSION = TMP_MESSAGING_PROTOCOL_VERSION;\n/**\n * Connection string.\n *\n * @deprecated Removed in semconv v1.17.0.\n */\nexport const SEMATTRS_MESSAGING_URL = TMP_MESSAGING_URL;\n/**\n * A value used by the messaging system as an identifier for the message, represented as a string.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_ID = TMP_MESSAGING_MESSAGE_ID;\n/**\n * The [conversation ID](#conversations) identifying the conversation to which the message belongs, represented as a string. Sometimes called &#34;Correlation ID&#34;.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_CONVERSATION_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_CONVERSATION_ID = TMP_MESSAGING_CONVERSATION_ID;\n/**\n * The (uncompressed) size of the message payload in bytes. Also use this attribute if it is unknown whether the compressed or uncompressed payload size is reported.\n *\n * @deprecated Use ATTR_MESSAGING_MESSAGE_BODY_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES;\n/**\n * The compressed size of the message payload in bytes.\n *\n * @deprecated Removed in semconv v1.22.0.\n */\nexport const SEMATTRS_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES = TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use ATTR_MESSAGING_OPERATION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_OPERATION = TMP_MESSAGING_OPERATION;\n/**\n * The identifier for the consumer receiving a message. For Kafka, set it to `{messaging.kafka.consumer_group} - {messaging.kafka.client_id}`, if both are present, or only `messaging.kafka.consumer_group`. For brokers, such as RabbitMQ and Artemis, set it to the `client_id` of the client consuming the message.\n *\n * @deprecated Removed in semconv v1.21.0.\n */\nexport const SEMATTRS_MESSAGING_CONSUMER_ID = TMP_MESSAGING_CONSUMER_ID;\n/**\n * RabbitMQ message routing key.\n *\n * @deprecated Use ATTR_MESSAGING_RABBITMQ_DESTINATION_ROUTING_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_RABBITMQ_ROUTING_KEY = TMP_MESSAGING_RABBITMQ_ROUTING_KEY;\n/**\n * Message keys in Kafka are used for grouping alike messages to ensure they&#39;re processed on the same partition. They differ from `messaging.message_id` in that they&#39;re not unique. If the key is `null`, the attribute MUST NOT be set.\n *\n * Note: If the key type is not string, it&#39;s string representation has to be supplied for the attribute. If the key has no unambiguous, canonical string form, don&#39;t include its value.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_KEY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_MESSAGE_KEY = TMP_MESSAGING_KAFKA_MESSAGE_KEY;\n/**\n * Name of the Kafka Consumer Group that is handling the message. Only applies to consumers, not producers.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_CONSUMER_GROUP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CONSUMER_GROUP = TMP_MESSAGING_KAFKA_CONSUMER_GROUP;\n/**\n * Client Id for the Consumer or Producer that is handling the message.\n *\n * @deprecated Use ATTR_MESSAGING_CLIENT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_CLIENT_ID = TMP_MESSAGING_KAFKA_CLIENT_ID;\n/**\n * Partition the message is sent to.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_DESTINATION_PARTITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_PARTITION = TMP_MESSAGING_KAFKA_PARTITION;\n/**\n * A boolean that is true if the message is a tombstone.\n *\n * @deprecated Use ATTR_MESSAGING_KAFKA_MESSAGE_TOMBSTONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGING_KAFKA_TOMBSTONE = TMP_MESSAGING_KAFKA_TOMBSTONE;\n/**\n * A string identifying the remoting system.\n *\n * @deprecated Use ATTR_RPC_SYSTEM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SYSTEM = TMP_RPC_SYSTEM;\n/**\n * The full (logical) name of the service being called, including its package name, if applicable.\n *\n * Note: This is the logical name of the service from the RPC interface perspective, which can be different from the name of any implementing class. The `code.namespace` attribute may be used to store the latter (despite the attribute name, it may include a class name; e.g., class with method actually executing the call on the server side, RPC client stub class on the client side).\n *\n * @deprecated Use ATTR_RPC_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_SERVICE = TMP_RPC_SERVICE;\n/**\n * The name of the (logical) method being called, must be equal to the $method part in the span name.\n *\n * Note: This is the logical name of the method from the RPC interface perspective, which can be different from the name of any implementing method/function. The `code.function` attribute may be used to store the latter (e.g., method actually executing the call on the server side, RPC client stub method on the client side).\n *\n * @deprecated Use ATTR_RPC_METHOD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_METHOD = TMP_RPC_METHOD;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use ATTR_RPC_GRPC_STATUS_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_GRPC_STATUS_CODE = TMP_RPC_GRPC_STATUS_CODE;\n/**\n * Protocol version as in `jsonrpc` property of request/response. Since JSON-RPC 1.0 does not specify this, the value can be omitted.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_VERSION = TMP_RPC_JSONRPC_VERSION;\n/**\n * `id` property of request or response. Since protocol allows id to be int, string, `null` or missing (for notifications), value is expected to be cast to string for simplicity. Use empty string in case of `null` value. Omit entirely if this is a notification.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_REQUEST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_REQUEST_ID = TMP_RPC_JSONRPC_REQUEST_ID;\n/**\n * `error.code` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_CODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_CODE = TMP_RPC_JSONRPC_ERROR_CODE;\n/**\n * `error.message` property of response if it is an error response.\n *\n * @deprecated Use ATTR_RPC_JSONRPC_ERROR_MESSAGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_RPC_JSONRPC_ERROR_MESSAGE = TMP_RPC_JSONRPC_ERROR_MESSAGE;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use ATTR_MESSAGE_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_TYPE = TMP_MESSAGE_TYPE;\n/**\n * MUST be calculated as two different counters starting from `1` one for sent messages and one for received message.\n *\n * Note: This way we guarantee that the values will be consistent between different implementations.\n *\n * @deprecated Use ATTR_MESSAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_ID = TMP_MESSAGE_ID;\n/**\n * Compressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_COMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_COMPRESSED_SIZE = TMP_MESSAGE_COMPRESSED_SIZE;\n/**\n * Uncompressed size of the message in bytes.\n *\n * @deprecated Use ATTR_MESSAGE_UNCOMPRESSED_SIZE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMATTRS_MESSAGE_UNCOMPRESSED_SIZE = TMP_MESSAGE_UNCOMPRESSED_SIZE;\n/**\n * Create exported Value Map for SemanticAttributes values\n * @deprecated Use the SEMATTRS_XXXXX constants rather than the SemanticAttributes.XXXXX for bundle minification\n */\nexport const SemanticAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_AWS_LAMBDA_INVOKED_ARN,\n    TMP_DB_SYSTEM,\n    TMP_DB_CONNECTION_STRING,\n    TMP_DB_USER,\n    TMP_DB_JDBC_DRIVER_CLASSNAME,\n    TMP_DB_NAME,\n    TMP_DB_STATEMENT,\n    TMP_DB_OPERATION,\n    TMP_DB_MSSQL_INSTANCE_NAME,\n    TMP_DB_CASSANDRA_KEYSPACE,\n    TMP_DB_CASSANDRA_PAGE_SIZE,\n    TMP_DB_CASSANDRA_CONSISTENCY_LEVEL,\n    TMP_DB_CASSANDRA_TABLE,\n    TMP_DB_CASSANDRA_IDEMPOTENCE,\n    TMP_DB_CASSANDRA_SPECULATIVE_EXECUTION_COUNT,\n    TMP_DB_CASSANDRA_COORDINATOR_ID,\n    TMP_DB_CASSANDRA_COORDINATOR_DC,\n    TMP_DB_HBASE_NAMESPACE,\n    TMP_DB_REDIS_DATABASE_INDEX,\n    TMP_DB_MONGODB_COLLECTION,\n    TMP_DB_SQL_TABLE,\n    TMP_EXCEPTION_TYPE,\n    TMP_EXCEPTION_MESSAGE,\n    TMP_EXCEPTION_STACKTRACE,\n    TMP_EXCEPTION_ESCAPED,\n    TMP_FAAS_TRIGGER,\n    TMP_FAAS_EXECUTION,\n    TMP_FAAS_DOCUMENT_COLLECTION,\n    TMP_FAAS_DOCUMENT_OPERATION,\n    TMP_FAAS_DOCUMENT_TIME,\n    TMP_FAAS_DOCUMENT_NAME,\n    TMP_FAAS_TIME,\n    TMP_FAAS_CRON,\n    TMP_FAAS_COLDSTART,\n    TMP_FAAS_INVOKED_NAME,\n    TMP_FAAS_INVOKED_PROVIDER,\n    TMP_FAAS_INVOKED_REGION,\n    TMP_NET_TRANSPORT,\n    TMP_NET_PEER_IP,\n    TMP_NET_PEER_PORT,\n    TMP_NET_PEER_NAME,\n    TMP_NET_HOST_IP,\n    TMP_NET_HOST_PORT,\n    TMP_NET_HOST_NAME,\n    TMP_NET_HOST_CONNECTION_TYPE,\n    TMP_NET_HOST_CONNECTION_SUBTYPE,\n    TMP_NET_HOST_CARRIER_NAME,\n    TMP_NET_HOST_CARRIER_MCC,\n    TMP_NET_HOST_CARRIER_MNC,\n    TMP_NET_HOST_CARRIER_ICC,\n    TMP_PEER_SERVICE,\n    TMP_ENDUSER_ID,\n    TMP_ENDUSER_ROLE,\n    TMP_ENDUSER_SCOPE,\n    TMP_THREAD_ID,\n    TMP_THREAD_NAME,\n    TMP_CODE_FUNCTION,\n    TMP_CODE_NAMESPACE,\n    TMP_CODE_FILEPATH,\n    TMP_CODE_LINENO,\n    TMP_HTTP_METHOD,\n    TMP_HTTP_URL,\n    TMP_HTTP_TARGET,\n    TMP_HTTP_HOST,\n    TMP_HTTP_SCHEME,\n    TMP_HTTP_STATUS_CODE,\n    TMP_HTTP_FLAVOR,\n    TMP_HTTP_USER_AGENT,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH,\n    TMP_HTTP_REQUEST_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH,\n    TMP_HTTP_RESPONSE_CONTENT_LENGTH_UNCOMPRESSED,\n    TMP_HTTP_SERVER_NAME,\n    TMP_HTTP_ROUTE,\n    TMP_HTTP_CLIENT_IP,\n    TMP_AWS_DYNAMODB_TABLE_NAMES,\n    TMP_AWS_DYNAMODB_CONSUMED_CAPACITY,\n    TMP_AWS_DYNAMODB_ITEM_COLLECTION_METRICS,\n    TMP_AWS_DYNAMODB_PROVISIONED_READ_CAPACITY,\n    TMP_AWS_DYNAMODB_PROVISIONED_WRITE_CAPACITY,\n    TMP_AWS_DYNAMODB_CONSISTENT_READ,\n    TMP_AWS_DYNAMODB_PROJECTION,\n    TMP_AWS_DYNAMODB_LIMIT,\n    TMP_AWS_DYNAMODB_ATTRIBUTES_TO_GET,\n    TMP_AWS_DYNAMODB_INDEX_NAME,\n    TMP_AWS_DYNAMODB_SELECT,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_LOCAL_SECONDARY_INDEXES,\n    TMP_AWS_DYNAMODB_EXCLUSIVE_START_TABLE,\n    TMP_AWS_DYNAMODB_TABLE_COUNT,\n    TMP_AWS_DYNAMODB_SCAN_FORWARD,\n    TMP_AWS_DYNAMODB_SEGMENT,\n    TMP_AWS_DYNAMODB_TOTAL_SEGMENTS,\n    TMP_AWS_DYNAMODB_COUNT,\n    TMP_AWS_DYNAMODB_SCANNED_COUNT,\n    TMP_AWS_DYNAMODB_ATTRIBUTE_DEFINITIONS,\n    TMP_AWS_DYNAMODB_GLOBAL_SECONDARY_INDEX_UPDATES,\n    TMP_MESSAGING_SYSTEM,\n    TMP_MESSAGING_DESTINATION,\n    TMP_MESSAGING_DESTINATION_KIND,\n    TMP_MESSAGING_TEMP_DESTINATION,\n    TMP_MESSAGING_PROTOCOL,\n    TMP_MESSAGING_PROTOCOL_VERSION,\n    TMP_MESSAGING_URL,\n    TMP_MESSAGING_MESSAGE_ID,\n    TMP_MESSAGING_CONVERSATION_ID,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_SIZE_BYTES,\n    TMP_MESSAGING_MESSAGE_PAYLOAD_COMPRESSED_SIZE_BYTES,\n    TMP_MESSAGING_OPERATION,\n    TMP_MESSAGING_CONSUMER_ID,\n    TMP_MESSAGING_RABBITMQ_ROUTING_KEY,\n    TMP_MESSAGING_KAFKA_MESSAGE_KEY,\n    TMP_MESSAGING_KAFKA_CONSUMER_GROUP,\n    TMP_MESSAGING_KAFKA_CLIENT_ID,\n    TMP_MESSAGING_KAFKA_PARTITION,\n    TMP_MESSAGING_KAFKA_TOMBSTONE,\n    TMP_RPC_SYSTEM,\n    TMP_RPC_SERVICE,\n    TMP_RPC_METHOD,\n    TMP_RPC_GRPC_STATUS_CODE,\n    TMP_RPC_JSONRPC_VERSION,\n    TMP_RPC_JSONRPC_REQUEST_ID,\n    TMP_RPC_JSONRPC_ERROR_CODE,\n    TMP_RPC_JSONRPC_ERROR_MESSAGE,\n    TMP_MESSAGE_TYPE,\n    TMP_MESSAGE_ID,\n    TMP_MESSAGE_COMPRESSED_SIZE,\n    TMP_MESSAGE_UNCOMPRESSED_SIZE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbSystemValues enum definition\n *\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBSYSTEMVALUES_OTHER_SQL = 'other_sql';\nconst TMP_DBSYSTEMVALUES_MSSQL = 'mssql';\nconst TMP_DBSYSTEMVALUES_MYSQL = 'mysql';\nconst TMP_DBSYSTEMVALUES_ORACLE = 'oracle';\nconst TMP_DBSYSTEMVALUES_DB2 = 'db2';\nconst TMP_DBSYSTEMVALUES_POSTGRESQL = 'postgresql';\nconst TMP_DBSYSTEMVALUES_REDSHIFT = 'redshift';\nconst TMP_DBSYSTEMVALUES_HIVE = 'hive';\nconst TMP_DBSYSTEMVALUES_CLOUDSCAPE = 'cloudscape';\nconst TMP_DBSYSTEMVALUES_HSQLDB = 'hsqldb';\nconst TMP_DBSYSTEMVALUES_PROGRESS = 'progress';\nconst TMP_DBSYSTEMVALUES_MAXDB = 'maxdb';\nconst TMP_DBSYSTEMVALUES_HANADB = 'hanadb';\nconst TMP_DBSYSTEMVALUES_INGRES = 'ingres';\nconst TMP_DBSYSTEMVALUES_FIRSTSQL = 'firstsql';\nconst TMP_DBSYSTEMVALUES_EDB = 'edb';\nconst TMP_DBSYSTEMVALUES_CACHE = 'cache';\nconst TMP_DBSYSTEMVALUES_ADABAS = 'adabas';\nconst TMP_DBSYSTEMVALUES_FIREBIRD = 'firebird';\nconst TMP_DBSYSTEMVALUES_DERBY = 'derby';\nconst TMP_DBSYSTEMVALUES_FILEMAKER = 'filemaker';\nconst TMP_DBSYSTEMVALUES_INFORMIX = 'informix';\nconst TMP_DBSYSTEMVALUES_INSTANTDB = 'instantdb';\nconst TMP_DBSYSTEMVALUES_INTERBASE = 'interbase';\nconst TMP_DBSYSTEMVALUES_MARIADB = 'mariadb';\nconst TMP_DBSYSTEMVALUES_NETEZZA = 'netezza';\nconst TMP_DBSYSTEMVALUES_PERVASIVE = 'pervasive';\nconst TMP_DBSYSTEMVALUES_POINTBASE = 'pointbase';\nconst TMP_DBSYSTEMVALUES_SQLITE = 'sqlite';\nconst TMP_DBSYSTEMVALUES_SYBASE = 'sybase';\nconst TMP_DBSYSTEMVALUES_TERADATA = 'teradata';\nconst TMP_DBSYSTEMVALUES_VERTICA = 'vertica';\nconst TMP_DBSYSTEMVALUES_H2 = 'h2';\nconst TMP_DBSYSTEMVALUES_COLDFUSION = 'coldfusion';\nconst TMP_DBSYSTEMVALUES_CASSANDRA = 'cassandra';\nconst TMP_DBSYSTEMVALUES_HBASE = 'hbase';\nconst TMP_DBSYSTEMVALUES_MONGODB = 'mongodb';\nconst TMP_DBSYSTEMVALUES_REDIS = 'redis';\nconst TMP_DBSYSTEMVALUES_COUCHBASE = 'couchbase';\nconst TMP_DBSYSTEMVALUES_COUCHDB = 'couchdb';\nconst TMP_DBSYSTEMVALUES_COSMOSDB = 'cosmosdb';\nconst TMP_DBSYSTEMVALUES_DYNAMODB = 'dynamodb';\nconst TMP_DBSYSTEMVALUES_NEO4J = 'neo4j';\nconst TMP_DBSYSTEMVALUES_GEODE = 'geode';\nconst TMP_DBSYSTEMVALUES_ELASTICSEARCH = 'elasticsearch';\nconst TMP_DBSYSTEMVALUES_MEMCACHED = 'memcached';\nconst TMP_DBSYSTEMVALUES_COCKROACHDB = 'cockroachdb';\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_OTHER_SQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_OTHER_SQL = TMP_DBSYSTEMVALUES_OTHER_SQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MSSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MSSQL = TMP_DBSYSTEMVALUES_MSSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MYSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MYSQL = TMP_DBSYSTEMVALUES_MYSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ORACLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ORACLE = TMP_DBSYSTEMVALUES_ORACLE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DB2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DB2 = TMP_DBSYSTEMVALUES_DB2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POSTGRESQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POSTGRESQL = TMP_DBSYSTEMVALUES_POSTGRESQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDSHIFT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDSHIFT = TMP_DBSYSTEMVALUES_REDSHIFT;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HIVE = TMP_DBSYSTEMVALUES_HIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CLOUDSCAPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CLOUDSCAPE = TMP_DBSYSTEMVALUES_CLOUDSCAPE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HSQLDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HSQLDB = TMP_DBSYSTEMVALUES_HSQLDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PROGRESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PROGRESS = TMP_DBSYSTEMVALUES_PROGRESS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MAXDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MAXDB = TMP_DBSYSTEMVALUES_MAXDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HANADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HANADB = TMP_DBSYSTEMVALUES_HANADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INGRES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INGRES = TMP_DBSYSTEMVALUES_INGRES;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIRSTSQL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIRSTSQL = TMP_DBSYSTEMVALUES_FIRSTSQL;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_EDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_EDB = TMP_DBSYSTEMVALUES_EDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CACHE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CACHE = TMP_DBSYSTEMVALUES_CACHE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ADABAS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ADABAS = TMP_DBSYSTEMVALUES_ADABAS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FIREBIRD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FIREBIRD = TMP_DBSYSTEMVALUES_FIREBIRD;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DERBY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DERBY = TMP_DBSYSTEMVALUES_DERBY;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_FILEMAKER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_FILEMAKER = TMP_DBSYSTEMVALUES_FILEMAKER;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INFORMIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INFORMIX = TMP_DBSYSTEMVALUES_INFORMIX;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INSTANTDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INSTANTDB = TMP_DBSYSTEMVALUES_INSTANTDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_INTERBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_INTERBASE = TMP_DBSYSTEMVALUES_INTERBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MARIADB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MARIADB = TMP_DBSYSTEMVALUES_MARIADB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NETEZZA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NETEZZA = TMP_DBSYSTEMVALUES_NETEZZA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_PERVASIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_PERVASIVE = TMP_DBSYSTEMVALUES_PERVASIVE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_POINTBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_POINTBASE = TMP_DBSYSTEMVALUES_POINTBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SQLITE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SQLITE = TMP_DBSYSTEMVALUES_SQLITE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_SYBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_SYBASE = TMP_DBSYSTEMVALUES_SYBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_TERADATA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_TERADATA = TMP_DBSYSTEMVALUES_TERADATA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_VERTICA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_VERTICA = TMP_DBSYSTEMVALUES_VERTICA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_H2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_H2 = TMP_DBSYSTEMVALUES_H2;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COLDFUSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COLDFUSION = TMP_DBSYSTEMVALUES_COLDFUSION;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_CASSANDRA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_CASSANDRA = TMP_DBSYSTEMVALUES_CASSANDRA;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_HBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_HBASE = TMP_DBSYSTEMVALUES_HBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MONGODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MONGODB = TMP_DBSYSTEMVALUES_MONGODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_REDIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_REDIS = TMP_DBSYSTEMVALUES_REDIS;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHBASE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHBASE = TMP_DBSYSTEMVALUES_COUCHBASE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COUCHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COUCHDB = TMP_DBSYSTEMVALUES_COUCHDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COSMOSDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COSMOSDB = TMP_DBSYSTEMVALUES_COSMOSDB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_DYNAMODB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_DYNAMODB = TMP_DBSYSTEMVALUES_DYNAMODB;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_NEO4J in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_NEO4J = TMP_DBSYSTEMVALUES_NEO4J;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_GEODE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_GEODE = TMP_DBSYSTEMVALUES_GEODE;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_ELASTICSEARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_ELASTICSEARCH = TMP_DBSYSTEMVALUES_ELASTICSEARCH;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_MEMCACHED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_MEMCACHED = TMP_DBSYSTEMVALUES_MEMCACHED;\n/**\n * An identifier for the database management system (DBMS) product being used. See below for a list of well-known identifiers.\n *\n * @deprecated Use DB_SYSTEM_VALUE_COCKROACHDB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBSYSTEMVALUES_COCKROACHDB = TMP_DBSYSTEMVALUES_COCKROACHDB;\n/**\n * The constant map of values for DbSystemValues.\n * @deprecated Use the DBSYSTEMVALUES_XXXXX constants rather than the DbSystemValues.XXXXX for bundle minification.\n */\nexport const DbSystemValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBSYSTEMVALUES_OTHER_SQL,\n    TMP_DBSYSTEMVALUES_MSSQL,\n    TMP_DBSYSTEMVALUES_MYSQL,\n    TMP_DBSYSTEMVALUES_ORACLE,\n    TMP_DBSYSTEMVALUES_DB2,\n    TMP_DBSYSTEMVALUES_POSTGRESQL,\n    TMP_DBSYSTEMVALUES_REDSHIFT,\n    TMP_DBSYSTEMVALUES_HIVE,\n    TMP_DBSYSTEMVALUES_CLOUDSCAPE,\n    TMP_DBSYSTEMVALUES_HSQLDB,\n    TMP_DBSYSTEMVALUES_PROGRESS,\n    TMP_DBSYSTEMVALUES_MAXDB,\n    TMP_DBSYSTEMVALUES_HANADB,\n    TMP_DBSYSTEMVALUES_INGRES,\n    TMP_DBSYSTEMVALUES_FIRSTSQL,\n    TMP_DBSYSTEMVALUES_EDB,\n    TMP_DBSYSTEMVALUES_CACHE,\n    TMP_DBSYSTEMVALUES_ADABAS,\n    TMP_DBSYSTEMVALUES_FIREBIRD,\n    TMP_DBSYSTEMVALUES_DERBY,\n    TMP_DBSYSTEMVALUES_FILEMAKER,\n    TMP_DBSYSTEMVALUES_INFORMIX,\n    TMP_DBSYSTEMVALUES_INSTANTDB,\n    TMP_DBSYSTEMVALUES_INTERBASE,\n    TMP_DBSYSTEMVALUES_MARIADB,\n    TMP_DBSYSTEMVALUES_NETEZZA,\n    TMP_DBSYSTEMVALUES_PERVASIVE,\n    TMP_DBSYSTEMVALUES_POINTBASE,\n    TMP_DBSYSTEMVALUES_SQLITE,\n    TMP_DBSYSTEMVALUES_SYBASE,\n    TMP_DBSYSTEMVALUES_TERADATA,\n    TMP_DBSYSTEMVALUES_VERTICA,\n    TMP_DBSYSTEMVALUES_H2,\n    TMP_DBSYSTEMVALUES_COLDFUSION,\n    TMP_DBSYSTEMVALUES_CASSANDRA,\n    TMP_DBSYSTEMVALUES_HBASE,\n    TMP_DBSYSTEMVALUES_MONGODB,\n    TMP_DBSYSTEMVALUES_REDIS,\n    TMP_DBSYSTEMVALUES_COUCHBASE,\n    TMP_DBSYSTEMVALUES_COUCHDB,\n    TMP_DBSYSTEMVALUES_COSMOSDB,\n    TMP_DBSYSTEMVALUES_DYNAMODB,\n    TMP_DBSYSTEMVALUES_NEO4J,\n    TMP_DBSYSTEMVALUES_GEODE,\n    TMP_DBSYSTEMVALUES_ELASTICSEARCH,\n    TMP_DBSYSTEMVALUES_MEMCACHED,\n    TMP_DBSYSTEMVALUES_COCKROACHDB,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for DbCassandraConsistencyLevelValues enum definition\n *\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL = 'all';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = 'each_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = 'quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = 'local_quorum';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE = 'one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO = 'two';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE = 'three';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = 'local_one';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY = 'any';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = 'serial';\nconst TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = 'local_serial';\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ALL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ALL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_EACH_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_QUORUM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_TWO in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_TWO = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_THREE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_THREE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_ONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_ANY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_ANY = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL;\n/**\n * The consistency level of the query. Based on consistency values from [CQL](https://docs.datastax.com/en/cassandra-oss/3.0/cassandra/dml/dmlConfigConsistency.html).\n *\n * @deprecated Use DB_CASSANDRA_CONSISTENCY_LEVEL_VALUE_LOCAL_SERIAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL = TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL;\n/**\n * The constant map of values for DbCassandraConsistencyLevelValues.\n * @deprecated Use the DBCASSANDRACONSISTENCYLEVELVALUES_XXXXX constants rather than the DbCassandraConsistencyLevelValues.XXXXX for bundle minification.\n */\nexport const DbCassandraConsistencyLevelValues = \n/*#__PURE__*/ createConstMap([\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ALL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_EACH_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_QUORUM,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_TWO,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_THREE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_ONE,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_ANY,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_SERIAL,\n    TMP_DBCASSANDRACONSISTENCYLEVELVALUES_LOCAL_SERIAL,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasTriggerValues enum definition\n *\n * Type of the trigger on which the function is executed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASTRIGGERVALUES_DATASOURCE = 'datasource';\nconst TMP_FAASTRIGGERVALUES_HTTP = 'http';\nconst TMP_FAASTRIGGERVALUES_PUBSUB = 'pubsub';\nconst TMP_FAASTRIGGERVALUES_TIMER = 'timer';\nconst TMP_FAASTRIGGERVALUES_OTHER = 'other';\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_DATASOURCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_DATASOURCE = TMP_FAASTRIGGERVALUES_DATASOURCE;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_HTTP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_HTTP = TMP_FAASTRIGGERVALUES_HTTP;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_PUBSUB in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_PUBSUB = TMP_FAASTRIGGERVALUES_PUBSUB;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_TIMER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_TIMER = TMP_FAASTRIGGERVALUES_TIMER;\n/**\n * Type of the trigger on which the function is executed.\n *\n * @deprecated Use FAAS_TRIGGER_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASTRIGGERVALUES_OTHER = TMP_FAASTRIGGERVALUES_OTHER;\n/**\n * The constant map of values for FaasTriggerValues.\n * @deprecated Use the FAASTRIGGERVALUES_XXXXX constants rather than the FaasTriggerValues.XXXXX for bundle minification.\n */\nexport const FaasTriggerValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASTRIGGERVALUES_DATASOURCE,\n    TMP_FAASTRIGGERVALUES_HTTP,\n    TMP_FAASTRIGGERVALUES_PUBSUB,\n    TMP_FAASTRIGGERVALUES_TIMER,\n    TMP_FAASTRIGGERVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasDocumentOperationValues enum definition\n *\n * Describes the type of the operation that was performed on the data.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASDOCUMENTOPERATIONVALUES_INSERT = 'insert';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_EDIT = 'edit';\nconst TMP_FAASDOCUMENTOPERATIONVALUES_DELETE = 'delete';\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_INSERT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_INSERT = TMP_FAASDOCUMENTOPERATIONVALUES_INSERT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_EDIT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_EDIT = TMP_FAASDOCUMENTOPERATIONVALUES_EDIT;\n/**\n * Describes the type of the operation that was performed on the data.\n *\n * @deprecated Use FAAS_DOCUMENT_OPERATION_VALUE_DELETE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASDOCUMENTOPERATIONVALUES_DELETE = TMP_FAASDOCUMENTOPERATIONVALUES_DELETE;\n/**\n * The constant map of values for FaasDocumentOperationValues.\n * @deprecated Use the FAASDOCUMENTOPERATIONVALUES_XXXXX constants rather than the FaasDocumentOperationValues.XXXXX for bundle minification.\n */\nexport const FaasDocumentOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASDOCUMENTOPERATIONVALUES_INSERT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_EDIT,\n    TMP_FAASDOCUMENTOPERATIONVALUES_DELETE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for FaasInvokedProviderValues enum definition\n *\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AWS = 'aws';\nconst TMP_FAASINVOKEDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_FAASINVOKEDPROVIDERVALUES_GCP = 'gcp';\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD = TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AWS = TMP_FAASINVOKEDPROVIDERVALUES_AWS;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_AZURE = TMP_FAASINVOKEDPROVIDERVALUES_AZURE;\n/**\n * The cloud provider of the invoked function.\n *\n * Note: SHOULD be equal to the `cloud.provider` resource attribute of the invoked function.\n *\n * @deprecated Use FAAS_INVOKED_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const FAASINVOKEDPROVIDERVALUES_GCP = TMP_FAASINVOKEDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for FaasInvokedProviderValues.\n * @deprecated Use the FAASINVOKEDPROVIDERVALUES_XXXXX constants rather than the FaasInvokedProviderValues.XXXXX for bundle minification.\n */\nexport const FaasInvokedProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_FAASINVOKEDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_FAASINVOKEDPROVIDERVALUES_AWS,\n    TMP_FAASINVOKEDPROVIDERVALUES_AZURE,\n    TMP_FAASINVOKEDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetTransportValues enum definition\n *\n * Transport protocol used. See note below.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETTRANSPORTVALUES_IP_TCP = 'ip_tcp';\nconst TMP_NETTRANSPORTVALUES_IP_UDP = 'ip_udp';\nconst TMP_NETTRANSPORTVALUES_IP = 'ip';\nconst TMP_NETTRANSPORTVALUES_UNIX = 'unix';\nconst TMP_NETTRANSPORTVALUES_PIPE = 'pipe';\nconst TMP_NETTRANSPORTVALUES_INPROC = 'inproc';\nconst TMP_NETTRANSPORTVALUES_OTHER = 'other';\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_TCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_TCP = TMP_NETTRANSPORTVALUES_IP_TCP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_IP_UDP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_IP_UDP = TMP_NETTRANSPORTVALUES_IP_UDP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_IP = TMP_NETTRANSPORTVALUES_IP;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Removed in v1.21.0.\n */\nexport const NETTRANSPORTVALUES_UNIX = TMP_NETTRANSPORTVALUES_UNIX;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_PIPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_PIPE = TMP_NETTRANSPORTVALUES_PIPE;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_INPROC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_INPROC = TMP_NETTRANSPORTVALUES_INPROC;\n/**\n * Transport protocol used. See note below.\n *\n * @deprecated Use NET_TRANSPORT_VALUE_OTHER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETTRANSPORTVALUES_OTHER = TMP_NETTRANSPORTVALUES_OTHER;\n/**\n * The constant map of values for NetTransportValues.\n * @deprecated Use the NETTRANSPORTVALUES_XXXXX constants rather than the NetTransportValues.XXXXX for bundle minification.\n */\nexport const NetTransportValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETTRANSPORTVALUES_IP_TCP,\n    TMP_NETTRANSPORTVALUES_IP_UDP,\n    TMP_NETTRANSPORTVALUES_IP,\n    TMP_NETTRANSPORTVALUES_UNIX,\n    TMP_NETTRANSPORTVALUES_PIPE,\n    TMP_NETTRANSPORTVALUES_INPROC,\n    TMP_NETTRANSPORTVALUES_OTHER,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionTypeValues enum definition\n *\n * The internet connection type currently being used by the host.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI = 'wifi';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED = 'wired';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_CELL = 'cell';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = 'unavailable';\nconst TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = 'unknown';\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIFI in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIFI = TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_WIRED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_WIRED = TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_CELL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_CELL = TMP_NETHOSTCONNECTIONTYPEVALUES_CELL;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE = TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE;\n/**\n * The internet connection type currently being used by the host.\n *\n * @deprecated Use NETWORK_CONNECTION_TYPE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONTYPEVALUES_UNKNOWN = TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN;\n/**\n * The constant map of values for NetHostConnectionTypeValues.\n * @deprecated Use the NETHOSTCONNECTIONTYPEVALUES_XXXXX constants rather than the NetHostConnectionTypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIFI,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_WIRED,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_CELL,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNAVAILABLE,\n    TMP_NETHOSTCONNECTIONTYPEVALUES_UNKNOWN,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for NetHostConnectionSubtypeValues enum definition\n *\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = 'gprs';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = 'edge';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = 'umts';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = 'cdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = 'evdo_0';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = 'evdo_a';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = 'cdma2000_1xrtt';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = 'hsdpa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = 'hsupa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = 'hspa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = 'iden';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = 'evdo_b';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE = 'lte';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = 'ehrpd';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = 'hspap';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM = 'gsm';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = 'td_scdma';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = 'iwlan';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR = 'nr';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = 'nrnsa';\nconst TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = 'lte_ca';\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GPRS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GPRS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EDGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EDGE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_UMTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_UMTS = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0 = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_A in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_CDMA2000_1XRTT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSDPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSUPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IDEN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IDEN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EVDO_B in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_EHRPD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_HSPAP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_GSM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_GSM = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_TD_SCDMA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_IWLAN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NR in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NR = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_NRNSA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA;\n/**\n * This describes more details regarding the connection.type. It may be the type of cell technology connection, but it could be used for describing details about a wifi connection.\n *\n * @deprecated Use NETWORK_CONNECTION_SUBTYPE_VALUE_LTE_CA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA = TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA;\n/**\n * The constant map of values for NetHostConnectionSubtypeValues.\n * @deprecated Use the NETHOSTCONNECTIONSUBTYPEVALUES_XXXXX constants rather than the NetHostConnectionSubtypeValues.XXXXX for bundle minification.\n */\nexport const NetHostConnectionSubtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GPRS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EDGE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_UMTS,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_0,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_A,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_CDMA2000_1XRTT,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSDPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSUPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IDEN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EVDO_B,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_EHRPD,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_HSPAP,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_GSM,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_TD_SCDMA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_IWLAN,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NR,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_NRNSA,\n    TMP_NETHOSTCONNECTIONSUBTYPEVALUES_LTE_CA,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HttpFlavorValues enum definition\n *\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HTTPFLAVORVALUES_HTTP_1_0 = '1.0';\nconst TMP_HTTPFLAVORVALUES_HTTP_1_1 = '1.1';\nconst TMP_HTTPFLAVORVALUES_HTTP_2_0 = '2.0';\nconst TMP_HTTPFLAVORVALUES_SPDY = 'SPDY';\nconst TMP_HTTPFLAVORVALUES_QUIC = 'QUIC';\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_0 = TMP_HTTPFLAVORVALUES_HTTP_1_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_1_1 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_1_1 = TMP_HTTPFLAVORVALUES_HTTP_1_1;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_HTTP_2_0 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_HTTP_2_0 = TMP_HTTPFLAVORVALUES_HTTP_2_0;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_SPDY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_SPDY = TMP_HTTPFLAVORVALUES_SPDY;\n/**\n * Kind of HTTP protocol used.\n *\n * Note: If `net.transport` is not specified, it can be assumed to be `IP.TCP` except if `http.flavor` is `QUIC`, in which case `IP.UDP` is assumed.\n *\n * @deprecated Use HTTP_FLAVOR_VALUE_QUIC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HTTPFLAVORVALUES_QUIC = TMP_HTTPFLAVORVALUES_QUIC;\n/**\n * The constant map of values for HttpFlavorValues.\n * @deprecated Use the HTTPFLAVORVALUES_XXXXX constants rather than the HttpFlavorValues.XXXXX for bundle minification.\n */\nexport const HttpFlavorValues = {\n    HTTP_1_0: TMP_HTTPFLAVORVALUES_HTTP_1_0,\n    HTTP_1_1: TMP_HTTPFLAVORVALUES_HTTP_1_1,\n    HTTP_2_0: TMP_HTTPFLAVORVALUES_HTTP_2_0,\n    SPDY: TMP_HTTPFLAVORVALUES_SPDY,\n    QUIC: TMP_HTTPFLAVORVALUES_QUIC,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingDestinationKindValues enum definition\n *\n * The kind of message destination.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE = 'queue';\nconst TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC = 'topic';\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_QUEUE = TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE;\n/**\n * The kind of message destination.\n *\n * @deprecated Removed in semconv v1.20.0.\n */\nexport const MESSAGINGDESTINATIONKINDVALUES_TOPIC = TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC;\n/**\n * The constant map of values for MessagingDestinationKindValues.\n * @deprecated Use the MESSAGINGDESTINATIONKINDVALUES_XXXXX constants rather than the MessagingDestinationKindValues.XXXXX for bundle minification.\n */\nexport const MessagingDestinationKindValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGDESTINATIONKINDVALUES_QUEUE,\n    TMP_MESSAGINGDESTINATIONKINDVALUES_TOPIC,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessagingOperationValues enum definition\n *\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGINGOPERATIONVALUES_RECEIVE = 'receive';\nconst TMP_MESSAGINGOPERATIONVALUES_PROCESS = 'process';\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_RECEIVE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_RECEIVE = TMP_MESSAGINGOPERATIONVALUES_RECEIVE;\n/**\n * A string identifying the kind of message consumption as defined in the [Operation names](#operation-names) section above. If the operation is &#34;send&#34;, this attribute MUST NOT be set, since the operation can be inferred from the span kind in that case.\n *\n * @deprecated Use MESSAGING_OPERATION_TYPE_VALUE_PROCESS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGINGOPERATIONVALUES_PROCESS = TMP_MESSAGINGOPERATIONVALUES_PROCESS;\n/**\n * The constant map of values for MessagingOperationValues.\n * @deprecated Use the MESSAGINGOPERATIONVALUES_XXXXX constants rather than the MessagingOperationValues.XXXXX for bundle minification.\n */\nexport const MessagingOperationValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGINGOPERATIONVALUES_RECEIVE,\n    TMP_MESSAGINGOPERATIONVALUES_PROCESS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for RpcGrpcStatusCodeValues enum definition\n *\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_RPCGRPCSTATUSCODEVALUES_OK = 0;\nconst TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED = 1;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN = 2;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = 3;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = 4;\nconst TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND = 5;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = 6;\nconst TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = 7;\nconst TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = 8;\nconst TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = 9;\nconst TMP_RPCGRPCSTATUSCODEVALUES_ABORTED = 10;\nconst TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = 11;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = 12;\nconst TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL = 13;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = 14;\nconst TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS = 15;\nconst TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = 16;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OK = TMP_RPCGRPCSTATUSCODEVALUES_OK;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_CANCELLED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_CANCELLED = TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNKNOWN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNKNOWN = TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INVALID_ARGUMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT = TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DEADLINE_EXCEEDED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED = TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_NOT_FOUND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_NOT_FOUND = TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ALREADY_EXISTS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS = TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_PERMISSION_DENIED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED = TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_RESOURCE_EXHAUSTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED = TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_FAILED_PRECONDITION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION = TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_ABORTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_ABORTED = TMP_RPCGRPCSTATUSCODEVALUES_ABORTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_OUT_OF_RANGE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE = TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNIMPLEMENTED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED = TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_INTERNAL in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_INTERNAL = TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAVAILABLE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAVAILABLE = TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_DATA_LOSS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_DATA_LOSS = TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS;\n/**\n * The [numeric status code](https://github.com/grpc/grpc/blob/v1.33.2/doc/statuscodes.md) of the gRPC request.\n *\n * @deprecated Use RPC_GRPC_STATUS_CODE_VALUE_UNAUTHENTICATED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED = TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED;\n/**\n * The constant map of values for RpcGrpcStatusCodeValues.\n * @deprecated Use the RPCGRPCSTATUSCODEVALUES_XXXXX constants rather than the RpcGrpcStatusCodeValues.XXXXX for bundle minification.\n */\nexport const RpcGrpcStatusCodeValues = {\n    OK: TMP_RPCGRPCSTATUSCODEVALUES_OK,\n    CANCELLED: TMP_RPCGRPCSTATUSCODEVALUES_CANCELLED,\n    UNKNOWN: TMP_RPCGRPCSTATUSCODEVALUES_UNKNOWN,\n    INVALID_ARGUMENT: TMP_RPCGRPCSTATUSCODEVALUES_INVALID_ARGUMENT,\n    DEADLINE_EXCEEDED: TMP_RPCGRPCSTATUSCODEVALUES_DEADLINE_EXCEEDED,\n    NOT_FOUND: TMP_RPCGRPCSTATUSCODEVALUES_NOT_FOUND,\n    ALREADY_EXISTS: TMP_RPCGRPCSTATUSCODEVALUES_ALREADY_EXISTS,\n    PERMISSION_DENIED: TMP_RPCGRPCSTATUSCODEVALUES_PERMISSION_DENIED,\n    RESOURCE_EXHAUSTED: TMP_RPCGRPCSTATUSCODEVALUES_RESOURCE_EXHAUSTED,\n    FAILED_PRECONDITION: TMP_RPCGRPCSTATUSCODEVALUES_FAILED_PRECONDITION,\n    ABORTED: TMP_RPCGRPCSTATUSCODEVALUES_ABORTED,\n    OUT_OF_RANGE: TMP_RPCGRPCSTATUSCODEVALUES_OUT_OF_RANGE,\n    UNIMPLEMENTED: TMP_RPCGRPCSTATUSCODEVALUES_UNIMPLEMENTED,\n    INTERNAL: TMP_RPCGRPCSTATUSCODEVALUES_INTERNAL,\n    UNAVAILABLE: TMP_RPCGRPCSTATUSCODEVALUES_UNAVAILABLE,\n    DATA_LOSS: TMP_RPCGRPCSTATUSCODEVALUES_DATA_LOSS,\n    UNAUTHENTICATED: TMP_RPCGRPCSTATUSCODEVALUES_UNAUTHENTICATED,\n};\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for MessageTypeValues enum definition\n *\n * Whether this is a received or sent message.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_MESSAGETYPEVALUES_SENT = 'SENT';\nconst TMP_MESSAGETYPEVALUES_RECEIVED = 'RECEIVED';\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_SENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_SENT = TMP_MESSAGETYPEVALUES_SENT;\n/**\n * Whether this is a received or sent message.\n *\n * @deprecated Use MESSAGE_TYPE_VALUE_RECEIVED in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const MESSAGETYPEVALUES_RECEIVED = TMP_MESSAGETYPEVALUES_RECEIVED;\n/**\n * The constant map of values for MessageTypeValues.\n * @deprecated Use the MESSAGETYPEVALUES_XXXXX constants rather than the MessageTypeValues.XXXXX for bundle minification.\n */\nexport const MessageTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_MESSAGETYPEVALUES_SENT,\n    TMP_MESSAGETYPEVALUES_RECEIVED,\n]);\n//# sourceMappingURL=SemanticAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { createConstMap } from '../internal/utils';\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates//templates/SemanticAttributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n//----------------------------------------------------------------------------------------------------------\n// Constant values for SemanticResourceAttributes\n//----------------------------------------------------------------------------------------------------------\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUD_PROVIDER = 'cloud.provider';\nconst TMP_CLOUD_ACCOUNT_ID = 'cloud.account.id';\nconst TMP_CLOUD_REGION = 'cloud.region';\nconst TMP_CLOUD_AVAILABILITY_ZONE = 'cloud.availability_zone';\nconst TMP_CLOUD_PLATFORM = 'cloud.platform';\nconst TMP_AWS_ECS_CONTAINER_ARN = 'aws.ecs.container.arn';\nconst TMP_AWS_ECS_CLUSTER_ARN = 'aws.ecs.cluster.arn';\nconst TMP_AWS_ECS_LAUNCHTYPE = 'aws.ecs.launchtype';\nconst TMP_AWS_ECS_TASK_ARN = 'aws.ecs.task.arn';\nconst TMP_AWS_ECS_TASK_FAMILY = 'aws.ecs.task.family';\nconst TMP_AWS_ECS_TASK_REVISION = 'aws.ecs.task.revision';\nconst TMP_AWS_EKS_CLUSTER_ARN = 'aws.eks.cluster.arn';\nconst TMP_AWS_LOG_GROUP_NAMES = 'aws.log.group.names';\nconst TMP_AWS_LOG_GROUP_ARNS = 'aws.log.group.arns';\nconst TMP_AWS_LOG_STREAM_NAMES = 'aws.log.stream.names';\nconst TMP_AWS_LOG_STREAM_ARNS = 'aws.log.stream.arns';\nconst TMP_CONTAINER_NAME = 'container.name';\nconst TMP_CONTAINER_ID = 'container.id';\nconst TMP_CONTAINER_RUNTIME = 'container.runtime';\nconst TMP_CONTAINER_IMAGE_NAME = 'container.image.name';\nconst TMP_CONTAINER_IMAGE_TAG = 'container.image.tag';\nconst TMP_DEPLOYMENT_ENVIRONMENT = 'deployment.environment';\nconst TMP_DEVICE_ID = 'device.id';\nconst TMP_DEVICE_MODEL_IDENTIFIER = 'device.model.identifier';\nconst TMP_DEVICE_MODEL_NAME = 'device.model.name';\nconst TMP_FAAS_NAME = 'faas.name';\nconst TMP_FAAS_ID = 'faas.id';\nconst TMP_FAAS_VERSION = 'faas.version';\nconst TMP_FAAS_INSTANCE = 'faas.instance';\nconst TMP_FAAS_MAX_MEMORY = 'faas.max_memory';\nconst TMP_HOST_ID = 'host.id';\nconst TMP_HOST_NAME = 'host.name';\nconst TMP_HOST_TYPE = 'host.type';\nconst TMP_HOST_ARCH = 'host.arch';\nconst TMP_HOST_IMAGE_NAME = 'host.image.name';\nconst TMP_HOST_IMAGE_ID = 'host.image.id';\nconst TMP_HOST_IMAGE_VERSION = 'host.image.version';\nconst TMP_K8S_CLUSTER_NAME = 'k8s.cluster.name';\nconst TMP_K8S_NODE_NAME = 'k8s.node.name';\nconst TMP_K8S_NODE_UID = 'k8s.node.uid';\nconst TMP_K8S_NAMESPACE_NAME = 'k8s.namespace.name';\nconst TMP_K8S_POD_UID = 'k8s.pod.uid';\nconst TMP_K8S_POD_NAME = 'k8s.pod.name';\nconst TMP_K8S_CONTAINER_NAME = 'k8s.container.name';\nconst TMP_K8S_REPLICASET_UID = 'k8s.replicaset.uid';\nconst TMP_K8S_REPLICASET_NAME = 'k8s.replicaset.name';\nconst TMP_K8S_DEPLOYMENT_UID = 'k8s.deployment.uid';\nconst TMP_K8S_DEPLOYMENT_NAME = 'k8s.deployment.name';\nconst TMP_K8S_STATEFULSET_UID = 'k8s.statefulset.uid';\nconst TMP_K8S_STATEFULSET_NAME = 'k8s.statefulset.name';\nconst TMP_K8S_DAEMONSET_UID = 'k8s.daemonset.uid';\nconst TMP_K8S_DAEMONSET_NAME = 'k8s.daemonset.name';\nconst TMP_K8S_JOB_UID = 'k8s.job.uid';\nconst TMP_K8S_JOB_NAME = 'k8s.job.name';\nconst TMP_K8S_CRONJOB_UID = 'k8s.cronjob.uid';\nconst TMP_K8S_CRONJOB_NAME = 'k8s.cronjob.name';\nconst TMP_OS_TYPE = 'os.type';\nconst TMP_OS_DESCRIPTION = 'os.description';\nconst TMP_OS_NAME = 'os.name';\nconst TMP_OS_VERSION = 'os.version';\nconst TMP_PROCESS_PID = 'process.pid';\nconst TMP_PROCESS_EXECUTABLE_NAME = 'process.executable.name';\nconst TMP_PROCESS_EXECUTABLE_PATH = 'process.executable.path';\nconst TMP_PROCESS_COMMAND = 'process.command';\nconst TMP_PROCESS_COMMAND_LINE = 'process.command_line';\nconst TMP_PROCESS_COMMAND_ARGS = 'process.command_args';\nconst TMP_PROCESS_OWNER = 'process.owner';\nconst TMP_PROCESS_RUNTIME_NAME = 'process.runtime.name';\nconst TMP_PROCESS_RUNTIME_VERSION = 'process.runtime.version';\nconst TMP_PROCESS_RUNTIME_DESCRIPTION = 'process.runtime.description';\nconst TMP_SERVICE_NAME = 'service.name';\nconst TMP_SERVICE_NAMESPACE = 'service.namespace';\nconst TMP_SERVICE_INSTANCE_ID = 'service.instance.id';\nconst TMP_SERVICE_VERSION = 'service.version';\nconst TMP_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\nconst TMP_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\nconst TMP_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\nconst TMP_TELEMETRY_AUTO_VERSION = 'telemetry.auto.version';\nconst TMP_WEBENGINE_NAME = 'webengine.name';\nconst TMP_WEBENGINE_VERSION = 'webengine.version';\nconst TMP_WEBENGINE_DESCRIPTION = 'webengine.description';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use ATTR_CLOUD_PROVIDER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PROVIDER = TMP_CLOUD_PROVIDER;\n/**\n * The cloud account ID the resource is assigned to.\n *\n * @deprecated Use ATTR_CLOUD_ACCOUNT_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_ACCOUNT_ID = TMP_CLOUD_ACCOUNT_ID;\n/**\n * The geographical region the resource is running. Refer to your provider&#39;s docs to see the available regions, for example [Alibaba Cloud regions](https://www.alibabacloud.com/help/doc-detail/40654.htm), [AWS regions](https://aws.amazon.com/about-aws/global-infrastructure/regions_az/), [Azure regions](https://azure.microsoft.com/en-us/global-infrastructure/geographies/), or [Google Cloud regions](https://cloud.google.com/about/locations).\n *\n * @deprecated Use ATTR_CLOUD_REGION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_REGION = TMP_CLOUD_REGION;\n/**\n * Cloud regions often have multiple, isolated locations known as zones to increase availability. Availability zone represents the zone where the resource is running.\n *\n * Note: Availability zones are called &#34;zones&#34; on Alibaba Cloud and Google Cloud.\n *\n * @deprecated Use ATTR_CLOUD_AVAILABILITY_ZONE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_AVAILABILITY_ZONE = TMP_CLOUD_AVAILABILITY_ZONE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use ATTR_CLOUD_PLATFORM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CLOUD_PLATFORM = TMP_CLOUD_PLATFORM;\n/**\n * The Amazon Resource Name (ARN) of an [ECS container instance](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/ECS_instances.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CONTAINER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CONTAINER_ARN = TMP_AWS_ECS_CONTAINER_ARN;\n/**\n * The ARN of an [ECS cluster](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/clusters.html).\n *\n * @deprecated Use ATTR_AWS_ECS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_CLUSTER_ARN = TMP_AWS_ECS_CLUSTER_ARN;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use ATTR_AWS_ECS_LAUNCHTYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_LAUNCHTYPE = TMP_AWS_ECS_LAUNCHTYPE;\n/**\n * The ARN of an [ECS task definition](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/task_definitions.html).\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_ARN = TMP_AWS_ECS_TASK_ARN;\n/**\n * The task definition family this task definition is a member of.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_FAMILY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_FAMILY = TMP_AWS_ECS_TASK_FAMILY;\n/**\n * The revision for this task definition.\n *\n * @deprecated Use ATTR_AWS_ECS_TASK_REVISION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_ECS_TASK_REVISION = TMP_AWS_ECS_TASK_REVISION;\n/**\n * The ARN of an EKS cluster.\n *\n * @deprecated Use ATTR_AWS_EKS_CLUSTER_ARN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_EKS_CLUSTER_ARN = TMP_AWS_EKS_CLUSTER_ARN;\n/**\n * The name(s) of the AWS log group(s) an application is writing to.\n *\n * Note: Multiple log groups must be supported for cases like multi-container applications, where a single application has sidecar containers, and each write to their own log group.\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_NAMES = TMP_AWS_LOG_GROUP_NAMES;\n/**\n * The Amazon Resource Name(s) (ARN) of the AWS log group(s).\n *\n * Note: See the [log group ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format).\n *\n * @deprecated Use ATTR_AWS_LOG_GROUP_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_GROUP_ARNS = TMP_AWS_LOG_GROUP_ARNS;\n/**\n * The name(s) of the AWS log stream(s) an application is writing to.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_NAMES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_NAMES = TMP_AWS_LOG_STREAM_NAMES;\n/**\n * The ARN(s) of the AWS log stream(s).\n *\n * Note: See the [log stream ARN format documentation](https://docs.aws.amazon.com/AmazonCloudWatch/latest/logs/iam-access-control-overview-cwl.html#CWL_ARN_Format). One log group can contain several log streams, so these ARNs necessarily identify both a log group and a log stream.\n *\n * @deprecated Use ATTR_AWS_LOG_STREAM_ARNS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_AWS_LOG_STREAM_ARNS = TMP_AWS_LOG_STREAM_ARNS;\n/**\n * Container name.\n *\n * @deprecated Use ATTR_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_NAME = TMP_CONTAINER_NAME;\n/**\n * Container ID. Usually a UUID, as for example used to [identify Docker containers](https://docs.docker.com/engine/reference/run/#container-identification). The UUID might be abbreviated.\n *\n * @deprecated Use ATTR_CONTAINER_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_ID = TMP_CONTAINER_ID;\n/**\n * The container runtime managing this container.\n *\n * @deprecated Use ATTR_CONTAINER_RUNTIME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_RUNTIME = TMP_CONTAINER_RUNTIME;\n/**\n * Name of the image the container was built on.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_NAME = TMP_CONTAINER_IMAGE_NAME;\n/**\n * Container image tag.\n *\n * @deprecated Use ATTR_CONTAINER_IMAGE_TAGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_CONTAINER_IMAGE_TAG = TMP_CONTAINER_IMAGE_TAG;\n/**\n * Name of the [deployment environment](https://en.wikipedia.org/wiki/Deployment_environment) (aka deployment tier).\n *\n * @deprecated Use ATTR_DEPLOYMENT_ENVIRONMENT in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEPLOYMENT_ENVIRONMENT = TMP_DEPLOYMENT_ENVIRONMENT;\n/**\n * A unique identifier representing the device.\n *\n * Note: The device identifier MUST only be defined using the values outlined below. This value is not an advertising identifier and MUST NOT be used as such. On iOS (Swift or Objective-C), this value MUST be equal to the [vendor identifier](https://developer.apple.com/documentation/uikit/uidevice/1620059-identifierforvendor). On Android (Java or Kotlin), this value MUST be equal to the Firebase Installation ID or a globally unique UUID which is persisted across sessions in your application. More information can be found [here](https://developer.android.com/training/articles/user-data-ids) on best practices and exact implementation details. Caution should be taken when storing personal data or anything which can identify a user. GDPR and data protection laws may apply, ensure you do your own due diligence.\n *\n * @deprecated Use ATTR_DEVICE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_ID = TMP_DEVICE_ID;\n/**\n * The model identifier for the device.\n *\n * Note: It&#39;s recommended this value represents a machine readable version of the model identifier rather than the market or consumer-friendly name of the device.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_IDENTIFIER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_IDENTIFIER = TMP_DEVICE_MODEL_IDENTIFIER;\n/**\n * The marketing name for the device model.\n *\n * Note: It&#39;s recommended this value represents a human readable version of the device model rather than a machine readable alternative.\n *\n * @deprecated Use ATTR_DEVICE_MODEL_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_DEVICE_MODEL_NAME = TMP_DEVICE_MODEL_NAME;\n/**\n * The name of the single function that this runtime instance executes.\n *\n * Note: This is the name of the function as configured/deployed on the FaaS platform and is usually different from the name of the callback function (which may be stored in the [`code.namespace`/`code.function`](../../trace/semantic_conventions/span-general.md#source-code-attributes) span attributes).\n *\n * @deprecated Use ATTR_FAAS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_NAME = TMP_FAAS_NAME;\n/**\n* The unique ID of the single function that this runtime instance executes.\n*\n* Note: Depending on the cloud provider, use:\n\n* **AWS Lambda:** The function [ARN](https://docs.aws.amazon.com/general/latest/gr/aws-arns-and-namespaces.html).\nTake care not to use the &#34;invoked ARN&#34; directly but replace any\n[alias suffix](https://docs.aws.amazon.com/lambda/latest/dg/configuration-aliases.html) with the resolved function version, as the same runtime instance may be invokable with multiple\ndifferent aliases.\n* **GCP:** The [URI of the resource](https://cloud.google.com/iam/docs/full-resource-names)\n* **Azure:** The [Fully Qualified Resource ID](https://docs.microsoft.com/en-us/rest/api/resources/resources/get-by-id).\n\nOn some providers, it may not be possible to determine the full ID at startup,\nwhich is why this field cannot be made required. For example, on AWS the account ID\npart of the ARN is not available without calling another AWS API\nwhich may be deemed too slow for a short-running lambda function.\nAs an alternative, consider setting `faas.id` as a span attribute instead.\n*\n* @deprecated Use ATTR_CLOUD_RESOURCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_ID = TMP_FAAS_ID;\n/**\n* The immutable version of the function being executed.\n*\n* Note: Depending on the cloud provider and platform, use:\n\n* **AWS Lambda:** The [function version](https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html)\n  (an integer represented as a decimal string).\n* **Google Cloud Run:** The [revision](https://cloud.google.com/run/docs/managing/revisions)\n  (i.e., the function name plus the revision suffix).\n* **Google Cloud Functions:** The value of the\n  [`K_REVISION` environment variable](https://cloud.google.com/functions/docs/env-var#runtime_environment_variables_set_automatically).\n* **Azure Functions:** Not applicable. Do not set this attribute.\n*\n* @deprecated Use ATTR_FAAS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n*/\nexport const SEMRESATTRS_FAAS_VERSION = TMP_FAAS_VERSION;\n/**\n * The execution environment ID as a string, that will be potentially reused for other invocations to the same function/function version.\n *\n * Note: * **AWS Lambda:** Use the (full) log stream name.\n *\n * @deprecated Use ATTR_FAAS_INSTANCE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_INSTANCE = TMP_FAAS_INSTANCE;\n/**\n * The amount of memory available to the serverless function in MiB.\n *\n * Note: It&#39;s recommended to set this attribute since e.g. too little memory can easily stop a Java AWS Lambda function from working correctly. On AWS Lambda, the environment variable `AWS_LAMBDA_FUNCTION_MEMORY_SIZE` provides this information.\n *\n * @deprecated Use ATTR_FAAS_MAX_MEMORY in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_FAAS_MAX_MEMORY = TMP_FAAS_MAX_MEMORY;\n/**\n * Unique host ID. For Cloud, this must be the instance_id assigned by the cloud provider.\n *\n * @deprecated Use ATTR_HOST_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ID = TMP_HOST_ID;\n/**\n * Name of the host. On Unix systems, it may contain what the hostname command returns, or the fully qualified hostname, or another name specified by the user.\n *\n * @deprecated Use ATTR_HOST_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_NAME = TMP_HOST_NAME;\n/**\n * Type of host. For Cloud, this must be the machine type.\n *\n * @deprecated Use ATTR_HOST_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_TYPE = TMP_HOST_TYPE;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use ATTR_HOST_ARCH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_ARCH = TMP_HOST_ARCH;\n/**\n * Name of the VM image or OS install the host was instantiated from.\n *\n * @deprecated Use ATTR_HOST_IMAGE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_NAME = TMP_HOST_IMAGE_NAME;\n/**\n * VM image ID. For Cloud, this value is from the provider.\n *\n * @deprecated Use ATTR_HOST_IMAGE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_ID = TMP_HOST_IMAGE_ID;\n/**\n * The version string of the VM image as defined in [Version Attributes](README.md#version-attributes).\n *\n * @deprecated Use ATTR_HOST_IMAGE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_HOST_IMAGE_VERSION = TMP_HOST_IMAGE_VERSION;\n/**\n * The name of the cluster.\n *\n * @deprecated Use ATTR_K8S_CLUSTER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CLUSTER_NAME = TMP_K8S_CLUSTER_NAME;\n/**\n * The name of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_NAME = TMP_K8S_NODE_NAME;\n/**\n * The UID of the Node.\n *\n * @deprecated Use ATTR_K8S_NODE_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NODE_UID = TMP_K8S_NODE_UID;\n/**\n * The name of the namespace that the pod is running in.\n *\n * @deprecated Use ATTR_K8S_NAMESPACE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_NAMESPACE_NAME = TMP_K8S_NAMESPACE_NAME;\n/**\n * The UID of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_UID = TMP_K8S_POD_UID;\n/**\n * The name of the Pod.\n *\n * @deprecated Use ATTR_K8S_POD_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_POD_NAME = TMP_K8S_POD_NAME;\n/**\n * The name of the Container in a Pod template.\n *\n * @deprecated Use ATTR_K8S_CONTAINER_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CONTAINER_NAME = TMP_K8S_CONTAINER_NAME;\n/**\n * The UID of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_UID = TMP_K8S_REPLICASET_UID;\n/**\n * The name of the ReplicaSet.\n *\n * @deprecated Use ATTR_K8S_REPLICASET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_REPLICASET_NAME = TMP_K8S_REPLICASET_NAME;\n/**\n * The UID of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_UID = TMP_K8S_DEPLOYMENT_UID;\n/**\n * The name of the Deployment.\n *\n * @deprecated Use ATTR_K8S_DEPLOYMENT_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DEPLOYMENT_NAME = TMP_K8S_DEPLOYMENT_NAME;\n/**\n * The UID of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_UID = TMP_K8S_STATEFULSET_UID;\n/**\n * The name of the StatefulSet.\n *\n * @deprecated Use ATTR_K8S_STATEFULSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_STATEFULSET_NAME = TMP_K8S_STATEFULSET_NAME;\n/**\n * The UID of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_UID = TMP_K8S_DAEMONSET_UID;\n/**\n * The name of the DaemonSet.\n *\n * @deprecated Use ATTR_K8S_DAEMONSET_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_DAEMONSET_NAME = TMP_K8S_DAEMONSET_NAME;\n/**\n * The UID of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_UID = TMP_K8S_JOB_UID;\n/**\n * The name of the Job.\n *\n * @deprecated Use ATTR_K8S_JOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_JOB_NAME = TMP_K8S_JOB_NAME;\n/**\n * The UID of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_UID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_UID = TMP_K8S_CRONJOB_UID;\n/**\n * The name of the CronJob.\n *\n * @deprecated Use ATTR_K8S_CRONJOB_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_K8S_CRONJOB_NAME = TMP_K8S_CRONJOB_NAME;\n/**\n * The operating system type.\n *\n * @deprecated Use ATTR_OS_TYPE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_TYPE = TMP_OS_TYPE;\n/**\n * Human readable (not intended to be parsed) OS version information, like e.g. reported by `ver` or `lsb_release -a` commands.\n *\n * @deprecated Use ATTR_OS_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_DESCRIPTION = TMP_OS_DESCRIPTION;\n/**\n * Human readable operating system name.\n *\n * @deprecated Use ATTR_OS_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_NAME = TMP_OS_NAME;\n/**\n * The version string of the operating system as defined in [Version Attributes](../../resource/semantic_conventions/README.md#version-attributes).\n *\n * @deprecated Use ATTR_OS_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_OS_VERSION = TMP_OS_VERSION;\n/**\n * Process identifier (PID).\n *\n * @deprecated Use ATTR_PROCESS_PID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_PID = TMP_PROCESS_PID;\n/**\n * The name of the process executable. On Linux based systems, can be set to the `Name` in `proc/[pid]/status`. On Windows, can be set to the base name of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_NAME = TMP_PROCESS_EXECUTABLE_NAME;\n/**\n * The full path to the process executable. On Linux based systems, can be set to the target of `proc/[pid]/exe`. On Windows, can be set to the result of `GetProcessImageFileNameW`.\n *\n * @deprecated Use ATTR_PROCESS_EXECUTABLE_PATH in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_EXECUTABLE_PATH = TMP_PROCESS_EXECUTABLE_PATH;\n/**\n * The command used to launch the process (i.e. the command name). On Linux based systems, can be set to the zeroth string in `proc/[pid]/cmdline`. On Windows, can be set to the first parameter extracted from `GetCommandLineW`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND = TMP_PROCESS_COMMAND;\n/**\n * The full command used to launch the process as a single string representing the full command. On Windows, can be set to the result of `GetCommandLineW`. Do not set this if you have to assemble it just for monitoring; use `process.command_args` instead.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_LINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_LINE = TMP_PROCESS_COMMAND_LINE;\n/**\n * All the command arguments (including the command/executable itself) as received by the process. On Linux-based systems (and some other Unixoid systems supporting procfs), can be set according to the list of null-delimited strings extracted from `proc/[pid]/cmdline`. For libc-based executables, this would be the full argv vector passed to `main`.\n *\n * @deprecated Use ATTR_PROCESS_COMMAND_ARGS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_COMMAND_ARGS = TMP_PROCESS_COMMAND_ARGS;\n/**\n * The username of the user that owns the process.\n *\n * @deprecated Use ATTR_PROCESS_OWNER in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_OWNER = TMP_PROCESS_OWNER;\n/**\n * The name of the runtime of this process. For compiled native binaries, this SHOULD be the name of the compiler.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_NAME = TMP_PROCESS_RUNTIME_NAME;\n/**\n * The version of the runtime of this process, as returned by the runtime without modification.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_VERSION = TMP_PROCESS_RUNTIME_VERSION;\n/**\n * An additional description about the runtime of the process, for example a specific vendor customization of the runtime environment.\n *\n * @deprecated Use ATTR_PROCESS_RUNTIME_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_PROCESS_RUNTIME_DESCRIPTION = TMP_PROCESS_RUNTIME_DESCRIPTION;\n/**\n * Logical name of the service.\n *\n * Note: MUST be the same for all instances of horizontally scaled services. If the value was not specified, SDKs MUST fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md#process), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value MUST be set to `unknown_service`.\n *\n * @deprecated Use ATTR_SERVICE_NAME.\n */\nexport const SEMRESATTRS_SERVICE_NAME = TMP_SERVICE_NAME;\n/**\n * A namespace for `service.name`.\n *\n * Note: A string value having a meaning that helps to distinguish a group of services, for example the team name that owns a group of services. `service.name` is expected to be unique within the same namespace. If `service.namespace` is not specified in the Resource then `service.name` is expected to be unique for all services that have no explicit namespace defined (so the empty/unspecified namespace is simply one more valid namespace). Zero-length namespace string is assumed equal to unspecified namespace.\n *\n * @deprecated Use ATTR_SERVICE_NAMESPACE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_NAMESPACE = TMP_SERVICE_NAMESPACE;\n/**\n * The string ID of the service instance.\n *\n * Note: MUST be unique for each instance of the same `service.namespace,service.name` pair (in other words `service.namespace,service.name,service.instance.id` triplet MUST be globally unique). The ID helps to distinguish instances of the same service that exist at the same time (e.g. instances of a horizontally scaled service). It is preferable for the ID to be persistent and stay the same for the lifetime of the service instance, however it is acceptable that the ID is ephemeral and changes during important lifetime events for the service (e.g. service restarts). If the service has no inherent unique ID that can be used as the value of this attribute it is recommended to generate a random Version 1 or Version 4 RFC 4122 UUID (services aiming for reproducible UUIDs may also use Version 5, see RFC 4122 for more recommendations).\n *\n * @deprecated Use ATTR_SERVICE_INSTANCE_ID in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_SERVICE_INSTANCE_ID = TMP_SERVICE_INSTANCE_ID;\n/**\n * The version string of the service API or implementation.\n *\n * @deprecated Use ATTR_SERVICE_VERSION.\n */\nexport const SEMRESATTRS_SERVICE_VERSION = TMP_SERVICE_VERSION;\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_NAME.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_NAME = TMP_TELEMETRY_SDK_NAME;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_LANGUAGE.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_LANGUAGE = TMP_TELEMETRY_SDK_LANGUAGE;\n/**\n * The version string of the telemetry SDK.\n *\n * @deprecated Use ATTR_TELEMETRY_SDK_VERSION.\n */\nexport const SEMRESATTRS_TELEMETRY_SDK_VERSION = TMP_TELEMETRY_SDK_VERSION;\n/**\n * The version string of the auto instrumentation agent, if used.\n *\n * @deprecated Use ATTR_TELEMETRY_DISTRO_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_TELEMETRY_AUTO_VERSION = TMP_TELEMETRY_AUTO_VERSION;\n/**\n * The name of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_NAME in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_NAME = TMP_WEBENGINE_NAME;\n/**\n * The version of the web engine.\n *\n * @deprecated Use ATTR_WEBENGINE_VERSION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_VERSION = TMP_WEBENGINE_VERSION;\n/**\n * Additional description of the web engine (e.g. detailed version and edition information).\n *\n * @deprecated Use ATTR_WEBENGINE_DESCRIPTION in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const SEMRESATTRS_WEBENGINE_DESCRIPTION = TMP_WEBENGINE_DESCRIPTION;\n/**\n * Create exported Value Map for SemanticResourceAttributes values\n * @deprecated Use the SEMRESATTRS_XXXXX constants rather than the SemanticResourceAttributes.XXXXX for bundle minification\n */\nexport const SemanticResourceAttributes = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUD_PROVIDER,\n    TMP_CLOUD_ACCOUNT_ID,\n    TMP_CLOUD_REGION,\n    TMP_CLOUD_AVAILABILITY_ZONE,\n    TMP_CLOUD_PLATFORM,\n    TMP_AWS_ECS_CONTAINER_ARN,\n    TMP_AWS_ECS_CLUSTER_ARN,\n    TMP_AWS_ECS_LAUNCHTYPE,\n    TMP_AWS_ECS_TASK_ARN,\n    TMP_AWS_ECS_TASK_FAMILY,\n    TMP_AWS_ECS_TASK_REVISION,\n    TMP_AWS_EKS_CLUSTER_ARN,\n    TMP_AWS_LOG_GROUP_NAMES,\n    TMP_AWS_LOG_GROUP_ARNS,\n    TMP_AWS_LOG_STREAM_NAMES,\n    TMP_AWS_LOG_STREAM_ARNS,\n    TMP_CONTAINER_NAME,\n    TMP_CONTAINER_ID,\n    TMP_CONTAINER_RUNTIME,\n    TMP_CONTAINER_IMAGE_NAME,\n    TMP_CONTAINER_IMAGE_TAG,\n    TMP_DEPLOYMENT_ENVIRONMENT,\n    TMP_DEVICE_ID,\n    TMP_DEVICE_MODEL_IDENTIFIER,\n    TMP_DEVICE_MODEL_NAME,\n    TMP_FAAS_NAME,\n    TMP_FAAS_ID,\n    TMP_FAAS_VERSION,\n    TMP_FAAS_INSTANCE,\n    TMP_FAAS_MAX_MEMORY,\n    TMP_HOST_ID,\n    TMP_HOST_NAME,\n    TMP_HOST_TYPE,\n    TMP_HOST_ARCH,\n    TMP_HOST_IMAGE_NAME,\n    TMP_HOST_IMAGE_ID,\n    TMP_HOST_IMAGE_VERSION,\n    TMP_K8S_CLUSTER_NAME,\n    TMP_K8S_NODE_NAME,\n    TMP_K8S_NODE_UID,\n    TMP_K8S_NAMESPACE_NAME,\n    TMP_K8S_POD_UID,\n    TMP_K8S_POD_NAME,\n    TMP_K8S_CONTAINER_NAME,\n    TMP_K8S_REPLICASET_UID,\n    TMP_K8S_REPLICASET_NAME,\n    TMP_K8S_DEPLOYMENT_UID,\n    TMP_K8S_DEPLOYMENT_NAME,\n    TMP_K8S_STATEFULSET_UID,\n    TMP_K8S_STATEFULSET_NAME,\n    TMP_K8S_DAEMONSET_UID,\n    TMP_K8S_DAEMONSET_NAME,\n    TMP_K8S_JOB_UID,\n    TMP_K8S_JOB_NAME,\n    TMP_K8S_CRONJOB_UID,\n    TMP_K8S_CRONJOB_NAME,\n    TMP_OS_TYPE,\n    TMP_OS_DESCRIPTION,\n    TMP_OS_NAME,\n    TMP_OS_VERSION,\n    TMP_PROCESS_PID,\n    TMP_PROCESS_EXECUTABLE_NAME,\n    TMP_PROCESS_EXECUTABLE_PATH,\n    TMP_PROCESS_COMMAND,\n    TMP_PROCESS_COMMAND_LINE,\n    TMP_PROCESS_COMMAND_ARGS,\n    TMP_PROCESS_OWNER,\n    TMP_PROCESS_RUNTIME_NAME,\n    TMP_PROCESS_RUNTIME_VERSION,\n    TMP_PROCESS_RUNTIME_DESCRIPTION,\n    TMP_SERVICE_NAME,\n    TMP_SERVICE_NAMESPACE,\n    TMP_SERVICE_INSTANCE_ID,\n    TMP_SERVICE_VERSION,\n    TMP_TELEMETRY_SDK_NAME,\n    TMP_TELEMETRY_SDK_LANGUAGE,\n    TMP_TELEMETRY_SDK_VERSION,\n    TMP_TELEMETRY_AUTO_VERSION,\n    TMP_WEBENGINE_NAME,\n    TMP_WEBENGINE_VERSION,\n    TMP_WEBENGINE_DESCRIPTION,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudProviderValues enum definition\n *\n * Name of the cloud provider.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD = 'alibaba_cloud';\nconst TMP_CLOUDPROVIDERVALUES_AWS = 'aws';\nconst TMP_CLOUDPROVIDERVALUES_AZURE = 'azure';\nconst TMP_CLOUDPROVIDERVALUES_GCP = 'gcp';\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_ALIBABA_CLOUD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_ALIBABA_CLOUD = TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AWS = TMP_CLOUDPROVIDERVALUES_AWS;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_AZURE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_AZURE = TMP_CLOUDPROVIDERVALUES_AZURE;\n/**\n * Name of the cloud provider.\n *\n * @deprecated Use CLOUD_PROVIDER_VALUE_GCP in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPROVIDERVALUES_GCP = TMP_CLOUDPROVIDERVALUES_GCP;\n/**\n * The constant map of values for CloudProviderValues.\n * @deprecated Use the CLOUDPROVIDERVALUES_XXXXX constants rather than the CloudProviderValues.XXXXX for bundle minification.\n */\nexport const CloudProviderValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPROVIDERVALUES_ALIBABA_CLOUD,\n    TMP_CLOUDPROVIDERVALUES_AWS,\n    TMP_CLOUDPROVIDERVALUES_AZURE,\n    TMP_CLOUDPROVIDERVALUES_GCP,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for CloudPlatformValues enum definition\n *\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = 'alibaba_cloud_ecs';\nconst TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = 'alibaba_cloud_fc';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EC2 = 'aws_ec2';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ECS = 'aws_ecs';\nconst TMP_CLOUDPLATFORMVALUES_AWS_EKS = 'aws_eks';\nconst TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA = 'aws_lambda';\nconst TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = 'aws_elastic_beanstalk';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_VM = 'azure_vm';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = 'azure_container_instances';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_AKS = 'azure_aks';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = 'azure_functions';\nconst TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = 'azure_app_service';\nconst TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = 'gcp_compute_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = 'gcp_cloud_run';\nconst TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = 'gcp_kubernetes_engine';\nconst TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = 'gcp_cloud_functions';\nconst TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE = 'gcp_app_engine';\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_ALIBABA_CLOUD_FC in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC = TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EC2 = TMP_CLOUDPLATFORMVALUES_AWS_EC2;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ECS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ECS = TMP_CLOUDPLATFORMVALUES_AWS_ECS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_EKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_EKS = TMP_CLOUDPLATFORMVALUES_AWS_EKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_LAMBDA in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_LAMBDA = TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AWS_ELASTIC_BEANSTALK in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK = TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_VM in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_VM = TMP_CLOUDPLATFORMVALUES_AZURE_VM;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_CONTAINER_INSTANCES in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES = TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_AKS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_AKS = TMP_CLOUDPLATFORMVALUES_AZURE_AKS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_AZURE_APP_SERVICE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_AZURE_APP_SERVICE = TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_COMPUTE_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_RUN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_RUN = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_KUBERNETES_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_CLOUD_FUNCTIONS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS = TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS;\n/**\n * The cloud platform in use.\n *\n * Note: The prefix of the service SHOULD match the one specified in `cloud.provider`.\n *\n * @deprecated Use CLOUD_PLATFORM_VALUE_GCP_APP_ENGINE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const CLOUDPLATFORMVALUES_GCP_APP_ENGINE = TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE;\n/**\n * The constant map of values for CloudPlatformValues.\n * @deprecated Use the CLOUDPLATFORMVALUES_XXXXX constants rather than the CloudPlatformValues.XXXXX for bundle minification.\n */\nexport const CloudPlatformValues = \n/*#__PURE__*/ createConstMap([\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_ECS,\n    TMP_CLOUDPLATFORMVALUES_ALIBABA_CLOUD_FC,\n    TMP_CLOUDPLATFORMVALUES_AWS_EC2,\n    TMP_CLOUDPLATFORMVALUES_AWS_ECS,\n    TMP_CLOUDPLATFORMVALUES_AWS_EKS,\n    TMP_CLOUDPLATFORMVALUES_AWS_LAMBDA,\n    TMP_CLOUDPLATFORMVALUES_AWS_ELASTIC_BEANSTALK,\n    TMP_CLOUDPLATFORMVALUES_AZURE_VM,\n    TMP_CLOUDPLATFORMVALUES_AZURE_CONTAINER_INSTANCES,\n    TMP_CLOUDPLATFORMVALUES_AZURE_AKS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_AZURE_APP_SERVICE,\n    TMP_CLOUDPLATFORMVALUES_GCP_COMPUTE_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_RUN,\n    TMP_CLOUDPLATFORMVALUES_GCP_KUBERNETES_ENGINE,\n    TMP_CLOUDPLATFORMVALUES_GCP_CLOUD_FUNCTIONS,\n    TMP_CLOUDPLATFORMVALUES_GCP_APP_ENGINE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for AwsEcsLaunchtypeValues enum definition\n *\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_AWSECSLAUNCHTYPEVALUES_EC2 = 'ec2';\nconst TMP_AWSECSLAUNCHTYPEVALUES_FARGATE = 'fargate';\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_EC2 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_EC2 = TMP_AWSECSLAUNCHTYPEVALUES_EC2;\n/**\n * The [launch type](https://docs.aws.amazon.com/AmazonECS/latest/developerguide/launch_types.html) for an ECS task.\n *\n * @deprecated Use AWS_ECS_LAUNCHTYPE_VALUE_FARGATE in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const AWSECSLAUNCHTYPEVALUES_FARGATE = TMP_AWSECSLAUNCHTYPEVALUES_FARGATE;\n/**\n * The constant map of values for AwsEcsLaunchtypeValues.\n * @deprecated Use the AWSECSLAUNCHTYPEVALUES_XXXXX constants rather than the AwsEcsLaunchtypeValues.XXXXX for bundle minification.\n */\nexport const AwsEcsLaunchtypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_AWSECSLAUNCHTYPEVALUES_EC2,\n    TMP_AWSECSLAUNCHTYPEVALUES_FARGATE,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for HostArchValues enum definition\n *\n * The CPU architecture the host system is running on.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_HOSTARCHVALUES_AMD64 = 'amd64';\nconst TMP_HOSTARCHVALUES_ARM32 = 'arm32';\nconst TMP_HOSTARCHVALUES_ARM64 = 'arm64';\nconst TMP_HOSTARCHVALUES_IA64 = 'ia64';\nconst TMP_HOSTARCHVALUES_PPC32 = 'ppc32';\nconst TMP_HOSTARCHVALUES_PPC64 = 'ppc64';\nconst TMP_HOSTARCHVALUES_X86 = 'x86';\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_AMD64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_AMD64 = TMP_HOSTARCHVALUES_AMD64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM32 = TMP_HOSTARCHVALUES_ARM32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_ARM64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_ARM64 = TMP_HOSTARCHVALUES_ARM64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_IA64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_IA64 = TMP_HOSTARCHVALUES_IA64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC32 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC32 = TMP_HOSTARCHVALUES_PPC32;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_PPC64 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_PPC64 = TMP_HOSTARCHVALUES_PPC64;\n/**\n * The CPU architecture the host system is running on.\n *\n * @deprecated Use HOST_ARCH_VALUE_X86 in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const HOSTARCHVALUES_X86 = TMP_HOSTARCHVALUES_X86;\n/**\n * The constant map of values for HostArchValues.\n * @deprecated Use the HOSTARCHVALUES_XXXXX constants rather than the HostArchValues.XXXXX for bundle minification.\n */\nexport const HostArchValues = \n/*#__PURE__*/ createConstMap([\n    TMP_HOSTARCHVALUES_AMD64,\n    TMP_HOSTARCHVALUES_ARM32,\n    TMP_HOSTARCHVALUES_ARM64,\n    TMP_HOSTARCHVALUES_IA64,\n    TMP_HOSTARCHVALUES_PPC32,\n    TMP_HOSTARCHVALUES_PPC64,\n    TMP_HOSTARCHVALUES_X86,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for OsTypeValues enum definition\n *\n * The operating system type.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_OSTYPEVALUES_WINDOWS = 'windows';\nconst TMP_OSTYPEVALUES_LINUX = 'linux';\nconst TMP_OSTYPEVALUES_DARWIN = 'darwin';\nconst TMP_OSTYPEVALUES_FREEBSD = 'freebsd';\nconst TMP_OSTYPEVALUES_NETBSD = 'netbsd';\nconst TMP_OSTYPEVALUES_OPENBSD = 'openbsd';\nconst TMP_OSTYPEVALUES_DRAGONFLYBSD = 'dragonflybsd';\nconst TMP_OSTYPEVALUES_HPUX = 'hpux';\nconst TMP_OSTYPEVALUES_AIX = 'aix';\nconst TMP_OSTYPEVALUES_SOLARIS = 'solaris';\nconst TMP_OSTYPEVALUES_Z_OS = 'z_os';\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_WINDOWS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_WINDOWS = TMP_OSTYPEVALUES_WINDOWS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_LINUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_LINUX = TMP_OSTYPEVALUES_LINUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DARWIN in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DARWIN = TMP_OSTYPEVALUES_DARWIN;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_FREEBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_FREEBSD = TMP_OSTYPEVALUES_FREEBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_NETBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_NETBSD = TMP_OSTYPEVALUES_NETBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_OPENBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_OPENBSD = TMP_OSTYPEVALUES_OPENBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_DRAGONFLYBSD in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_DRAGONFLYBSD = TMP_OSTYPEVALUES_DRAGONFLYBSD;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_HPUX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_HPUX = TMP_OSTYPEVALUES_HPUX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_AIX in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_AIX = TMP_OSTYPEVALUES_AIX;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_SOLARIS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_SOLARIS = TMP_OSTYPEVALUES_SOLARIS;\n/**\n * The operating system type.\n *\n * @deprecated Use OS_TYPE_VALUE_Z_OS in [incubating entry-point]({@link https://github.com/open-telemetry/opentelemetry-js/blob/main/semantic-conventions/README.md#unstable-semconv}).\n */\nexport const OSTYPEVALUES_Z_OS = TMP_OSTYPEVALUES_Z_OS;\n/**\n * The constant map of values for OsTypeValues.\n * @deprecated Use the OSTYPEVALUES_XXXXX constants rather than the OsTypeValues.XXXXX for bundle minification.\n */\nexport const OsTypeValues = \n/*#__PURE__*/ createConstMap([\n    TMP_OSTYPEVALUES_WINDOWS,\n    TMP_OSTYPEVALUES_LINUX,\n    TMP_OSTYPEVALUES_DARWIN,\n    TMP_OSTYPEVALUES_FREEBSD,\n    TMP_OSTYPEVALUES_NETBSD,\n    TMP_OSTYPEVALUES_OPENBSD,\n    TMP_OSTYPEVALUES_DRAGONFLYBSD,\n    TMP_OSTYPEVALUES_HPUX,\n    TMP_OSTYPEVALUES_AIX,\n    TMP_OSTYPEVALUES_SOLARIS,\n    TMP_OSTYPEVALUES_Z_OS,\n]);\n/* ----------------------------------------------------------------------------------------------------------\n * Constant values for TelemetrySdkLanguageValues enum definition\n *\n * The language of the telemetry SDK.\n * ---------------------------------------------------------------------------------------------------------- */\n// Temporary local constants to assign to the individual exports and the namespaced version\n// Required to avoid the namespace exports using the unminifiable export names for some package types\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_CPP = 'cpp';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET = 'dotnet';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG = 'erlang';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_GO = 'go';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA = 'java';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS = 'nodejs';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PHP = 'php';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON = 'python';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY = 'ruby';\nconst TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS = 'webjs';\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_CPP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_CPP = TMP_TELEMETRYSDKLANGUAGEVALUES_CPP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_DOTNET = TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_ERLANG = TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_GO.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_GO = TMP_TELEMETRYSDKLANGUAGEVALUES_GO;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_JAVA.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_JAVA = TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_NODEJS = TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PHP.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PHP = TMP_TELEMETRYSDKLANGUAGEVALUES_PHP;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_PYTHON = TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_RUBY.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_RUBY = TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY;\n/**\n * The language of the telemetry SDK.\n *\n * @deprecated Use TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS.\n */\nexport const TELEMETRYSDKLANGUAGEVALUES_WEBJS = TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS;\n/**\n * The constant map of values for TelemetrySdkLanguageValues.\n * @deprecated Use the TELEMETRYSDKLANGUAGEVALUES_XXXXX constants rather than the TelemetrySdkLanguageValues.XXXXX for bundle minification.\n */\nexport const TelemetrySdkLanguageValues = \n/*#__PURE__*/ createConstMap([\n    TMP_TELEMETRYSDKLANGUAGEVALUES_CPP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_DOTNET,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_ERLANG,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_GO,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_JAVA,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_NODEJS,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PHP,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_PYTHON,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_RUBY,\n    TMP_TELEMETRYSDKLANGUAGEVALUES_WEBJS,\n]);\n//# sourceMappingURL=SemanticResourceAttributes.js.map","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n//----------------------------------------------------------------------------------------------------------\n// DO NOT EDIT, this is an Auto-generated file from scripts/semconv/templates/registry/stable/attributes.ts.j2\n//----------------------------------------------------------------------------------------------------------\n/**\n * ASP.NET Core exception middleware handling result\n *\n * @example handled\n * @example unhandled\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT = 'aspnetcore.diagnostics.exception.result';\n/**\n  * Enum value \"aborted\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n  */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_ABORTED = \"aborted\";\n/**\n  * Enum value \"handled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n  */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_HANDLED = \"handled\";\n/**\n  * Enum value \"skipped\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n  */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_SKIPPED = \"skipped\";\n/**\n  * Enum value \"unhandled\" for attribute {@link ATTR_ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT}.\n  */\nexport const ASPNETCORE_DIAGNOSTICS_EXCEPTION_RESULT_VALUE_UNHANDLED = \"unhandled\";\n/**\n * Full type name of the [`IExceptionHandler`](https://learn.microsoft.com/dotnet/api/microsoft.aspnetcore.diagnostics.iexceptionhandler) implementation that handled the exception.\n *\n * @example Contoso.MyHandler\n */\nexport const ATTR_ASPNETCORE_DIAGNOSTICS_HANDLER_TYPE = 'aspnetcore.diagnostics.handler.type';\n/**\n * Rate limiting policy name.\n *\n * @example fixed\n * @example sliding\n * @example token\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_POLICY = 'aspnetcore.rate_limiting.policy';\n/**\n * Rate-limiting result, shows whether the lease was acquired or contains a rejection reason\n *\n * @example acquired\n * @example request_canceled\n */\nexport const ATTR_ASPNETCORE_RATE_LIMITING_RESULT = 'aspnetcore.rate_limiting.result';\n/**\n  * Enum value \"acquired\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n  */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ACQUIRED = \"acquired\";\n/**\n  * Enum value \"endpoint_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n  */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_ENDPOINT_LIMITER = \"endpoint_limiter\";\n/**\n  * Enum value \"global_limiter\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n  */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_GLOBAL_LIMITER = \"global_limiter\";\n/**\n  * Enum value \"request_canceled\" for attribute {@link ATTR_ASPNETCORE_RATE_LIMITING_RESULT}.\n  */\nexport const ASPNETCORE_RATE_LIMITING_RESULT_VALUE_REQUEST_CANCELED = \"request_canceled\";\n/**\n * Flag indicating if request was handled by the application pipeline.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_REQUEST_IS_UNHANDLED = 'aspnetcore.request.is_unhandled';\n/**\n * A value that indicates whether the matched route is a fallback route.\n *\n * @example true\n */\nexport const ATTR_ASPNETCORE_ROUTING_IS_FALLBACK = 'aspnetcore.routing.is_fallback';\n/**\n * Match result - success or failure\n *\n * @example success\n * @example failure\n */\nexport const ATTR_ASPNETCORE_ROUTING_MATCH_STATUS = 'aspnetcore.routing.match_status';\n/**\n  * Enum value \"failure\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n  */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_FAILURE = \"failure\";\n/**\n  * Enum value \"success\" for attribute {@link ATTR_ASPNETCORE_ROUTING_MATCH_STATUS}.\n  */\nexport const ASPNETCORE_ROUTING_MATCH_STATUS_VALUE_SUCCESS = \"success\";\n/**\n * Client address - domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example client.example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.address` **SHOULD** represent the client address behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_ADDRESS = 'client.address';\n/**\n * Client port number.\n *\n * @example 65123\n *\n * @note When observed from the server side, and when communicating through an intermediary, `client.port` **SHOULD** represent the client port behind any intermediaries,  for example proxies, if it's available.\n */\nexport const ATTR_CLIENT_PORT = 'client.port';\n/**\n * Name of the garbage collector managed heap generation.\n *\n * @example gen0\n * @example gen1\n * @example gen2\n */\nexport const ATTR_DOTNET_GC_HEAP_GENERATION = 'dotnet.gc.heap.generation';\n/**\n  * Enum value \"gen0\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n  */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN0 = \"gen0\";\n/**\n  * Enum value \"gen1\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n  */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN1 = \"gen1\";\n/**\n  * Enum value \"gen2\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n  */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_GEN2 = \"gen2\";\n/**\n  * Enum value \"loh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n  */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_LOH = \"loh\";\n/**\n  * Enum value \"poh\" for attribute {@link ATTR_DOTNET_GC_HEAP_GENERATION}.\n  */\nexport const DOTNET_GC_HEAP_GENERATION_VALUE_POH = \"poh\";\n/**\n * Describes a class of error the operation ended with.\n *\n * @example timeout\n * @example java.net.UnknownHostException\n * @example server_certificate_invalid\n * @example 500\n *\n * @note The `error.type` **SHOULD** be predictable, and **SHOULD** have low cardinality.\n *\n * When `error.type` is set to a type (e.g., an exception type), its\n * canonical class name identifying the type within the artifact **SHOULD** be used.\n *\n * Instrumentations **SHOULD** document the list of errors they report.\n *\n * The cardinality of `error.type` within one instrumentation library **SHOULD** be low.\n * Telemetry consumers that aggregate data from multiple instrumentation libraries and applications\n * should be prepared for `error.type` to have high cardinality at query time when no\n * additional filters are applied.\n *\n * If the operation has completed successfully, instrumentations **SHOULD NOT** set `error.type`.\n *\n * If a specific domain defines its own set of error identifiers (such as HTTP or gRPC status codes),\n * it's **RECOMMENDED** to:\n *\n *   - Use a domain-specific attribute\n *   - Set `error.type` to capture all errors, regardless of whether they are defined within the domain-specific set or not.\n */\nexport const ATTR_ERROR_TYPE = 'error.type';\n/**\n  * Enum value \"_OTHER\" for attribute {@link ATTR_ERROR_TYPE}.\n  */\nexport const ERROR_TYPE_VALUE_OTHER = \"_OTHER\";\n/**\n * Indicates that the exception is escaping the scope of the span.\n *\n * @deprecated It's no longer recommended to record exceptions that are handled and do not escape the scope of a span.\n */\nexport const ATTR_EXCEPTION_ESCAPED = 'exception.escaped';\n/**\n * The exception message.\n *\n * @example Division by zero\n * @example Can't convert 'int' object to str implicitly\n */\nexport const ATTR_EXCEPTION_MESSAGE = 'exception.message';\n/**\n * A stacktrace as a string in the natural representation for the language runtime. The representation is to be determined and documented by each language SIG.\n *\n * @example \"Exception in thread \"main\" java.lang.RuntimeException: Test exception\\\\n at com.example.GenerateTrace.methodB(GenerateTrace.java:13)\\\\n at com.example.GenerateTrace.methodA(GenerateTrace.java:9)\\\\n at com.example.GenerateTrace.main(GenerateTrace.java:5)\\\\n\"\n */\nexport const ATTR_EXCEPTION_STACKTRACE = 'exception.stacktrace';\n/**\n * The type of the exception (its fully-qualified class name, if applicable). The dynamic type of the exception should be preferred over the static type in languages that support it.\n *\n * @example java.net.ConnectException\n * @example OSError\n */\nexport const ATTR_EXCEPTION_TYPE = 'exception.type';\n/**\n * HTTP request headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example http.request.header.content-type=[\"application/json\"]\n * @example http.request.header.x-forwarded-for=[\"1.2.3.4\", \"1.2.3.5\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured. Including all request headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n * The `User-Agent` header is already captured in the `user_agent.original` attribute. Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n * The attribute value **MUST** consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n */\nexport const ATTR_HTTP_REQUEST_HEADER = (key) => `http.request.header.${key}`;\n/**\n * HTTP request method.\n *\n * @example GET\n * @example POST\n * @example HEAD\n *\n * @note HTTP request method value **SHOULD** be \"known\" to the instrumentation.\n * By default, this convention defines \"known\" methods as the ones listed in [RFC9110](https://www.rfc-editor.org/rfc/rfc9110.html#name-methods)\n * and the PATCH method defined in [RFC5789](https://www.rfc-editor.org/rfc/rfc5789.html).\n *\n * If the HTTP request method is not known to instrumentation, it **MUST** set the `http.request.method` attribute to `_OTHER`.\n *\n * If the HTTP instrumentation could end up converting valid HTTP request methods to `_OTHER`, then it **MUST** provide a way to override\n * the list of known HTTP methods. If this override is done via environment variable, then the environment variable **MUST** be named\n * OTEL_INSTRUMENTATION_HTTP_KNOWN_METHODS and support a comma-separated list of case-sensitive known HTTP methods\n * (this list **MUST** be a full override of the default known method, it is not a list of known methods in addition to the defaults).\n *\n * HTTP method names are case-sensitive and `http.request.method` attribute value **MUST** match a known HTTP method name exactly.\n * Instrumentations for specific web frameworks that consider HTTP methods to be case insensitive, **SHOULD** populate a canonical equivalent.\n * Tracing instrumentations that do so, **MUST** also set `http.request.method_original` to the original value.\n */\nexport const ATTR_HTTP_REQUEST_METHOD = 'http.request.method';\n/**\n  * Enum value \"_OTHER\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_OTHER = \"_OTHER\";\n/**\n  * Enum value \"CONNECT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_CONNECT = \"CONNECT\";\n/**\n  * Enum value \"DELETE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_DELETE = \"DELETE\";\n/**\n  * Enum value \"GET\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_GET = \"GET\";\n/**\n  * Enum value \"HEAD\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_HEAD = \"HEAD\";\n/**\n  * Enum value \"OPTIONS\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_OPTIONS = \"OPTIONS\";\n/**\n  * Enum value \"PATCH\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_PATCH = \"PATCH\";\n/**\n  * Enum value \"POST\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_POST = \"POST\";\n/**\n  * Enum value \"PUT\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_PUT = \"PUT\";\n/**\n  * Enum value \"TRACE\" for attribute {@link ATTR_HTTP_REQUEST_METHOD}.\n  */\nexport const HTTP_REQUEST_METHOD_VALUE_TRACE = \"TRACE\";\n/**\n * Original HTTP method sent by the client in the request line.\n *\n * @example GeT\n * @example ACL\n * @example foo\n */\nexport const ATTR_HTTP_REQUEST_METHOD_ORIGINAL = 'http.request.method_original';\n/**\n * The ordinal number of request resending attempt (for any reason, including redirects).\n *\n * @example 3\n *\n * @note The resend count **SHOULD** be updated each time an HTTP request gets resent by the client, regardless of what was the cause of the resending (e.g. redirection, authorization failure, 503 Server Unavailable, network issues, or any other).\n */\nexport const ATTR_HTTP_REQUEST_RESEND_COUNT = 'http.request.resend_count';\n/**\n * HTTP response headers, `<key>` being the normalized HTTP Header name (lowercase), the value being the header values.\n *\n * @example http.response.header.content-type=[\"application/json\"]\n * @example http.response.header.my-custom-header=[\"abc\", \"def\"]\n *\n * @note Instrumentations **SHOULD** require an explicit configuration of which headers are to be captured. Including all response headers can be a security risk - explicit configuration helps avoid leaking sensitive information.\n * Users **MAY** explicitly configure instrumentations to capture them even though it is not recommended.\n * The attribute value **MUST** consist of either multiple header values as an array of strings or a single-item array containing a possibly comma-concatenated string, depending on the way the HTTP library provides access to headers.\n */\nexport const ATTR_HTTP_RESPONSE_HEADER = (key) => `http.response.header.${key}`;\n/**\n * [HTTP response status code](https://tools.ietf.org/html/rfc7231#section-6).\n *\n * @example 200\n */\nexport const ATTR_HTTP_RESPONSE_STATUS_CODE = 'http.response.status_code';\n/**\n * The matched route, that is, the path template in the format used by the respective server framework.\n *\n * @example /users/:userID?\n * @example {controller}/{action}/{id?}\n *\n * @note **MUST NOT** be populated when this is not supported by the HTTP server framework as the route attribute should have low-cardinality and the URI path can NOT substitute it.\n * **SHOULD** include the [application root](/docs/http/http-spans.md#http-server-definitions) if there is one.\n */\nexport const ATTR_HTTP_ROUTE = 'http.route';\n/**\n * Name of the garbage collector action.\n *\n * @example end of minor GC\n * @example end of major GC\n *\n * @note Garbage collector action is generally obtained via [GarbageCollectionNotificationInfo#getGcAction()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcAction()).\n */\nexport const ATTR_JVM_GC_ACTION = 'jvm.gc.action';\n/**\n * Name of the garbage collector.\n *\n * @example G1 Young Generation\n * @example G1 Old Generation\n *\n * @note Garbage collector name is generally obtained via [GarbageCollectionNotificationInfo#getGcName()](https://docs.oracle.com/en/java/javase/11/docs/api/jdk.management/com/sun/management/GarbageCollectionNotificationInfo.html#getGcName()).\n */\nexport const ATTR_JVM_GC_NAME = 'jvm.gc.name';\n/**\n * Name of the memory pool.\n *\n * @example G1 Old Gen\n * @example G1 Eden space\n * @example G1 Survivor Space\n *\n * @note Pool names are generally obtained via [MemoryPoolMXBean#getName()](https://docs.oracle.com/en/java/javase/11/docs/api/java.management/java/lang/management/MemoryPoolMXBean.html#getName()).\n */\nexport const ATTR_JVM_MEMORY_POOL_NAME = 'jvm.memory.pool.name';\n/**\n * The type of memory.\n *\n * @example heap\n * @example non_heap\n */\nexport const ATTR_JVM_MEMORY_TYPE = 'jvm.memory.type';\n/**\n  * Enum value \"heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n  */\nexport const JVM_MEMORY_TYPE_VALUE_HEAP = \"heap\";\n/**\n  * Enum value \"non_heap\" for attribute {@link ATTR_JVM_MEMORY_TYPE}.\n  */\nexport const JVM_MEMORY_TYPE_VALUE_NON_HEAP = \"non_heap\";\n/**\n * Whether the thread is daemon or not.\n */\nexport const ATTR_JVM_THREAD_DAEMON = 'jvm.thread.daemon';\n/**\n * State of the thread.\n *\n * @example runnable\n * @example blocked\n */\nexport const ATTR_JVM_THREAD_STATE = 'jvm.thread.state';\n/**\n  * Enum value \"blocked\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_BLOCKED = \"blocked\";\n/**\n  * Enum value \"new\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_NEW = \"new\";\n/**\n  * Enum value \"runnable\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_RUNNABLE = \"runnable\";\n/**\n  * Enum value \"terminated\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_TERMINATED = \"terminated\";\n/**\n  * Enum value \"timed_waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_TIMED_WAITING = \"timed_waiting\";\n/**\n  * Enum value \"waiting\" for attribute {@link ATTR_JVM_THREAD_STATE}.\n  */\nexport const JVM_THREAD_STATE_VALUE_WAITING = \"waiting\";\n/**\n * Local address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_LOCAL_ADDRESS = 'network.local.address';\n/**\n * Local port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_LOCAL_PORT = 'network.local.port';\n/**\n * Peer address of the network connection - IP address or Unix domain socket name.\n *\n * @example 10.1.2.80\n * @example /tmp/my.sock\n */\nexport const ATTR_NETWORK_PEER_ADDRESS = 'network.peer.address';\n/**\n * Peer port number of the network connection.\n *\n * @example 65123\n */\nexport const ATTR_NETWORK_PEER_PORT = 'network.peer.port';\n/**\n * [OSI application layer](https://wikipedia.org/wiki/Application_layer) or non-OSI equivalent.\n *\n * @example amqp\n * @example http\n * @example mqtt\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_PROTOCOL_NAME = 'network.protocol.name';\n/**\n * The actual version of the protocol used for network communication.\n *\n * @example 1.1\n * @example 2\n *\n * @note If protocol version is subject to negotiation (for example using [ALPN](https://www.rfc-editor.org/rfc/rfc7301.html)), this attribute **SHOULD** be set to the negotiated version. If the actual protocol version is not known, this attribute **SHOULD NOT** be set.\n */\nexport const ATTR_NETWORK_PROTOCOL_VERSION = 'network.protocol.version';\n/**\n * [OSI transport layer](https://wikipedia.org/wiki/Transport_layer) or [inter-process communication method](https://wikipedia.org/wiki/Inter-process_communication).\n *\n * @example tcp\n * @example udp\n *\n * @note The value **SHOULD** be normalized to lowercase.\n *\n * Consider always setting the transport when setting a port number, since\n * a port number is ambiguous without knowing the transport. For example\n * different processes could be listening on TCP port 12345 and UDP port 12345.\n */\nexport const ATTR_NETWORK_TRANSPORT = 'network.transport';\n/**\n  * Enum value \"pipe\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n  */\nexport const NETWORK_TRANSPORT_VALUE_PIPE = \"pipe\";\n/**\n  * Enum value \"quic\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n  */\nexport const NETWORK_TRANSPORT_VALUE_QUIC = \"quic\";\n/**\n  * Enum value \"tcp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n  */\nexport const NETWORK_TRANSPORT_VALUE_TCP = \"tcp\";\n/**\n  * Enum value \"udp\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n  */\nexport const NETWORK_TRANSPORT_VALUE_UDP = \"udp\";\n/**\n  * Enum value \"unix\" for attribute {@link ATTR_NETWORK_TRANSPORT}.\n  */\nexport const NETWORK_TRANSPORT_VALUE_UNIX = \"unix\";\n/**\n * [OSI network layer](https://wikipedia.org/wiki/Network_layer) or non-OSI equivalent.\n *\n * @example ipv4\n * @example ipv6\n *\n * @note The value **SHOULD** be normalized to lowercase.\n */\nexport const ATTR_NETWORK_TYPE = 'network.type';\n/**\n  * Enum value \"ipv4\" for attribute {@link ATTR_NETWORK_TYPE}.\n  */\nexport const NETWORK_TYPE_VALUE_IPV4 = \"ipv4\";\n/**\n  * Enum value \"ipv6\" for attribute {@link ATTR_NETWORK_TYPE}.\n  */\nexport const NETWORK_TYPE_VALUE_IPV6 = \"ipv6\";\n/**\n * The name of the instrumentation scope - (`InstrumentationScope.Name` in OTLP).\n *\n * @example io.opentelemetry.contrib.mongodb\n */\nexport const ATTR_OTEL_SCOPE_NAME = 'otel.scope.name';\n/**\n * The version of the instrumentation scope - (`InstrumentationScope.Version` in OTLP).\n *\n * @example 1.0.0\n */\nexport const ATTR_OTEL_SCOPE_VERSION = 'otel.scope.version';\n/**\n * Name of the code, either \"OK\" or \"ERROR\". **MUST NOT** be set if the status code is UNSET.\n */\nexport const ATTR_OTEL_STATUS_CODE = 'otel.status_code';\n/**\n  * Enum value \"ERROR\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n  */\nexport const OTEL_STATUS_CODE_VALUE_ERROR = \"ERROR\";\n/**\n  * Enum value \"OK\" for attribute {@link ATTR_OTEL_STATUS_CODE}.\n  */\nexport const OTEL_STATUS_CODE_VALUE_OK = \"OK\";\n/**\n * Description of the Status if it has a value, otherwise not set.\n *\n * @example resource not found\n */\nexport const ATTR_OTEL_STATUS_DESCRIPTION = 'otel.status_description';\n/**\n * Server domain name if available without reverse DNS lookup; otherwise, IP address or Unix domain socket name.\n *\n * @example example.com\n * @example 10.1.2.80\n * @example /tmp/my.sock\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.address` **SHOULD** represent the server address behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_ADDRESS = 'server.address';\n/**\n * Server port number.\n *\n * @example 80\n * @example 8080\n * @example 443\n *\n * @note When observed from the client side, and when communicating through an intermediary, `server.port` **SHOULD** represent the server port behind any intermediaries, for example proxies, if it's available.\n */\nexport const ATTR_SERVER_PORT = 'server.port';\n/**\n * Logical name of the service.\n *\n * @example shoppingcart\n *\n * @note **MUST** be the same for all instances of horizontally scaled services. If the value was not specified, SDKs **MUST** fallback to `unknown_service:` concatenated with [`process.executable.name`](process.md), e.g. `unknown_service:bash`. If `process.executable.name` is not available, the value **MUST** be set to `unknown_service`.\n */\nexport const ATTR_SERVICE_NAME = 'service.name';\n/**\n * The version string of the service API or implementation. The format is not defined by these conventions.\n *\n * @example 2.0.0\n * @example a01dbef8a\n */\nexport const ATTR_SERVICE_VERSION = 'service.version';\n/**\n * SignalR HTTP connection closure status.\n *\n * @example app_shutdown\n * @example timeout\n */\nexport const ATTR_SIGNALR_CONNECTION_STATUS = 'signalr.connection.status';\n/**\n  * Enum value \"app_shutdown\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n  */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_APP_SHUTDOWN = \"app_shutdown\";\n/**\n  * Enum value \"normal_closure\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n  */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_NORMAL_CLOSURE = \"normal_closure\";\n/**\n  * Enum value \"timeout\" for attribute {@link ATTR_SIGNALR_CONNECTION_STATUS}.\n  */\nexport const SIGNALR_CONNECTION_STATUS_VALUE_TIMEOUT = \"timeout\";\n/**\n * [SignalR transport type](https://github.com/dotnet/aspnetcore/blob/main/src/SignalR/docs/specs/TransportProtocols.md)\n *\n * @example web_sockets\n * @example long_polling\n */\nexport const ATTR_SIGNALR_TRANSPORT = 'signalr.transport';\n/**\n  * Enum value \"long_polling\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n  */\nexport const SIGNALR_TRANSPORT_VALUE_LONG_POLLING = \"long_polling\";\n/**\n  * Enum value \"server_sent_events\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n  */\nexport const SIGNALR_TRANSPORT_VALUE_SERVER_SENT_EVENTS = \"server_sent_events\";\n/**\n  * Enum value \"web_sockets\" for attribute {@link ATTR_SIGNALR_TRANSPORT}.\n  */\nexport const SIGNALR_TRANSPORT_VALUE_WEB_SOCKETS = \"web_sockets\";\n/**\n * The language of the telemetry SDK.\n */\nexport const ATTR_TELEMETRY_SDK_LANGUAGE = 'telemetry.sdk.language';\n/**\n  * Enum value \"cpp\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_CPP = \"cpp\";\n/**\n  * Enum value \"dotnet\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_DOTNET = \"dotnet\";\n/**\n  * Enum value \"erlang\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_ERLANG = \"erlang\";\n/**\n  * Enum value \"go\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_GO = \"go\";\n/**\n  * Enum value \"java\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_JAVA = \"java\";\n/**\n  * Enum value \"nodejs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_NODEJS = \"nodejs\";\n/**\n  * Enum value \"php\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PHP = \"php\";\n/**\n  * Enum value \"python\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_PYTHON = \"python\";\n/**\n  * Enum value \"ruby\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUBY = \"ruby\";\n/**\n  * Enum value \"rust\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_RUST = \"rust\";\n/**\n  * Enum value \"swift\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_SWIFT = \"swift\";\n/**\n  * Enum value \"webjs\" for attribute {@link ATTR_TELEMETRY_SDK_LANGUAGE}.\n  */\nexport const TELEMETRY_SDK_LANGUAGE_VALUE_WEBJS = \"webjs\";\n/**\n * The name of the telemetry SDK as defined above.\n *\n * @example opentelemetry\n *\n * @note The OpenTelemetry SDK **MUST** set the `telemetry.sdk.name` attribute to `opentelemetry`.\n * If another SDK, like a fork or a vendor-provided implementation, is used, this SDK **MUST** set the\n * `telemetry.sdk.name` attribute to the fully-qualified class or module name of this SDK's main entry point\n * or another suitable identifier depending on the language.\n * The identifier `opentelemetry` is reserved and **MUST NOT** be used in this case.\n * All custom identifiers **SHOULD** be stable across different versions of an implementation.\n */\nexport const ATTR_TELEMETRY_SDK_NAME = 'telemetry.sdk.name';\n/**\n * The version string of the telemetry SDK.\n *\n * @example 1.2.3\n */\nexport const ATTR_TELEMETRY_SDK_VERSION = 'telemetry.sdk.version';\n/**\n * The [URI fragment](https://www.rfc-editor.org/rfc/rfc3986#section-3.5) component\n *\n * @example SemConv\n */\nexport const ATTR_URL_FRAGMENT = 'url.fragment';\n/**\n * Absolute URL describing a network resource according to [RFC3986](https://www.rfc-editor.org/rfc/rfc3986)\n *\n * @example https://www.foo.bar/search?q=OpenTelemetry#SemConv\n * @example //localhost\n *\n * @note For network calls, URL usually has `scheme://host[:port][path][?query][#fragment]` format, where the fragment\n * is not transmitted over HTTP, but if it is known, it **SHOULD** be included nevertheless.\n *\n * `url.full` **MUST NOT** contain credentials passed via URL in form of `https://username:password@www.example.com/`.\n * In such case username and password **SHOULD** be redacted and attribute's value **SHOULD** be `https://REDACTED:REDACTED@www.example.com/`.\n *\n * `url.full` **SHOULD** capture the absolute URL when it is available (or can be reconstructed).\n *\n * Sensitive content provided in `url.full` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the\n * value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `https://www.example.com/path?color=blue&sig=REDACTED`.\n */\nexport const ATTR_URL_FULL = 'url.full';\n/**\n * The [URI path](https://www.rfc-editor.org/rfc/rfc3986#section-3.3) component\n *\n * @example /search\n *\n * @note Sensitive content provided in `url.path` **SHOULD** be scrubbed when instrumentations can identify it.\n */\nexport const ATTR_URL_PATH = 'url.path';\n/**\n * The [URI query](https://www.rfc-editor.org/rfc/rfc3986#section-3.4) component\n *\n * @example q=OpenTelemetry\n *\n * @note Sensitive content provided in `url.query` **SHOULD** be scrubbed when instrumentations can identify it.\n *\n *\n * Query string values for the following keys **SHOULD** be redacted by default and replaced by the value `REDACTED`:\n *\n *   - [`AWSAccessKeyId`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`Signature`](https://docs.aws.amazon.com/AmazonS3/latest/userguide/RESTAuthentication.html#RESTAuthenticationQueryStringAuth)\n *   - [`sig`](https://learn.microsoft.com/azure/storage/common/storage-sas-overview#sas-token)\n *   - [`X-Goog-Signature`](https://cloud.google.com/storage/docs/access-control/signed-urls)\n *\n * This list is subject to change over time.\n *\n * When a query string value is redacted, the query string key **SHOULD** still be preserved, e.g.\n * `q=OpenTelemetry&sig=REDACTED`.\n */\nexport const ATTR_URL_QUERY = 'url.query';\n/**\n * The [URI scheme](https://www.rfc-editor.org/rfc/rfc3986#section-3.1) component identifying the used protocol.\n *\n * @example https\n * @example ftp\n * @example telnet\n */\nexport const ATTR_URL_SCHEME = 'url.scheme';\n/**\n * Value of the [HTTP User-Agent](https://www.rfc-editor.org/rfc/rfc9110.html#field.user-agent) header sent by the client.\n *\n * @example CERN-LineMode/2.15 libwww/2.17b3\n * @example Mozilla/5.0 (iPhone; CPU iPhone OS 14_7_1 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/14.1.2 Mobile/15E148 Safari/604.1\n * @example YourApp/1.0.0 grpc-java-okhttp/1.27.2\n */\nexport const ATTR_USER_AGENT_ORIGINAL = 'user_agent.original';\n//# sourceMappingURL=stable_attributes.js.map","import { ATTR_URL_FULL, SEMATTRS_HTTP_URL, ATTR_HTTP_REQUEST_METHOD, SEMATTRS_HTTP_METHOD, SEMATTRS_DB_SYSTEM, SEMATTRS_RPC_SERVICE, SEMATTRS_MESSAGING_SYSTEM, SEMATTRS_FAAS_TRIGGER, SEMATTRS_DB_STATEMENT, SEMATTRS_HTTP_TARGET, ATTR_HTTP_ROUTE, ATTR_HTTP_RESPONSE_STATUS_CODE, SEMATTRS_HTTP_STATUS_CODE, SEMATTRS_RPC_GRPC_STATUS_CODE } from '@opentelemetry/semantic-conventions';\nimport { parseUrl, getSanitizedUrlString, SDK_VERSION, addNonEnumerableProperty, isSentryRequestUrl, getClient, baggageHeaderToDynamicSamplingContext, SEMANTIC_ATTRIBUTE_SENTRY_OP, SEMANTIC_ATTRIBUTE_SENTRY_SOURCE, SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN, SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME, stripUrlQueryAndFragment, spanToJSON, hasSpansEnabled, dynamicSamplingContextToSentryBaggageHeader, LRUMap, logger, parseBaggageHeader, SENTRY_BAGGAGE_KEY_PREFIX, generateSentryTraceHeader, stringMatchesSomePattern, getDynamicSamplingContextFromSpan, getCurrentScope, getDynamicSamplingContextFromScope, getIsolationScope, propagationContextFromHeaders, handleCallbackErrors, spanToTraceContext, getTraceContextFromScope, getRootSpan, getCapturedScopesOnSpan, setAsyncContextStrategy, getDefaultIsolationScope, getDefaultCurrentScope, SPAN_STATUS_OK, SPAN_STATUS_ERROR, getSpanStatusFromHttpCode, timedEventsToMeasurements, captureEvent, SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE, convertSpanLinksForEnvelope, getStatusMessage, spanTimeInputToSeconds, addChildSpanToSpan, setCapturedScopesOnSpan, logSpanStart, logSpanEnd, parseSampleRate, sampleSpan } from '@sentry/core';\nexport { getClient, getDynamicSamplingContextFromSpan } from '@sentry/core';\nimport * as api from '@opentelemetry/api';\nimport { trace, SpanKind, createContextKey, TraceFlags, propagation, INVALID_TRACEID, context, SpanStatusCode, ROOT_CONTEXT, isSpanContextValid } from '@opentelemetry/api';\nimport { TraceState, W3CBaggagePropagator, isTracingSuppressed, suppressTracing as suppressTracing$1 } from '@opentelemetry/core';\nimport { SamplingDecision } from '@opentelemetry/sdk-trace-base';\n\n/** If this attribute is true, it means that the parent is a remote span. */\nconst SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE = 'sentry.parentIsRemote';\n\n// These are not standardized yet, but used by the graphql instrumentation\nconst SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION = 'sentry.graphql.operation';\n\n/**\n * Get the parent span id from a span.\n * In OTel v1, the parent span id is accessed as `parentSpanId`\n * In OTel v2, the parent span id is accessed as `spanId` on the `parentSpanContext`\n */\nfunction getParentSpanId(span) {\n  if ('parentSpanId' in span) {\n    return span.parentSpanId ;\n  } else if ('parentSpanContext' in span) {\n    return (span.parentSpanContext )?.spanId;\n  }\n\n  return undefined;\n}\n\n/**\n * Check if a given span has attributes.\n * This is necessary because the base `Span` type does not have attributes,\n * so in places where we are passed a generic span, we need to check if we want to access them.\n */\nfunction spanHasAttributes(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.attributes && typeof castSpan.attributes === 'object';\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasKind(span) {\n  const castSpan = span ;\n  return typeof castSpan.kind === 'number';\n}\n\n/**\n * Check if a given span has a status.\n * This is necessary because the base `Span` type does not have a status,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasStatus(\n  span,\n) {\n  const castSpan = span ;\n  return !!castSpan.status;\n}\n\n/**\n * Check if a given span has a name.\n * This is necessary because the base `Span` type does not have a name,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasName(span) {\n  const castSpan = span ;\n  return !!castSpan.name;\n}\n\n/**\n * Check if a given span has a kind.\n * This is necessary because the base `Span` type does not have a kind,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasParentId(\n  span,\n) {\n  const castSpan = span ;\n  return !!getParentSpanId(castSpan);\n}\n\n/**\n * Check if a given span has events.\n * This is necessary because the base `Span` type does not have events,\n * so in places where we are passed a generic span, we need to check if we want to access it.\n */\nfunction spanHasEvents(\n  span,\n) {\n  const castSpan = span ;\n  return Array.isArray(castSpan.events);\n}\n\n/**\n * Get sanitizied request data from an OTEL span.\n */\nfunction getRequestSpanData(span) {\n  // The base `Span` type has no `attributes`, so we need to guard here against that\n  if (!spanHasAttributes(span)) {\n    return {};\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeUrlAttribute = (span.attributes[ATTR_URL_FULL] || span.attributes[SEMATTRS_HTTP_URL])\n\n;\n\n  const data = {\n    url: maybeUrlAttribute,\n    // eslint-disable-next-line deprecation/deprecation\n    'http.method': (span.attributes[ATTR_HTTP_REQUEST_METHOD] || span.attributes[SEMATTRS_HTTP_METHOD])\n\n,\n  };\n\n  // Default to GET if URL is set but method is not\n  if (!data['http.method'] && data.url) {\n    data['http.method'] = 'GET';\n  }\n\n  try {\n    if (typeof maybeUrlAttribute === 'string') {\n      const url = parseUrl(maybeUrlAttribute);\n\n      data.url = getSanitizedUrlString(url);\n\n      if (url.search) {\n        data['http.query'] = url.search;\n      }\n      if (url.hash) {\n        data['http.fragment'] = url.hash;\n      }\n    }\n  } catch {\n    // ignore\n  }\n\n  return data;\n}\n\n// Typescript complains if we do not use `...args: any[]` for the mixin, with:\n// A mixin class must have a constructor with a single rest parameter of type 'any[]'.ts(2545)\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\n/**\n * Wrap an Client class with things we need for OpenTelemetry support.\n * Make sure that the Client class passed in is non-abstract!\n *\n * Usage:\n * const OpenTelemetryClient = getWrappedClientClass(NodeClient);\n * const client = new OpenTelemetryClient(options);\n */\nfunction wrapClientClass\n\n(ClientClass) {\n  // @ts-expect-error We just assume that this is non-abstract, if you pass in an abstract class this would make it non-abstract\n  class OpenTelemetryClient extends ClientClass  {\n\n     constructor(...args) {\n      super(...args);\n    }\n\n    /** Get the OTEL tracer. */\n     get tracer() {\n      if (this._tracer) {\n        return this._tracer;\n      }\n\n      const name = '@sentry/opentelemetry';\n      const version = SDK_VERSION;\n      const tracer = trace.getTracer(name, version);\n      this._tracer = tracer;\n\n      return tracer;\n    }\n\n    /**\n     * @inheritDoc\n     */\n     async flush(timeout) {\n      const provider = this.traceProvider;\n      await provider?.forceFlush();\n      return super.flush(timeout);\n    }\n  }\n\n  return OpenTelemetryClient ;\n}\n/* eslint-enable @typescript-eslint/no-explicit-any */\n\n/**\n * Get the span kind from a span.\n * For whatever reason, this is not public API on the generic \"Span\" type,\n * so we need to check if we actually have a `SDKTraceBaseSpan` where we can fetch this from.\n * Otherwise, we fall back to `SpanKind.INTERNAL`.\n */\nfunction getSpanKind(span) {\n  if (spanHasKind(span)) {\n    return span.kind;\n  }\n\n  return SpanKind.INTERNAL;\n}\n\nconst SENTRY_TRACE_HEADER = 'sentry-trace';\nconst SENTRY_BAGGAGE_HEADER = 'baggage';\n\nconst SENTRY_TRACE_STATE_DSC = 'sentry.dsc';\nconst SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING = 'sentry.sampled_not_recording';\nconst SENTRY_TRACE_STATE_URL = 'sentry.url';\nconst SENTRY_TRACE_STATE_SAMPLE_RAND = 'sentry.sample_rand';\nconst SENTRY_TRACE_STATE_SAMPLE_RATE = 'sentry.sample_rate';\n\nconst SENTRY_SCOPES_CONTEXT_KEY = createContextKey('sentry_scopes');\n\nconst SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_isolation_scope');\n\nconst SENTRY_FORK_SET_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_scope');\n\nconst SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY = createContextKey('sentry_fork_set_isolation_scope');\n\nconst SCOPE_CONTEXT_FIELD = '_scopeContext';\n\n/**\n * Try to get the current scopes from the given OTEL context.\n * This requires a Context Manager that was wrapped with getWrappedContextManager.\n */\nfunction getScopesFromContext(context) {\n  return context.getValue(SENTRY_SCOPES_CONTEXT_KEY) ;\n}\n\n/**\n * Set the current scopes on an OTEL context.\n * This will return a forked context with the Propagation Context set.\n */\nfunction setScopesOnContext(context, scopes) {\n  return context.setValue(SENTRY_SCOPES_CONTEXT_KEY, scopes);\n}\n\n/**\n * Set the context on the scope so we can later look it up.\n * We need this to get the context from the scope in the `trace` functions.\n */\nfunction setContextOnScope(scope, context) {\n  addNonEnumerableProperty(scope, SCOPE_CONTEXT_FIELD, context);\n}\n\n/**\n * Get the context related to a scope.\n */\nfunction getContextFromScope(scope) {\n  return (scope )[SCOPE_CONTEXT_FIELD];\n}\n\n/**\n *\n * @param otelSpan Checks whether a given OTEL Span is an http request to sentry.\n * @returns boolean\n */\nfunction isSentryRequestSpan(span) {\n  if (!spanHasAttributes(span)) {\n    return false;\n  }\n\n  const { attributes } = span;\n\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n\n  if (!httpUrl) {\n    return false;\n  }\n\n  return isSentryRequestUrl(httpUrl.toString(), getClient());\n}\n\n/**\n * OpenTelemetry only knows about SAMPLED or NONE decision,\n * but for us it is important to differentiate between unset and unsampled.\n *\n * Both of these are identified as `traceFlags === TracegFlags.NONE`,\n * but we additionally look at a special trace state to differentiate between them.\n */\nfunction getSamplingDecision(spanContext) {\n  const { traceFlags, traceState } = spanContext;\n\n  const sampledNotRecording = traceState ? traceState.get(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING) === '1' : false;\n\n  // If trace flag is `SAMPLED`, we interpret this as sampled\n  // If it is `NONE`, it could mean either it was sampled to be not recorder, or that it was not sampled at all\n  // For us this is an important difference, sow e look at the SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING\n  // to identify which it is\n  if (traceFlags === TraceFlags.SAMPLED) {\n    return true;\n  }\n\n  if (sampledNotRecording) {\n    return false;\n  }\n\n  // Fall back to DSC as a last resort, that may also contain `sampled`...\n  const dscString = traceState ? traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n  const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n  if (dsc?.sampled === 'true') {\n    return true;\n  }\n  if (dsc?.sampled === 'false') {\n    return false;\n  }\n\n  return undefined;\n}\n\n/**\n * Infer the op & description for a set of name, attributes and kind of a span.\n */\nfunction inferSpanData(spanName, attributes, kind) {\n  // if http.method exists, this is an http request span\n  // eslint-disable-next-line deprecation/deprecation\n  const httpMethod = attributes[ATTR_HTTP_REQUEST_METHOD] || attributes[SEMATTRS_HTTP_METHOD];\n  if (httpMethod) {\n    return descriptionForHttpMethod({ attributes, name: spanName, kind }, httpMethod);\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const dbSystem = attributes[SEMATTRS_DB_SYSTEM];\n  const opIsCache =\n    typeof attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] === 'string' &&\n    attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP].startsWith('cache.');\n\n  // If db.type exists then this is a database call span\n  // If the Redis DB is used as a cache, the span description should not be changed\n  if (dbSystem && !opIsCache) {\n    return descriptionForDbSystem({ attributes, name: spanName });\n  }\n\n  const customSourceOrRoute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom' ? 'custom' : 'route';\n\n  // If rpc.service exists then this is a rpc call span.\n  // eslint-disable-next-line deprecation/deprecation\n  const rpcService = attributes[SEMATTRS_RPC_SERVICE];\n  if (rpcService) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, 'route'),\n      op: 'rpc',\n    };\n  }\n\n  // If messaging.system exists then this is a messaging system span.\n  // eslint-disable-next-line deprecation/deprecation\n  const messagingSystem = attributes[SEMATTRS_MESSAGING_SYSTEM];\n  if (messagingSystem) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: 'message',\n    };\n  }\n\n  // If faas.trigger exists then this is a function as a service span.\n  // eslint-disable-next-line deprecation/deprecation\n  const faasTrigger = attributes[SEMATTRS_FAAS_TRIGGER];\n  if (faasTrigger) {\n    return {\n      ...getUserUpdatedNameAndSource(spanName, attributes, customSourceOrRoute),\n      op: faasTrigger.toString(),\n    };\n  }\n\n  return { op: undefined, description: spanName, source: 'custom' };\n}\n\n/**\n * Extract better op/description from an otel span.\n *\n * Does not overwrite the span name if the source is already set to custom to ensure\n * that user-updated span names are preserved. In this case, we only adjust the op but\n * leave span description and source unchanged.\n *\n * Based on https://github.com/open-telemetry/opentelemetry-collector-contrib/blob/7422ce2a06337f68a59b552b8c5a2ac125d6bae5/exporter/sentryexporter/sentry_exporter.go#L306\n */\nfunction parseSpanDescription(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const name = spanHasName(span) ? span.name : '<unknown>';\n  const kind = getSpanKind(span);\n\n  return inferSpanData(name, attributes, kind);\n}\n\nfunction descriptionForDbSystem({ attributes, name }) {\n  // if we already have a custom name, we don't overwrite it but only set the op\n  const userDefinedName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  if (typeof userDefinedName === 'string') {\n    return {\n      op: 'db',\n      description: userDefinedName,\n      source: (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || 'custom',\n    };\n  }\n\n  // if we already have the source set to custom, we don't overwrite the span description but only set the op\n  if (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom') {\n    return { op: 'db', description: name, source: 'custom' };\n  }\n\n  // Use DB statement (Ex \"SELECT * FROM table\") if possible as description.\n  // eslint-disable-next-line deprecation/deprecation\n  const statement = attributes[SEMATTRS_DB_STATEMENT];\n\n  const description = statement ? statement.toString() : name;\n\n  return { op: 'db', description, source: 'task' };\n}\n\n/** Only exported for tests. */\nfunction descriptionForHttpMethod(\n  { name, kind, attributes },\n  httpMethod,\n) {\n  const opParts = ['http'];\n\n  switch (kind) {\n    case SpanKind.CLIENT:\n      opParts.push('client');\n      break;\n    case SpanKind.SERVER:\n      opParts.push('server');\n      break;\n  }\n\n  // Spans for HTTP requests we have determined to be prefetch requests will have a `.prefetch` postfix in the op\n  if (attributes['sentry.http.prefetch']) {\n    opParts.push('prefetch');\n  }\n\n  const { urlPath, url, query, fragment, hasRoute } = getSanitizedUrl(attributes, kind);\n\n  if (!urlPath) {\n    return { ...getUserUpdatedNameAndSource(name, attributes), op: opParts.join('.') };\n  }\n\n  const graphqlOperationsAttribute = attributes[SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION];\n\n  // Ex. GET /api/users\n  const baseDescription = `${httpMethod} ${urlPath}`;\n\n  // When the http span has a graphql operation, append it to the description\n  // We add these in the graphqlIntegration\n  const inferredDescription = graphqlOperationsAttribute\n    ? `${baseDescription} (${getGraphqlOperationNamesFromAttribute(graphqlOperationsAttribute)})`\n    : baseDescription;\n\n  // If `httpPath` is a root path, then we can categorize the transaction source as route.\n  const inferredSource = hasRoute || urlPath === '/' ? 'route' : 'url';\n\n  const data = {};\n\n  if (url) {\n    data.url = url;\n  }\n  if (query) {\n    data['http.query'] = query;\n  }\n  if (fragment) {\n    data['http.fragment'] = fragment;\n  }\n\n  // If the span kind is neither client nor server, we use the original name\n  // this infers that somebody manually started this span, in which case we don't want to overwrite the name\n  const isClientOrServerKind = kind === SpanKind.CLIENT || kind === SpanKind.SERVER;\n\n  // If the span is an auto-span (=it comes from one of our instrumentations),\n  // we always want to infer the name\n  // this is necessary because some of the auto-instrumentation we use uses kind=INTERNAL\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] || 'manual';\n  const isManualSpan = !`${origin}`.startsWith('auto');\n\n  // If users (or in very rare occasions we) set the source to custom, we don't overwrite the name\n  const alreadyHasCustomSource = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] === 'custom';\n  const customSpanName = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  const useInferredDescription =\n    !alreadyHasCustomSource && customSpanName == null && (isClientOrServerKind || !isManualSpan);\n\n  const { description, source } = useInferredDescription\n    ? { description: inferredDescription, source: inferredSource }\n    : getUserUpdatedNameAndSource(name, attributes);\n\n  return {\n    op: opParts.join('.'),\n    description,\n    source,\n    data,\n  };\n}\n\nfunction getGraphqlOperationNamesFromAttribute(attr) {\n  if (Array.isArray(attr)) {\n    const sorted = attr.slice().sort();\n\n    // Up to 5 items, we just add all of them\n    if (sorted.length <= 5) {\n      return sorted.join(', ');\n    } else {\n      // Else, we add the first 5 and the diff of other operations\n      return `${sorted.slice(0, 5).join(', ')}, +${sorted.length - 5}`;\n    }\n  }\n\n  return `${attr}`;\n}\n\n/** Exported for tests only */\nfunction getSanitizedUrl(\n  attributes,\n  kind,\n)\n\n {\n  // This is the relative path of the URL, e.g. /sub\n  // eslint-disable-next-line deprecation/deprecation\n  const httpTarget = attributes[SEMATTRS_HTTP_TARGET];\n  // This is the full URL, including host & query params etc., e.g. https://example.com/sub?foo=bar\n  // eslint-disable-next-line deprecation/deprecation\n  const httpUrl = attributes[SEMATTRS_HTTP_URL] || attributes[ATTR_URL_FULL];\n  // This is the normalized route name - may not always be available!\n  const httpRoute = attributes[ATTR_HTTP_ROUTE];\n\n  const parsedUrl = typeof httpUrl === 'string' ? parseUrl(httpUrl) : undefined;\n  const url = parsedUrl ? getSanitizedUrlString(parsedUrl) : undefined;\n  const query = parsedUrl?.search || undefined;\n  const fragment = parsedUrl?.hash || undefined;\n\n  if (typeof httpRoute === 'string') {\n    return { urlPath: httpRoute, url, query, fragment, hasRoute: true };\n  }\n\n  if (kind === SpanKind.SERVER && typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  if (parsedUrl) {\n    return { urlPath: url, url, query, fragment, hasRoute: false };\n  }\n\n  // fall back to target even for client spans, if no URL is present\n  if (typeof httpTarget === 'string') {\n    return { urlPath: stripUrlQueryAndFragment(httpTarget), url, query, fragment, hasRoute: false };\n  }\n\n  return { urlPath: undefined, url, query, fragment, hasRoute: false };\n}\n\n/**\n * Because Otel instrumentation sometimes mutates span names via `span.updateName`, the only way\n * to ensure that a user-set span name is preserved is to store it as a tmp attribute on the span.\n * We delete this attribute once we're done with it when preparing the event envelope.\n *\n * This temp attribute always takes precedence over the original name.\n *\n * We also need to take care of setting the correct source. Users can always update the source\n * after updating the name, so we need to respect that.\n *\n * @internal exported only for testing\n */\nfunction getUserUpdatedNameAndSource(\n  originalName,\n  attributes,\n  fallbackSource = 'custom',\n)\n\n {\n  const source = (attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ) || fallbackSource;\n  const description = attributes[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n\n  if (description && typeof description === 'string') {\n    return {\n      description,\n      source,\n    };\n  }\n\n  return { description: originalName, source };\n}\n\n/**\n * Setup a DSC handler on the passed client,\n * ensuring that the transaction name is inferred from the span correctly.\n */\nfunction enhanceDscWithOpenTelemetryRootSpanName(client) {\n  client.on('createDsc', (dsc, rootSpan) => {\n    if (!rootSpan) {\n      return;\n    }\n\n    // We want to overwrite the transaction on the DSC that is created by default in core\n    // The reason for this is that we want to infer the span name, not use the initial one\n    // Otherwise, we'll get names like \"GET\" instead of e.g. \"GET /foo\"\n    // `parseSpanDescription` takes the attributes of the span into account for the name\n    // This mutates the passed-in DSC\n\n    const jsonSpan = spanToJSON(rootSpan);\n    const attributes = jsonSpan.data;\n    const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE];\n\n    const { description } = spanHasName(rootSpan) ? parseSpanDescription(rootSpan) : { description: undefined };\n    if (source !== 'url' && description) {\n      dsc.transaction = description;\n    }\n\n    // Also ensure sampling decision is correctly inferred\n    // In core, we use `spanIsSampled`, which just looks at the trace flags\n    // but in OTEL, we use a slightly more complex logic to be able to differntiate between unsampled and deferred sampling\n    if (hasSpansEnabled()) {\n      const sampled = getSamplingDecision(rootSpan.spanContext());\n      dsc.sampled = sampled == undefined ? undefined : String(sampled);\n    }\n  });\n}\n\n/**\n * Returns the currently active span.\n */\nfunction getActiveSpan() {\n  return trace.getActiveSpan();\n}\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nconst DEBUG_BUILD = (typeof __SENTRY_DEBUG__ === 'undefined' || __SENTRY_DEBUG__);\n\n/**\n * Generate a TraceState for the given data.\n */\nfunction makeTraceState({\n  dsc,\n  sampled,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const dscString = dsc ? dynamicSamplingContextToSentryBaggageHeader(dsc) : undefined;\n\n  const traceStateBase = new TraceState();\n\n  const traceStateWithDsc = dscString ? traceStateBase.set(SENTRY_TRACE_STATE_DSC, dscString) : traceStateBase;\n\n  // We also specifically want to store if this is sampled to be not recording,\n  // or unsampled (=could be either sampled or not)\n  return sampled === false ? traceStateWithDsc.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') : traceStateWithDsc;\n}\n\nconst setupElements = new Set();\n\n/** Get all the OpenTelemetry elements that have been set up. */\nfunction openTelemetrySetupCheck() {\n  return Array.from(setupElements);\n}\n\n/** Mark an OpenTelemetry element as setup. */\nfunction setIsSetup(element) {\n  setupElements.add(element);\n}\n\n/**\n * Injects and extracts `sentry-trace` and `baggage` headers from carriers.\n */\nclass SentryPropagator extends W3CBaggagePropagator {\n  /** A map of URLs that have already been checked for if they match tracePropagationTargets. */\n\n   constructor() {\n    super();\n    setIsSetup('SentryPropagator');\n\n    // We're caching results so we don't have to recompute regexp every time we create a request.\n    this._urlMatchesTargetsMap = new LRUMap(100);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   inject(context, carrier, setter) {\n    if (isTracingSuppressed(context)) {\n      DEBUG_BUILD && logger.log('[Tracing] Not injecting trace data for url because tracing is suppressed.');\n      return;\n    }\n\n    const activeSpan = trace.getSpan(context);\n    const url = activeSpan && getCurrentURL(activeSpan);\n\n    const tracePropagationTargets = getClient()?.getOptions()?.tracePropagationTargets;\n    if (!shouldPropagateTraceForUrl(url, tracePropagationTargets, this._urlMatchesTargetsMap)) {\n      DEBUG_BUILD &&\n        logger.log(\n          '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:',\n          url,\n        );\n      return;\n    }\n\n    const existingBaggageHeader = getExistingBaggage(carrier);\n    let baggage = propagation.getBaggage(context) || propagation.createBaggage({});\n\n    const { dynamicSamplingContext, traceId, spanId, sampled } = getInjectionData(context);\n\n    if (existingBaggageHeader) {\n      const baggageEntries = parseBaggageHeader(existingBaggageHeader);\n\n      if (baggageEntries) {\n        Object.entries(baggageEntries).forEach(([key, value]) => {\n          baggage = baggage.setEntry(key, { value });\n        });\n      }\n    }\n\n    if (dynamicSamplingContext) {\n      baggage = Object.entries(dynamicSamplingContext).reduce((b, [dscKey, dscValue]) => {\n        if (dscValue) {\n          return b.setEntry(`${SENTRY_BAGGAGE_KEY_PREFIX}${dscKey}`, { value: dscValue });\n        }\n        return b;\n      }, baggage);\n    }\n\n    // We also want to avoid setting the default OTEL trace ID, if we get that for whatever reason\n    if (traceId && traceId !== INVALID_TRACEID) {\n      setter.set(carrier, SENTRY_TRACE_HEADER, generateSentryTraceHeader(traceId, spanId, sampled));\n    }\n\n    super.inject(propagation.setBaggage(context, baggage), carrier, setter);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   extract(context, carrier, getter) {\n    const maybeSentryTraceHeader = getter.get(carrier, SENTRY_TRACE_HEADER);\n    const baggage = getter.get(carrier, SENTRY_BAGGAGE_HEADER);\n\n    const sentryTrace = maybeSentryTraceHeader\n      ? Array.isArray(maybeSentryTraceHeader)\n        ? maybeSentryTraceHeader[0]\n        : maybeSentryTraceHeader\n      : undefined;\n\n    // Add remote parent span context\n    // If there is no incoming trace, this will return the context as-is\n    return ensureScopesOnContext(getContextWithRemoteActiveSpan(context, { sentryTrace, baggage }));\n  }\n\n  /**\n   * @inheritDoc\n   */\n   fields() {\n    return [SENTRY_TRACE_HEADER, SENTRY_BAGGAGE_HEADER];\n  }\n}\n\nconst NOT_PROPAGATED_MESSAGE =\n  '[Tracing] Not injecting trace data for url because it does not match tracePropagationTargets:';\n\n/**\n * Check if a given URL should be propagated to or not.\n * If no url is defined, or no trace propagation targets are defined, this will always return `true`.\n * You can also optionally provide a decision map, to cache decisions and avoid repeated regex lookups.\n */\nfunction shouldPropagateTraceForUrl(\n  url,\n  tracePropagationTargets,\n  decisionMap,\n) {\n  if (typeof url !== 'string' || !tracePropagationTargets) {\n    return true;\n  }\n\n  const cachedDecision = decisionMap?.get(url);\n  if (cachedDecision !== undefined) {\n    DEBUG_BUILD && !cachedDecision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n    return cachedDecision;\n  }\n\n  const decision = stringMatchesSomePattern(url, tracePropagationTargets);\n  decisionMap?.set(url, decision);\n\n  DEBUG_BUILD && !decision && logger.log(NOT_PROPAGATED_MESSAGE, url);\n  return decision;\n}\n\n/**\n * Get propagation injection data for the given context.\n */\nfunction getInjectionData(context)\n\n {\n  const span = trace.getSpan(context);\n\n  // If we have a remote span, the spanId should be considered as the parentSpanId, not spanId itself\n  // Instead, we use a virtual (generated) spanId for propagation\n  if (span?.spanContext().isRemote) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: undefined,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // If we have a local span, we just use this\n  if (span) {\n    const spanContext = span.spanContext();\n    const dynamicSamplingContext = getDynamicSamplingContextFromSpan(span);\n\n    return {\n      dynamicSamplingContext,\n      traceId: spanContext.traceId,\n      spanId: spanContext.spanId,\n      sampled: getSamplingDecision(spanContext), // TODO: Do we need to change something here?\n    };\n  }\n\n  // Else we try to use the propagation context from the scope\n  // The only scenario where this should happen is when we neither have a span, nor an incoming trace\n  const scope = getScopesFromContext(context)?.scope || getCurrentScope();\n  const client = getClient();\n\n  const propagationContext = scope.getPropagationContext();\n  const dynamicSamplingContext = client ? getDynamicSamplingContextFromScope(client, scope) : undefined;\n  return {\n    dynamicSamplingContext,\n    traceId: propagationContext.traceId,\n    spanId: propagationContext.propagationSpanId,\n    sampled: propagationContext.sampled,\n  };\n}\n\nfunction getContextWithRemoteActiveSpan(\n  ctx,\n  { sentryTrace, baggage },\n) {\n  const propagationContext = propagationContextFromHeaders(sentryTrace, baggage);\n\n  const { traceId, parentSpanId, sampled, dsc } = propagationContext;\n\n  // We only want to set the virtual span if we are continuing a concrete trace\n  // Otherwise, we ignore the incoming trace here, e.g. if we have no trace headers\n  if (!parentSpanId) {\n    return ctx;\n  }\n\n  const spanContext = generateRemoteSpanContext({\n    traceId,\n    spanId: parentSpanId,\n    sampled,\n    dsc,\n  });\n\n  return trace.setSpanContext(ctx, spanContext);\n}\n\n/**\n * Takes trace strings and propagates them as a remote active span.\n * This should be used in addition to `continueTrace` in OTEL-powered environments.\n */\nfunction continueTraceAsRemoteSpan(\n  ctx,\n  options,\n  callback,\n) {\n  const ctxWithSpanContext = ensureScopesOnContext(getContextWithRemoteActiveSpan(ctx, options));\n\n  return context.with(ctxWithSpanContext, callback);\n}\n\nfunction ensureScopesOnContext(ctx) {\n  // If there are no scopes yet on the context, ensure we have them\n  const scopes = getScopesFromContext(ctx);\n  const newScopes = {\n    // If we have no scope here, this is most likely either the root context or a context manually derived from it\n    // In this case, we want to fork the current scope, to ensure we do not pollute the root scope\n    scope: scopes ? scopes.scope : getCurrentScope().clone(),\n    isolationScope: scopes ? scopes.isolationScope : getIsolationScope(),\n  };\n\n  return setScopesOnContext(ctx, newScopes);\n}\n\n/** Try to get the existing baggage header so we can merge this in. */\nfunction getExistingBaggage(carrier) {\n  try {\n    const baggage = (carrier )[SENTRY_BAGGAGE_HEADER];\n    return Array.isArray(baggage) ? baggage.join(',') : baggage;\n  } catch {\n    return undefined;\n  }\n}\n\n/**\n * It is pretty tricky to get access to the outgoing request URL of a request in the propagator.\n * As we only have access to the context of the span to be sent and the carrier (=headers),\n * but the span may be unsampled and thus have no attributes.\n *\n * So we use the following logic:\n * 1. If we have an active span, we check if it has a URL attribute.\n * 2. Else, if the active span has no URL attribute (e.g. it is unsampled), we check a special trace state (which we set in our sampler).\n */\nfunction getCurrentURL(span) {\n  const spanData = spanToJSON(span).data;\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const urlAttribute = spanData[SEMATTRS_HTTP_URL] || spanData[ATTR_URL_FULL];\n  if (typeof urlAttribute === 'string') {\n    return urlAttribute;\n  }\n\n  // Also look at the traceState, which we may set in the sampler even for unsampled spans\n  const urlTraceState = span.spanContext().traceState?.get(SENTRY_TRACE_STATE_URL);\n  if (urlTraceState) {\n    return urlTraceState;\n  }\n\n  return undefined;\n}\n\nfunction generateRemoteSpanContext({\n  spanId,\n  traceId,\n  sampled,\n  dsc,\n}\n\n) {\n  // We store the DSC as OTEL trace state on the span context\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanContext = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  return spanContext;\n}\n\n/**\n * Wraps a function with a transaction/span and finishes the span after the function is done.\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * If you want to create a span that is not set as active, use {@link startInactiveSpan}.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpan(options, callback) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n        () => span.end(),\n      );\n    });\n  });\n}\n\n/**\n * Similar to `Sentry.startSpan`. Wraps a function with a span, but does not finish the span\n * after the function is done automatically. You'll have to call `span.end()` manually.\n *\n * The created span is the active span and will be used as parent by other spans created inside the function\n * and can be accessed via `Sentry.getActiveSpan()`, as long as the function is executed while the scope is active.\n *\n * You'll always get a span passed to the callback,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startSpanManual(\n  options,\n  callback,\n) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    return tracer.startActiveSpan(name, spanOptions, ctx, span => {\n      return handleCallbackErrors(\n        () => callback(span, () => span.end()),\n        () => {\n          // Only set the span status to ERROR when there wasn't any status set before, in order to avoid stomping useful span statuses\n          if (spanToJSON(span).status === undefined) {\n            span.setStatus({ code: SpanStatusCode.ERROR });\n          }\n        },\n      );\n    });\n  });\n}\n\n/**\n * Creates a span. This span is not set as active, so will not get automatic instrumentation spans\n * as children or be able to be accessed via `Sentry.getActiveSpan()`.\n *\n * If you want to create a span that is set as active, use {@link startSpan}.\n *\n * This function will always return a span,\n * it may just be a non-recording span if the span is not sampled or if tracing is disabled.\n */\nfunction startInactiveSpan(options) {\n  const tracer = getTracer();\n\n  const { name, parentSpan: customParentSpan } = options;\n\n  // If `options.parentSpan` is defined, we want to wrap the callback in `withActiveSpan`\n  const wrapper = getActiveSpanWrapper(customParentSpan);\n\n  return wrapper(() => {\n    const activeCtx = getContext(options.scope, options.forceTransaction);\n    const shouldSkipSpan = options.onlyIfParent && !trace.getSpan(activeCtx);\n    const ctx = shouldSkipSpan ? suppressTracing$1(activeCtx) : activeCtx;\n\n    const spanOptions = getSpanOptions(options);\n\n    const span = tracer.startSpan(name, spanOptions, ctx);\n\n    return span;\n  });\n}\n\n/**\n * Forks the current scope and sets the provided span as active span in the context of the provided callback. Can be\n * passed `null` to start an entirely new span tree.\n *\n * @param span Spans started in the context of the provided callback will be children of this span. If `null` is passed,\n * spans started within the callback will be root spans.\n * @param callback Execution context in which the provided span will be active. Is passed the newly forked scope.\n * @returns the value returned from the provided callback function.\n */\nfunction withActiveSpan(span, callback) {\n  const newContextWithActiveSpan = span ? trace.setSpan(context.active(), span) : trace.deleteSpan(context.active());\n  return context.with(newContextWithActiveSpan, () => callback(getCurrentScope()));\n}\n\nfunction getTracer() {\n  const client = getClient();\n  return client?.tracer || trace.getTracer('@sentry/opentelemetry', SDK_VERSION);\n}\n\nfunction getSpanOptions(options) {\n  const { startTime, attributes, kind, op, links } = options;\n\n  // OTEL expects timestamps in ms, not seconds\n  const fixedStartTime = typeof startTime === 'number' ? ensureTimestampInMilliseconds(startTime) : startTime;\n\n  return {\n    attributes: op\n      ? {\n          [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n          ...attributes,\n        }\n      : attributes,\n    kind,\n    links,\n    startTime: fixedStartTime,\n  };\n}\n\nfunction ensureTimestampInMilliseconds(timestamp) {\n  const isMs = timestamp < 9999999999;\n  return isMs ? timestamp * 1000 : timestamp;\n}\n\nfunction getContext(scope, forceTransaction) {\n  const ctx = getContextForScope(scope);\n  const parentSpan = trace.getSpan(ctx);\n\n  // In the case that we have no parent span, we start a new trace\n  // Note that if we continue a trace, we'll always have a remote parent span here anyhow\n  if (!parentSpan) {\n    return ctx;\n  }\n\n  // If we don't want to force a transaction, and we have a parent span, all good, we just return as-is!\n  if (!forceTransaction) {\n    return ctx;\n  }\n\n  // Else, if we do have a parent span but want to force a transaction, we have to simulate a \"root\" context\n\n  // Else, we need to do two things:\n  // 1. Unset the parent span from the context, so we'll create a new root span\n  // 2. Ensure the propagation context is correct, so we'll continue from the parent span\n  const ctxWithoutSpan = trace.deleteSpan(ctx);\n\n  const { spanId, traceId } = parentSpan.spanContext();\n  const sampled = getSamplingDecision(parentSpan.spanContext());\n\n  // In this case, when we are forcing a transaction, we want to treat this like continuing an incoming trace\n  // so we set the traceState according to the root span\n  const rootSpan = getRootSpan(parentSpan);\n  const dsc = getDynamicSamplingContextFromSpan(rootSpan);\n\n  const traceState = makeTraceState({\n    dsc,\n    sampled,\n  });\n\n  const spanOptions = {\n    traceId,\n    spanId,\n    isRemote: true,\n    traceFlags: sampled ? TraceFlags.SAMPLED : TraceFlags.NONE,\n    traceState,\n  };\n\n  const ctxWithSpanContext = trace.setSpanContext(ctxWithoutSpan, spanOptions);\n\n  return ctxWithSpanContext;\n}\n\nfunction getContextForScope(scope) {\n  if (scope) {\n    const ctx = getContextFromScope(scope);\n    if (ctx) {\n      return ctx;\n    }\n  }\n\n  return context.active();\n}\n\n/**\n * Continue a trace from `sentry-trace` and `baggage` values.\n * These values can be obtained from incoming request headers, or in the browser from `<meta name=\"sentry-trace\">`\n * and `<meta name=\"baggage\">` HTML tags.\n *\n * Spans started with `startSpan`, `startSpanManual` and `startInactiveSpan`, within the callback will automatically\n * be attached to the incoming trace.\n *\n * This is a custom version of `continueTrace` that is used in OTEL-powered environments.\n * It propagates the trace as a remote span, in addition to setting it on the propagation context.\n */\nfunction continueTrace(options, callback) {\n  return continueTraceAsRemoteSpan(context.active(), options, callback);\n}\n\n/**\n * Get the trace context for a given scope.\n * We have a custom implemention here because we need an OTEL-specific way to get the span from a scope.\n */\nfunction getTraceContextForScope(\n  client,\n  scope,\n) {\n  const ctx = getContextFromScope(scope);\n  const span = ctx && trace.getSpan(ctx);\n\n  const traceContext = span ? spanToTraceContext(span) : getTraceContextFromScope(scope);\n\n  const dynamicSamplingContext = span\n    ? getDynamicSamplingContextFromSpan(span)\n    : getDynamicSamplingContextFromScope(client, scope);\n  return [dynamicSamplingContext, traceContext];\n}\n\nfunction getActiveSpanWrapper(parentSpan) {\n  return parentSpan !== undefined\n    ? (callback) => {\n        return withActiveSpan(parentSpan, callback);\n      }\n    : (callback) => callback();\n}\n\n/** Suppress tracing in the given callback, ensuring no spans are generated inside of it. */\nfunction suppressTracing(callback) {\n  const ctx = suppressTracing$1(context.active());\n  return context.with(ctx, callback);\n}\n\n/** Ensure the `trace` context is set on all events. */\nfunction setupEventContextTrace(client) {\n  client.on('preprocessEvent', event => {\n    const span = getActiveSpan();\n    // For transaction events, this is handled separately\n    // Because the active span may not be the span that is actually the transaction event\n    if (!span || event.type === 'transaction') {\n      return;\n    }\n\n    // If event has already set `trace` context, use that one.\n    event.contexts = {\n      trace: spanToTraceContext(span),\n      ...event.contexts,\n    };\n\n    const rootSpan = getRootSpan(span);\n\n    event.sdkProcessingMetadata = {\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(rootSpan),\n      ...event.sdkProcessingMetadata,\n    };\n\n    return event;\n  });\n}\n\n/**\n * Otel-specific implementation of `getTraceData`.\n * @see `@sentry/core` version of `getTraceData` for more information\n */\nfunction getTraceData({ span } = {}) {\n  let ctx = api.context.active();\n\n  if (span) {\n    const { scope } = getCapturedScopesOnSpan(span);\n    // fall back to current context if for whatever reason we can't find the one of the span\n    ctx = (scope && getContextFromScope(scope)) || api.trace.setSpan(api.context.active(), span);\n  }\n\n  const { traceId, spanId, sampled, dynamicSamplingContext } = getInjectionData(ctx);\n\n  return {\n    'sentry-trace': generateSentryTraceHeader(traceId, spanId, sampled),\n    baggage: dynamicSamplingContextToSentryBaggageHeader(dynamicSamplingContext),\n  };\n}\n\n/**\n * Sets the async context strategy to use follow the OTEL context under the hood.\n * We handle forking a hub inside of our custom OTEL Context Manager (./otelContextManager.ts)\n */\nfunction setOpenTelemetryContextAsyncContextStrategy() {\n  function getScopes() {\n    const ctx = api.context.active();\n    const scopes = getScopesFromContext(ctx);\n\n    if (scopes) {\n      return scopes;\n    }\n\n    // fallback behavior:\n    // if, for whatever reason, we can't find scopes on the context here, we have to fix this somehow\n    return {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  function withScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    // as by default, we don't want to fork this, unless triggered explicitly by `withScope`\n    return api.context.with(ctx, () => {\n      return callback(getCurrentScope());\n    });\n  }\n\n  function withSetScope(scope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_SET_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which picks up this scope as the current scope\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY, scope), () => {\n      return callback(scope);\n    });\n  }\n\n  function withIsolationScope(callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY, true), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function withSetIsolationScope(isolationScope, callback) {\n    const ctx = api.context.active();\n\n    // We depend on the otelContextManager to handle the context/hub\n    // We set the `SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY` context value, which is picked up by\n    // the OTEL context manager, which uses the presence of this key to determine if it should\n    // fork the isolation scope, or not\n    return api.context.with(ctx.setValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY, isolationScope), () => {\n      return callback(getIsolationScope());\n    });\n  }\n\n  function getCurrentScope() {\n    return getScopes().scope;\n  }\n\n  function getIsolationScope() {\n    return getScopes().isolationScope;\n  }\n\n  setAsyncContextStrategy({\n    withScope,\n    withSetScope,\n    withSetIsolationScope,\n    withIsolationScope,\n    getCurrentScope,\n    getIsolationScope,\n    startSpan,\n    startSpanManual,\n    startInactiveSpan,\n    getActiveSpan,\n    suppressTracing,\n    getTraceData,\n    continueTrace,\n    // The types here don't fully align, because our own `Span` type is narrower\n    // than the OTEL one - but this is OK for here, as we now we'll only have OTEL spans passed around\n    withActiveSpan: withActiveSpan ,\n  });\n}\n\n/**\n * Wrap an OpenTelemetry ContextManager in a way that ensures the context is kept in sync with the Sentry Scope.\n *\n * Usage:\n * import { AsyncLocalStorageContextManager } from '@opentelemetry/context-async-hooks';\n * const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n * const contextManager = new SentryContextManager();\n */\nfunction wrapContextManagerClass(\n  ContextManagerClass,\n) {\n  /**\n   * This is a custom ContextManager for OpenTelemetry, which extends the default AsyncLocalStorageContextManager.\n   * It ensures that we create new scopes per context, so that the OTEL Context & the Sentry Scope are always in sync.\n   *\n   * Note that we currently only support AsyncHooks with this,\n   * but since this should work for Node 14+ anyhow that should be good enough.\n   */\n\n  // @ts-expect-error TS does not like this, but we know this is fine\n  class SentryContextManager extends ContextManagerClass {\n     constructor(...args) {\n      super(...args);\n      setIsSetup('SentryContextManager');\n    }\n    /**\n     * Overwrite with() of the original AsyncLocalStorageContextManager\n     * to ensure we also create new scopes per context.\n     */\n     with(\n      context,\n      fn,\n      thisArg,\n      ...args\n    ) {\n      const currentScopes = getScopesFromContext(context);\n      const currentScope = currentScopes?.scope || getCurrentScope();\n      const currentIsolationScope = currentScopes?.isolationScope || getIsolationScope();\n\n      const shouldForkIsolationScope = context.getValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY) === true;\n      const scope = context.getValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY) ;\n      const isolationScope = context.getValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY) ;\n\n      const newCurrentScope = scope || currentScope.clone();\n      const newIsolationScope =\n        isolationScope || (shouldForkIsolationScope ? currentIsolationScope.clone() : currentIsolationScope);\n      const scopes = { scope: newCurrentScope, isolationScope: newIsolationScope };\n\n      const ctx1 = setScopesOnContext(context, scopes);\n\n      // Remove the unneeded values again\n      const ctx2 = ctx1\n        .deleteValue(SENTRY_FORK_ISOLATION_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_SCOPE_CONTEXT_KEY)\n        .deleteValue(SENTRY_FORK_SET_ISOLATION_SCOPE_CONTEXT_KEY);\n\n      setContextOnScope(newCurrentScope, ctx2);\n\n      return super.with(ctx2, fn, thisArg, ...args);\n    }\n  }\n\n  return SentryContextManager ;\n}\n\n/**\n * This function runs through a list of OTEL Spans, and wraps them in an `SpanNode`\n * where each node holds a reference to their parent node.\n */\nfunction groupSpansWithParents(spans) {\n  const nodeMap = new Map();\n\n  for (const span of spans) {\n    createOrUpdateSpanNodeAndRefs(nodeMap, span);\n  }\n\n  return Array.from(nodeMap, function ([_id, spanNode]) {\n    return spanNode;\n  });\n}\n\n/**\n * This returns the _local_ parent ID - `parentId` on the span may point to a remote span.\n */\nfunction getLocalParentId(span) {\n  const parentIsRemote = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE] === true;\n  // If the parentId is the trace parent ID, we pretend it's undefined\n  // As this means the parent exists somewhere else\n  return !parentIsRemote ? getParentSpanId(span) : undefined;\n}\n\nfunction createOrUpdateSpanNodeAndRefs(nodeMap, span) {\n  const id = span.spanContext().spanId;\n  const parentId = getLocalParentId(span);\n\n  if (!parentId) {\n    createOrUpdateNode(nodeMap, { id, span, children: [] });\n    return;\n  }\n\n  // Else make sure to create parent node as well\n  // Note that the parent may not know it's parent _yet_, this may be updated in a later pass\n  const parentNode = createOrGetParentNode(nodeMap, parentId);\n  const node = createOrUpdateNode(nodeMap, { id, span, parentNode, children: [] });\n  parentNode.children.push(node);\n}\n\nfunction createOrGetParentNode(nodeMap, id) {\n  const existing = nodeMap.get(id);\n\n  if (existing) {\n    return existing;\n  }\n\n  return createOrUpdateNode(nodeMap, { id, children: [] });\n}\n\nfunction createOrUpdateNode(nodeMap, spanNode) {\n  const existing = nodeMap.get(spanNode.id);\n\n  // If span is already set, nothing to do here\n  if (existing?.span) {\n    return existing;\n  }\n\n  // If it exists but span is not set yet, we update it\n  if (existing && !existing.span) {\n    existing.span = spanNode.span;\n    existing.parentNode = spanNode.parentNode;\n    return existing;\n  }\n\n  // Else, we create a new one...\n  nodeMap.set(spanNode.id, spanNode);\n  return spanNode;\n}\n\n// canonicalCodesGrpcMap maps some GRPC codes to Sentry's span statuses. See description in grpc documentation.\nconst canonicalGrpcErrorCodesMap = {\n  '1': 'cancelled',\n  '2': 'unknown_error',\n  '3': 'invalid_argument',\n  '4': 'deadline_exceeded',\n  '5': 'not_found',\n  '6': 'already_exists',\n  '7': 'permission_denied',\n  '8': 'resource_exhausted',\n  '9': 'failed_precondition',\n  '10': 'aborted',\n  '11': 'out_of_range',\n  '12': 'unimplemented',\n  '13': 'internal_error',\n  '14': 'unavailable',\n  '15': 'data_loss',\n  '16': 'unauthenticated',\n} ;\n\nconst isStatusErrorMessageValid = (message) => {\n  return Object.values(canonicalGrpcErrorCodesMap).includes(message );\n};\n\n/**\n * Get a Sentry span status from an otel span.\n */\nfunction mapStatus(span) {\n  const attributes = spanHasAttributes(span) ? span.attributes : {};\n  const status = spanHasStatus(span) ? span.status : undefined;\n\n  if (status) {\n    // Since span status OK is not set by default, we give it priority: https://opentelemetry.io/docs/concepts/signals/traces/#span-status\n    if (status.code === SpanStatusCode.OK) {\n      return { code: SPAN_STATUS_OK };\n      // If the span is already marked as erroneous we return that exact status\n    } else if (status.code === SpanStatusCode.ERROR) {\n      if (typeof status.message === 'undefined') {\n        const inferredStatus = inferStatusFromAttributes(attributes);\n        if (inferredStatus) {\n          return inferredStatus;\n        }\n      }\n\n      if (status.message && isStatusErrorMessageValid(status.message)) {\n        return { code: SPAN_STATUS_ERROR, message: status.message };\n      } else {\n        return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n      }\n    }\n  }\n\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n  const inferredStatus = inferStatusFromAttributes(attributes);\n\n  if (inferredStatus) {\n    return inferredStatus;\n  }\n\n  // We default to setting the spans status to ok.\n  if (status?.code === SpanStatusCode.UNSET) {\n    return { code: SPAN_STATUS_OK };\n  } else {\n    return { code: SPAN_STATUS_ERROR, message: 'unknown_error' };\n  }\n}\n\nfunction inferStatusFromAttributes(attributes) {\n  // If the span status is UNSET, we try to infer it from HTTP or GRPC status codes.\n\n  // eslint-disable-next-line deprecation/deprecation\n  const httpCodeAttribute = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE] || attributes[SEMATTRS_HTTP_STATUS_CODE];\n  // eslint-disable-next-line deprecation/deprecation\n  const grpcCodeAttribute = attributes[SEMATTRS_RPC_GRPC_STATUS_CODE];\n\n  const numberHttpCode =\n    typeof httpCodeAttribute === 'number'\n      ? httpCodeAttribute\n      : typeof httpCodeAttribute === 'string'\n        ? parseInt(httpCodeAttribute)\n        : undefined;\n\n  if (typeof numberHttpCode === 'number') {\n    return getSpanStatusFromHttpCode(numberHttpCode);\n  }\n\n  if (typeof grpcCodeAttribute === 'string') {\n    return { code: SPAN_STATUS_ERROR, message: canonicalGrpcErrorCodesMap[grpcCodeAttribute] || 'unknown_error' };\n  }\n\n  return undefined;\n}\n\nconst MAX_SPAN_COUNT = 1000;\nconst DEFAULT_TIMEOUT = 300; // 5 min\n\n/**\n * A Sentry-specific exporter that converts OpenTelemetry Spans to Sentry Spans & Transactions.\n */\nclass SentrySpanExporter {\n\n  /*\n   * A quick explanation on the buckets: We do bucketing of finished spans for efficiency. This span exporter is\n   * accumulating spans until a root span is encountered and then it flushes all the spans that are descendants of that\n   * root span. Because it is totally in the realm of possibilities that root spans are never finished, and we don't\n   * want to accumulate spans indefinitely in memory, we need to periodically evacuate spans. Naively we could simply\n   * store the spans in an array and each time a new span comes in we could iterate through the entire array and\n   * evacuate all spans that have an end-timestamp that is older than our limit. This could get quite expensive because\n   * we would have to iterate a potentially large number of spans every time we evacuate. We want to avoid these large\n   * bursts of computation.\n   *\n   * Instead we go for a bucketing approach and put spans into buckets, based on what second\n   * (modulo the time limit) the span was put into the exporter. With buckets, when we decide to evacuate, we can\n   * iterate through the bucket entries instead, which have an upper bound of items, making the evacuation much more\n   * efficient. Cleaning up also becomes much more efficient since it simply involves de-referencing a bucket within the\n   * bucket array, and letting garbage collection take care of the rest.\n   */\n\n   constructor(options\n\n) {\n    this._finishedSpanBucketSize = options?.timeout || DEFAULT_TIMEOUT;\n    this._finishedSpanBuckets = new Array(this._finishedSpanBucketSize).fill(undefined);\n    this._lastCleanupTimestampInS = Math.floor(Date.now() / 1000);\n    this._spansToBucketEntry = new WeakMap();\n  }\n\n  /** Export a single span. */\n   export(span) {\n    const currentTimestampInS = Math.floor(Date.now() / 1000);\n\n    if (this._lastCleanupTimestampInS !== currentTimestampInS) {\n      let droppedSpanCount = 0;\n      this._finishedSpanBuckets.forEach((bucket, i) => {\n        if (bucket && bucket.timestampInS <= currentTimestampInS - this._finishedSpanBucketSize) {\n          droppedSpanCount += bucket.spans.size;\n          this._finishedSpanBuckets[i] = undefined;\n        }\n      });\n      if (droppedSpanCount > 0) {\n        DEBUG_BUILD &&\n          logger.log(\n            `SpanExporter dropped ${droppedSpanCount} spans because they were pending for more than ${this._finishedSpanBucketSize} seconds.`,\n          );\n      }\n      this._lastCleanupTimestampInS = currentTimestampInS;\n    }\n\n    const currentBucketIndex = currentTimestampInS % this._finishedSpanBucketSize;\n    const currentBucket = this._finishedSpanBuckets[currentBucketIndex] || {\n      timestampInS: currentTimestampInS,\n      spans: new Set(),\n    };\n    this._finishedSpanBuckets[currentBucketIndex] = currentBucket;\n    currentBucket.spans.add(span);\n    this._spansToBucketEntry.set(span, currentBucket);\n\n    // If the span doesn't have a local parent ID (it's a root span), we're gonna flush all the ended spans\n    if (!getLocalParentId(span)) {\n      this._clearTimeout();\n\n      // If we got a parent span, we try to send the span tree\n      // Wait a tick for this, to ensure we avoid race conditions\n      this._flushTimeout = setTimeout(() => {\n        this.flush();\n      }, 1);\n    }\n  }\n\n  /** Try to flush any pending spans immediately. */\n   flush() {\n    this._clearTimeout();\n\n    const finishedSpans = [];\n    this._finishedSpanBuckets.forEach(bucket => {\n      if (bucket) {\n        finishedSpans.push(...bucket.spans);\n      }\n    });\n\n    const sentSpans = maybeSend(finishedSpans);\n\n    const sentSpanCount = sentSpans.size;\n\n    const remainingOpenSpanCount = finishedSpans.length - sentSpanCount;\n\n    DEBUG_BUILD &&\n      logger.log(\n        `SpanExporter exported ${sentSpanCount} spans, ${remainingOpenSpanCount} spans are waiting for their parent spans to finish`,\n      );\n\n    sentSpans.forEach(span => {\n      const bucketEntry = this._spansToBucketEntry.get(span);\n      if (bucketEntry) {\n        bucketEntry.spans.delete(span);\n      }\n    });\n  }\n\n  /** Clear the exporter. */\n   clear() {\n    this._finishedSpanBuckets = this._finishedSpanBuckets.fill(undefined);\n    this._clearTimeout();\n  }\n\n  /** Clear the flush timeout. */\n   _clearTimeout() {\n    if (this._flushTimeout) {\n      clearTimeout(this._flushTimeout);\n      this._flushTimeout = undefined;\n    }\n  }\n}\n\n/**\n * Send the given spans, but only if they are part of a finished transaction.\n *\n * Returns the sent spans.\n * Spans remain unsent when their parent span is not yet finished.\n * This will happen regularly, as child spans are generally finished before their parents.\n * But it _could_ also happen because, for whatever reason, a parent span was lost.\n * In this case, we'll eventually need to clean this up.\n */\nfunction maybeSend(spans) {\n  const grouped = groupSpansWithParents(spans);\n  const sentSpans = new Set();\n\n  const rootNodes = getCompletedRootNodes(grouped);\n\n  rootNodes.forEach(root => {\n    const span = root.span;\n    sentSpans.add(span);\n    const transactionEvent = createTransactionForOtelSpan(span);\n\n    // We'll recursively add all the child spans to this array\n    const spans = transactionEvent.spans || [];\n\n    root.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n\n    // spans.sort() mutates the array, but we do not use this anymore after this point\n    // so we can safely mutate it here\n    transactionEvent.spans =\n      spans.length > MAX_SPAN_COUNT\n        ? spans.sort((a, b) => a.start_timestamp - b.start_timestamp).slice(0, MAX_SPAN_COUNT)\n        : spans;\n\n    const measurements = timedEventsToMeasurements(span.events);\n    if (measurements) {\n      transactionEvent.measurements = measurements;\n    }\n\n    captureEvent(transactionEvent);\n  });\n\n  return sentSpans;\n}\n\nfunction nodeIsCompletedRootNode(node) {\n  return !!node.span && !node.parentNode;\n}\n\nfunction getCompletedRootNodes(nodes) {\n  return nodes.filter(nodeIsCompletedRootNode);\n}\n\nfunction parseSpan(span) {\n  const attributes = span.attributes;\n\n  const origin = attributes[SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN] ;\n  const op = attributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] ;\n  const source = attributes[SEMANTIC_ATTRIBUTE_SENTRY_SOURCE] ;\n\n  return { origin, op, source };\n}\n\n/** Exported only for tests. */\nfunction createTransactionForOtelSpan(span) {\n  const { op, description, data, origin = 'manual', source } = getSpanData(span);\n  const capturedSpanScopes = getCapturedScopesOnSpan(span );\n\n  const sampleRate = span.attributes[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE] ;\n\n  const attributes = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_SOURCE]: source,\n    [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: sampleRate,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    ...data,\n    ...removeSentryAttributes(span.attributes),\n  };\n\n  const { links } = span;\n  const { traceId: trace_id, spanId: span_id } = span.spanContext();\n\n  // If parentSpanIdFromTraceState is defined at all, we want it to take precedence\n  // In that case, an empty string should be interpreted as \"no parent span id\",\n  // even if `span.parentSpanId` is set\n  // this is the case when we are starting a new trace, where we have a virtual span based on the propagationContext\n  // We only want to continue the traceId in this case, but ignore the parent span\n  const parent_span_id = getParentSpanId(span);\n\n  const status = mapStatus(span);\n\n  const traceContext = {\n    parent_span_id,\n    span_id,\n    trace_id,\n    data: attributes,\n    origin,\n    op,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  const statusCode = attributes[ATTR_HTTP_RESPONSE_STATUS_CODE];\n  const responseContext = typeof statusCode === 'number' ? { response: { status_code: statusCode } } : undefined;\n\n  const transactionEvent = {\n    contexts: {\n      trace: traceContext,\n      otel: {\n        resource: span.resource.attributes,\n      },\n      ...responseContext,\n    },\n    spans: [],\n    start_timestamp: spanTimeInputToSeconds(span.startTime),\n    timestamp: spanTimeInputToSeconds(span.endTime),\n    transaction: description,\n    type: 'transaction',\n    sdkProcessingMetadata: {\n      capturedSpanScope: capturedSpanScopes.scope,\n      capturedSpanIsolationScope: capturedSpanScopes.isolationScope,\n      sampleRate,\n      dynamicSamplingContext: getDynamicSamplingContextFromSpan(span ),\n    },\n    ...(source && {\n      transaction_info: {\n        source,\n      },\n    }),\n  };\n\n  return transactionEvent;\n}\n\nfunction createAndFinishSpanForOtelSpan(node, spans, sentSpans) {\n  const span = node.span;\n\n  if (span) {\n    sentSpans.add(span);\n  }\n\n  const shouldDrop = !span;\n\n  // If this span should be dropped, we still want to create spans for the children of this\n  if (shouldDrop) {\n    node.children.forEach(child => {\n      createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n    });\n    return;\n  }\n\n  const span_id = span.spanContext().spanId;\n  const trace_id = span.spanContext().traceId;\n  const parentSpanId = getParentSpanId(span);\n\n  const { attributes, startTime, endTime, links } = span;\n\n  const { op, description, data, origin = 'manual' } = getSpanData(span);\n  const allData = {\n    [SEMANTIC_ATTRIBUTE_SENTRY_ORIGIN]: origin,\n    [SEMANTIC_ATTRIBUTE_SENTRY_OP]: op,\n    ...removeSentryAttributes(attributes),\n    ...data,\n  };\n\n  const status = mapStatus(span);\n\n  const spanJSON = {\n    span_id,\n    trace_id,\n    data: allData,\n    description,\n    parent_span_id: parentSpanId,\n    start_timestamp: spanTimeInputToSeconds(startTime),\n    // This is [0,0] by default in OTEL, in which case we want to interpret this as no end time\n    timestamp: spanTimeInputToSeconds(endTime) || undefined,\n    status: getStatusMessage(status), // As per protocol, span status is allowed to be undefined\n    op,\n    origin,\n    measurements: timedEventsToMeasurements(span.events),\n    links: convertSpanLinksForEnvelope(links),\n  };\n\n  spans.push(spanJSON);\n\n  node.children.forEach(child => {\n    createAndFinishSpanForOtelSpan(child, spans, sentSpans);\n  });\n}\n\nfunction getSpanData(span)\n\n {\n  const { op: definedOp, source: definedSource, origin } = parseSpan(span);\n  const { op: inferredOp, description, source: inferredSource, data: inferredData } = parseSpanDescription(span);\n\n  const op = definedOp || inferredOp;\n  const source = definedSource || inferredSource;\n\n  const data = { ...inferredData, ...getData(span) };\n\n  return {\n    op,\n    description,\n    source,\n    origin,\n    data,\n  };\n}\n\n/**\n * Remove custom `sentry.` attributes we do not need to send.\n * These are more carrier attributes we use inside of the SDK, we do not need to send them to the API.\n */\nfunction removeSentryAttributes(data) {\n  const cleanedData = { ...data };\n\n  /* eslint-disable @typescript-eslint/no-dynamic-delete */\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE];\n  delete cleanedData[SEMANTIC_ATTRIBUTE_SENTRY_CUSTOM_SPAN_NAME];\n  /* eslint-enable @typescript-eslint/no-dynamic-delete */\n\n  return cleanedData;\n}\n\nfunction getData(span) {\n  const attributes = span.attributes;\n  const data = {};\n\n  if (span.kind !== SpanKind.INTERNAL) {\n    data['otel.kind'] = SpanKind[span.kind];\n  }\n\n  // eslint-disable-next-line deprecation/deprecation\n  const maybeHttpStatusCodeAttribute = attributes[SEMATTRS_HTTP_STATUS_CODE];\n  if (maybeHttpStatusCodeAttribute) {\n    data[ATTR_HTTP_RESPONSE_STATUS_CODE] = maybeHttpStatusCodeAttribute ;\n  }\n\n  const requestData = getRequestSpanData(span);\n\n  if (requestData.url) {\n    data.url = requestData.url;\n  }\n\n  if (requestData['http.query']) {\n    data['http.query'] = requestData['http.query'].slice(1);\n  }\n  if (requestData['http.fragment']) {\n    data['http.fragment'] = requestData['http.fragment'].slice(1);\n  }\n\n  return data;\n}\n\nfunction onSpanStart(span, parentContext) {\n  // This is a reliable way to get the parent span - because this is exactly how the parent is identified in the OTEL SDK\n  const parentSpan = trace.getSpan(parentContext);\n\n  let scopes = getScopesFromContext(parentContext);\n\n  // We need access to the parent span in order to be able to move up the span tree for breadcrumbs\n  if (parentSpan && !parentSpan.spanContext().isRemote) {\n    addChildSpanToSpan(parentSpan, span);\n  }\n\n  // We need this in the span exporter\n  if (parentSpan?.spanContext().isRemote) {\n    span.setAttribute(SEMANTIC_ATTRIBUTE_SENTRY_PARENT_IS_REMOTE, true);\n  }\n\n  // The root context does not have scopes stored, so we check for this specifically\n  // As fallback we attach the global scopes\n  if (parentContext === ROOT_CONTEXT) {\n    scopes = {\n      scope: getDefaultCurrentScope(),\n      isolationScope: getDefaultIsolationScope(),\n    };\n  }\n\n  // We need the scope at time of span creation in order to apply it to the event when the span is finished\n  if (scopes) {\n    setCapturedScopesOnSpan(span, scopes.scope, scopes.isolationScope);\n  }\n\n  logSpanStart(span);\n\n  const client = getClient();\n  client?.emit('spanStart', span);\n}\n\nfunction onSpanEnd(span) {\n  logSpanEnd(span);\n\n  const client = getClient();\n  client?.emit('spanEnd', span);\n}\n\n/**\n * Converts OpenTelemetry Spans to Sentry Spans and sends them to Sentry via\n * the Sentry SDK.\n */\nclass SentrySpanProcessor  {\n\n   constructor(options) {\n    setIsSetup('SentrySpanProcessor');\n    this._exporter = new SentrySpanExporter(options);\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async forceFlush() {\n    this._exporter.flush();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   async shutdown() {\n    this._exporter.clear();\n  }\n\n  /**\n   * @inheritDoc\n   */\n   onStart(span, parentContext) {\n    onSpanStart(span, parentContext);\n  }\n\n  /** @inheritDoc */\n   onEnd(span) {\n    onSpanEnd(span);\n\n    this._exporter.export(span);\n  }\n}\n\n/**\n * A custom OTEL sampler that uses Sentry sampling rates to make its decision\n */\nclass SentrySampler  {\n\n   constructor(client) {\n    this._client = client;\n    setIsSetup('SentrySampler');\n  }\n\n  /** @inheritDoc */\n   shouldSample(\n    context,\n    traceId,\n    spanName,\n    spanKind,\n    spanAttributes,\n    _links,\n  ) {\n    const options = this._client.getOptions();\n\n    const parentSpan = getValidSpan(context);\n    const parentContext = parentSpan?.spanContext();\n\n    if (!hasSpansEnabled(options)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    // `ATTR_HTTP_REQUEST_METHOD` is the new attribute, but we still support the old one, `SEMATTRS_HTTP_METHOD`, for now.\n    // eslint-disable-next-line deprecation/deprecation\n    const maybeSpanHttpMethod = spanAttributes[SEMATTRS_HTTP_METHOD] || spanAttributes[ATTR_HTTP_REQUEST_METHOD];\n\n    // If we have a http.client span that has no local parent, we never want to sample it\n    // but we want to leave downstream sampling decisions up to the server\n    if (spanKind === SpanKind.CLIENT && maybeSpanHttpMethod && (!parentSpan || parentContext?.isRemote)) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const parentSampled = parentSpan ? getParentSampled(parentSpan, traceId, spanName) : undefined;\n    const isRootSpan = !parentSpan || parentContext?.isRemote;\n\n    // We only sample based on parameters (like tracesSampleRate or tracesSampler) for root spans (which is done in sampleSpan).\n    // Non-root-spans simply inherit the sampling decision from their parent.\n    if (!isRootSpan) {\n      return wrapSamplingDecision({\n        decision: parentSampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n      });\n    }\n\n    // We want to pass the inferred name & attributes to the sampler method\n    const {\n      description: inferredSpanName,\n      data: inferredAttributes,\n      op,\n    } = inferSpanData(spanName, spanAttributes, spanKind);\n\n    const mergedAttributes = {\n      ...inferredAttributes,\n      ...spanAttributes,\n    };\n\n    if (op) {\n      mergedAttributes[SEMANTIC_ATTRIBUTE_SENTRY_OP] = op;\n    }\n\n    const mutableSamplingDecision = { decision: true };\n    this._client.emit(\n      'beforeSampling',\n      {\n        spanAttributes: mergedAttributes,\n        spanName: inferredSpanName,\n        parentSampled: parentSampled,\n        parentContext: parentContext,\n      },\n      mutableSamplingDecision,\n    );\n    if (!mutableSamplingDecision.decision) {\n      return wrapSamplingDecision({ decision: undefined, context, spanAttributes });\n    }\n\n    const { isolationScope } = getScopesFromContext(context) ?? {};\n\n    const dscString = parentContext?.traceState ? parentContext.traceState.get(SENTRY_TRACE_STATE_DSC) : undefined;\n    const dsc = dscString ? baggageHeaderToDynamicSamplingContext(dscString) : undefined;\n\n    const sampleRand = parseSampleRate(dsc?.sample_rand) ?? Math.random();\n\n    const [sampled, sampleRate, localSampleRateWasApplied] = sampleSpan(\n      options,\n      {\n        name: inferredSpanName,\n        attributes: mergedAttributes,\n        normalizedRequest: isolationScope?.getScopeData().sdkProcessingMetadata.normalizedRequest,\n        parentSampled,\n        parentSampleRate: parseSampleRate(dsc?.sample_rate),\n      },\n      sampleRand,\n    );\n\n    const method = `${maybeSpanHttpMethod}`.toUpperCase();\n    if (method === 'OPTIONS' || method === 'HEAD') {\n      DEBUG_BUILD && logger.log(`[Tracing] Not sampling span because HTTP method is '${method}' for ${spanName}`);\n\n      return wrapSamplingDecision({\n        decision: SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: 0, // we don't want to sample anything in the downstream trace either\n      });\n    }\n\n    if (\n      !sampled &&\n      // We check for `parentSampled === undefined` because we only want to record client reports for spans that are trace roots (ie. when there was incoming trace)\n      parentSampled === undefined\n    ) {\n      DEBUG_BUILD && logger.log('[Tracing] Discarding root span because its trace was not chosen to be sampled.');\n      this._client.recordDroppedEvent('sample_rate', 'transaction');\n    }\n\n    return {\n      ...wrapSamplingDecision({\n        decision: sampled ? SamplingDecision.RECORD_AND_SAMPLED : SamplingDecision.NOT_RECORD,\n        context,\n        spanAttributes,\n        sampleRand,\n        downstreamTraceSampleRate: localSampleRateWasApplied ? sampleRate : undefined,\n      }),\n      attributes: {\n        // We set the sample rate on the span when a local sample rate was applied to better understand how traces were sampled in Sentry\n        [SEMANTIC_ATTRIBUTE_SENTRY_SAMPLE_RATE]: localSampleRateWasApplied ? sampleRate : undefined,\n      },\n    };\n  }\n\n  /** Returns the sampler name or short description with the configuration. */\n   toString() {\n    return 'SentrySampler';\n  }\n}\n\nfunction getParentSampled(parentSpan, traceId, spanName) {\n  const parentContext = parentSpan.spanContext();\n\n  // Only inherit sample rate if `traceId` is the same\n  // Note for testing: `isSpanContextValid()` checks the format of the traceId/spanId, so we need to pass valid ones\n  if (isSpanContextValid(parentContext) && parentContext.traceId === traceId) {\n    if (parentContext.isRemote) {\n      const parentSampled = getSamplingDecision(parentSpan.spanContext());\n      DEBUG_BUILD &&\n        logger.log(`[Tracing] Inheriting remote parent's sampled decision for ${spanName}: ${parentSampled}`);\n      return parentSampled;\n    }\n\n    const parentSampled = getSamplingDecision(parentContext);\n    DEBUG_BUILD && logger.log(`[Tracing] Inheriting parent's sampled decision for ${spanName}: ${parentSampled}`);\n    return parentSampled;\n  }\n\n  return undefined;\n}\n\n/**\n * Wrap a sampling decision with data that Sentry needs to work properly with it.\n * If you pass `decision: undefined`, it will be treated as `NOT_RECORDING`, but in contrast to passing `NOT_RECORDING`\n * it will not propagate this decision to downstream Sentry SDKs.\n */\nfunction wrapSamplingDecision({\n  decision,\n  context,\n  spanAttributes,\n  sampleRand,\n  downstreamTraceSampleRate,\n}\n\n) {\n  let traceState = getBaseTraceState(context, spanAttributes);\n\n  // We will override the propagated sample rate downstream when\n  // - the tracesSampleRate is applied\n  // - the tracesSampler is invoked\n  // Since unsampled OTEL spans (NonRecordingSpans) cannot hold attributes we need to store this on the (trace)context.\n  if (downstreamTraceSampleRate !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RATE, `${downstreamTraceSampleRate}`);\n  }\n\n  if (sampleRand !== undefined) {\n    traceState = traceState.set(SENTRY_TRACE_STATE_SAMPLE_RAND, `${sampleRand}`);\n  }\n\n  // If the decision is undefined, we treat it as NOT_RECORDING, but we don't propagate this decision to downstream SDKs\n  // Which is done by not setting `SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING` traceState\n  if (decision == undefined) {\n    return { decision: SamplingDecision.NOT_RECORD, traceState };\n  }\n\n  if (decision === SamplingDecision.NOT_RECORD) {\n    return { decision, traceState: traceState.set(SENTRY_TRACE_STATE_SAMPLED_NOT_RECORDING, '1') };\n  }\n\n  return { decision, traceState };\n}\n\nfunction getBaseTraceState(context, spanAttributes) {\n  const parentSpan = trace.getSpan(context);\n  const parentContext = parentSpan?.spanContext();\n\n  let traceState = parentContext?.traceState || new TraceState();\n\n  // We always keep the URL on the trace state, so we can access it in the propagator\n  // `ATTR_URL_FULL` is the new attribute, but we still support the old one, `ATTR_HTTP_URL`, for now.\n  // eslint-disable-next-line deprecation/deprecation\n  const url = spanAttributes[SEMATTRS_HTTP_URL] || spanAttributes[ATTR_URL_FULL];\n  if (url && typeof url === 'string') {\n    traceState = traceState.set(SENTRY_TRACE_STATE_URL, url);\n  }\n\n  return traceState;\n}\n\n/**\n * If the active span is invalid, we want to ignore it as parent.\n * This aligns with how otel tracers and default samplers handle these cases.\n */\nfunction getValidSpan(context) {\n  const span = trace.getSpan(context);\n  return span && isSpanContextValid(span.spanContext()) ? span : undefined;\n}\n\nexport { SEMANTIC_ATTRIBUTE_SENTRY_GRAPHQL_OPERATION, SentryPropagator, SentrySampler, SentrySpanProcessor, continueTrace, enhanceDscWithOpenTelemetryRootSpanName, getActiveSpan, getRequestSpanData, getScopesFromContext, getSpanKind, getTraceContextForScope, isSentryRequestSpan, openTelemetrySetupCheck, setOpenTelemetryContextAsyncContextStrategy, setupEventContextTrace, shouldPropagateTraceForUrl, spanHasAttributes, spanHasEvents, spanHasKind, spanHasName, spanHasParentId, spanHasStatus, startInactiveSpan, startSpan, startSpanManual, suppressTracing, withActiveSpan, wrapClientClass, wrapContextManagerClass, wrapSamplingDecision };\n//# sourceMappingURL=index.js.map\n","declare const __DEBUG_BUILD__: boolean;\n\n/**\n * This serves as a build time flag that will be true by default, but false in non-debug builds or if users replace `__SENTRY_DEBUG__` in their generated code.\n *\n * ATTENTION: This constant must never cross package boundaries (i.e. be exported) to guarantee that it can be used for tree shaking.\n */\nexport const DEBUG_BUILD = __DEBUG_BUILD__;\n","import type {\n  Client,\n  FetchBreadcrumbData,\n  FetchBreadcrumbHint,\n  HandlerDataFetch,\n  IntegrationFn,\n  Span,\n} from '@sentry/core';\nimport {\n  addBreadcrumb,\n  addFetchInstrumentationHandler,\n  defineIntegration,\n  getBreadcrumbLogLevelFromHttpStatusCode,\n  getClient,\n  instrumentFetchRequest,\n  isSentryRequestUrl,\n  LRUMap,\n  stringMatchesSomePattern,\n} from '@sentry/core';\n\nconst INTEGRATION_NAME = 'WinterCGFetch';\n\nconst HAS_CLIENT_MAP = new WeakMap<Client, boolean>();\n\nexport interface Options {\n  /**\n   * Whether breadcrumbs should be recorded for requests\n   * Defaults to true\n   */\n  breadcrumbs: boolean;\n\n  /**\n   * Function determining whether or not to create spans to track outgoing requests to the given URL.\n   * By default, spans will be created for all outgoing requests.\n   */\n  shouldCreateSpanForRequest?: (url: string) => boolean;\n}\n\nconst _winterCGFetch = ((options: Partial<Options> = {}) => {\n  const breadcrumbs = options.breadcrumbs === undefined ? true : options.breadcrumbs;\n  const shouldCreateSpanForRequest = options.shouldCreateSpanForRequest;\n\n  const _createSpanUrlMap = new LRUMap<string, boolean>(100);\n  const _headersUrlMap = new LRUMap<string, boolean>(100);\n\n  const spans: Record<string, Span> = {};\n\n  /** Decides whether to attach trace data to the outgoing fetch request */\n  function _shouldAttachTraceData(url: string): boolean {\n    const client = getClient();\n\n    if (!client) {\n      return false;\n    }\n\n    const clientOptions = client.getOptions();\n\n    if (clientOptions.tracePropagationTargets === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _headersUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = stringMatchesSomePattern(url, clientOptions.tracePropagationTargets);\n    _headersUrlMap.set(url, decision);\n    return decision;\n  }\n\n  /** Helper that wraps shouldCreateSpanForRequest option */\n  function _shouldCreateSpan(url: string): boolean {\n    if (shouldCreateSpanForRequest === undefined) {\n      return true;\n    }\n\n    const cachedDecision = _createSpanUrlMap.get(url);\n    if (cachedDecision !== undefined) {\n      return cachedDecision;\n    }\n\n    const decision = shouldCreateSpanForRequest(url);\n    _createSpanUrlMap.set(url, decision);\n    return decision;\n  }\n\n  return {\n    name: INTEGRATION_NAME,\n    setupOnce() {\n      addFetchInstrumentationHandler(handlerData => {\n        const client = getClient();\n        if (!client || !HAS_CLIENT_MAP.get(client)) {\n          return;\n        }\n\n        if (isSentryRequestUrl(handlerData.fetchData.url, client)) {\n          return;\n        }\n\n        instrumentFetchRequest(\n          handlerData,\n          _shouldCreateSpan,\n          _shouldAttachTraceData,\n          spans,\n          'auto.http.wintercg_fetch',\n        );\n\n        if (breadcrumbs) {\n          createBreadcrumb(handlerData);\n        }\n      });\n    },\n    setup(client) {\n      HAS_CLIENT_MAP.set(client, true);\n    },\n  };\n}) satisfies IntegrationFn;\n\n/**\n * Creates spans and attaches tracing headers to fetch requests on WinterCG runtimes.\n */\nexport const winterCGFetchIntegration = defineIntegration(_winterCGFetch);\n\nfunction createBreadcrumb(handlerData: HandlerDataFetch): void {\n  const { startTimestamp, endTimestamp } = handlerData;\n\n  // We only capture complete fetch requests\n  if (!endTimestamp) {\n    return;\n  }\n\n  const breadcrumbData: FetchBreadcrumbData = {\n    method: handlerData.fetchData.method,\n    url: handlerData.fetchData.url,\n  };\n\n  if (handlerData.error) {\n    const hint: FetchBreadcrumbHint = {\n      data: handlerData.error,\n      input: handlerData.args,\n      startTimestamp,\n      endTimestamp,\n    };\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        level: 'error',\n        type: 'http',\n      },\n      hint,\n    );\n  } else {\n    const response = handlerData.response as Response | undefined;\n\n    breadcrumbData.request_body_size = handlerData.fetchData.request_body_size;\n    breadcrumbData.response_body_size = handlerData.fetchData.response_body_size;\n    breadcrumbData.status_code = response?.status;\n\n    const hint: FetchBreadcrumbHint = {\n      input: handlerData.args,\n      response,\n      startTimestamp,\n      endTimestamp,\n    };\n    const level = getBreadcrumbLogLevelFromHttpStatusCode(breadcrumbData.status_code);\n\n    addBreadcrumb(\n      {\n        category: 'fetch',\n        data: breadcrumbData,\n        type: 'http',\n        level,\n      },\n      hint,\n    );\n  }\n}\n","import type { BaseTransportOptions, Transport, TransportMakeRequestResponse, TransportRequest } from '@sentry/core';\nimport { createTransport, SENTRY_BUFFER_FULL_ERROR, suppressTracing } from '@sentry/core';\n\nexport interface VercelEdgeTransportOptions extends BaseTransportOptions {\n  /** Fetch API init parameters. */\n  fetchOptions?: RequestInit;\n  /** Custom headers for the transport. */\n  headers?: { [key: string]: string };\n}\n\nconst DEFAULT_TRANSPORT_BUFFER_SIZE = 30;\n\n/**\n * This is a modified promise buffer that collects tasks until drain is called.\n * We need this in the edge runtime because edge function invocations may not share I/O objects, like fetch requests\n * and responses, and the normal PromiseBuffer inherently buffers stuff inbetween incoming requests.\n *\n * A limitation we need to be aware of is that DEFAULT_TRANSPORT_BUFFER_SIZE is the maximum amount of payloads the\n * SDK can send for a given edge function invocation.\n */\nexport class IsolatedPromiseBuffer {\n  // We just have this field because the promise buffer interface requires it.\n  // If we ever remove it from the interface we should also remove it here.\n  public $: Array<PromiseLike<TransportMakeRequestResponse>>;\n\n  private _taskProducers: (() => PromiseLike<TransportMakeRequestResponse>)[];\n\n  private readonly _bufferSize: number;\n\n  public constructor(_bufferSize = DEFAULT_TRANSPORT_BUFFER_SIZE) {\n    this.$ = [];\n    this._taskProducers = [];\n    this._bufferSize = _bufferSize;\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public add(taskProducer: () => PromiseLike<TransportMakeRequestResponse>): PromiseLike<TransportMakeRequestResponse> {\n    if (this._taskProducers.length >= this._bufferSize) {\n      return Promise.reject(SENTRY_BUFFER_FULL_ERROR);\n    }\n\n    this._taskProducers.push(taskProducer);\n    return Promise.resolve({});\n  }\n\n  /**\n   * @inheritdoc\n   */\n  public drain(timeout?: number): PromiseLike<boolean> {\n    const oldTaskProducers = [...this._taskProducers];\n    this._taskProducers = [];\n\n    return new Promise(resolve => {\n      const timer = setTimeout(() => {\n        if (timeout && timeout > 0) {\n          resolve(false);\n        }\n      }, timeout);\n\n      // This cannot reject\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      Promise.all(\n        oldTaskProducers.map(taskProducer =>\n          taskProducer().then(null, () => {\n            // catch all failed requests\n          }),\n        ),\n      ).then(() => {\n        // resolve to true if all fetch requests settled\n        clearTimeout(timer);\n        resolve(true);\n      });\n    });\n  }\n}\n\n/**\n * Creates a Transport that uses the Edge Runtimes native fetch API to send events to Sentry.\n */\nexport function makeEdgeTransport(options: VercelEdgeTransportOptions): Transport {\n  function makeRequest(request: TransportRequest): PromiseLike<TransportMakeRequestResponse> {\n    const requestOptions: RequestInit = {\n      body: request.body,\n      method: 'POST',\n      headers: options.headers,\n      ...options.fetchOptions,\n    };\n\n    return suppressTracing(() => {\n      return fetch(options.url, requestOptions).then(response => {\n        return {\n          statusCode: response.status,\n          headers: {\n            'x-sentry-rate-limits': response.headers.get('X-Sentry-Rate-Limits'),\n            'retry-after': response.headers.get('Retry-After'),\n          },\n        };\n      });\n    });\n  }\n\n  return createTransport(options, makeRequest, new IsolatedPromiseBuffer(options.bufferSize));\n}\n","declare const process: {\n  env: Record<string, string>;\n};\n\n/**\n * Returns an environment setting value determined by Vercel's `VERCEL_ENV` environment variable.\n *\n * @param isClient Flag to indicate whether to use the `NEXT_PUBLIC_` prefixed version of the environment variable.\n */\nexport function getVercelEnv(isClient: boolean): string | undefined {\n  const vercelEnvVar = isClient ? process.env.NEXT_PUBLIC_VERCEL_ENV : process.env.VERCEL_ENV;\n  return vercelEnvVar ? `vercel-${vercelEnvVar}` : undefined;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified bind() method not to rely on Node.js specific APIs\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable @typescript-eslint/member-ordering */\n/* eslint-disable jsdoc/require-jsdoc */\n/* eslint-disable @typescript-eslint/ban-types */\n/* eslint-disable @typescript-eslint/explicit-function-return-type */\n/* eslint-disable @typescript-eslint/no-unsafe-member-access */\n/* eslint-disable prefer-rest-params */\n/* eslint-disable @typescript-eslint/no-dynamic-delete */\n/* eslint-disable @typescript-eslint/unbound-method */\n/* eslint-disable @typescript-eslint/no-this-alias */\n\nimport type { Context, ContextManager } from '@opentelemetry/api';\nimport type { EventEmitter } from 'events';\n\ntype Func<T> = (...args: unknown[]) => T;\n\n/**\n * Store a map for each event of all original listeners and their \"patched\"\n * version. So when a listener is removed by the user, the corresponding\n * patched function will be also removed.\n */\ninterface PatchMap {\n  [name: string]: WeakMap<Func<void>, Func<void>>;\n}\n\nconst ADD_LISTENER_METHODS = [\n  'addListener' as const,\n  'on' as const,\n  'once' as const,\n  'prependListener' as const,\n  'prependOnceListener' as const,\n];\n\nexport abstract class AbstractAsyncHooksContextManager implements ContextManager {\n  abstract active(): Context;\n\n  abstract with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F>;\n\n  abstract enable(): this;\n\n  abstract disable(): this;\n\n  /**\n   * Binds a the certain context or the active one to the target function and then returns the target\n   * @param context A context (span) to be bind to target\n   * @param target a function or event emitter. When target or one of its callbacks is called,\n   *  the provided context will be used as the active context for the duration of the call.\n   */\n  bind<T>(context: Context, target: T): T {\n    if (typeof target === 'object' && target !== null && 'on' in target) {\n      return this._bindEventEmitter(context, target as unknown as EventEmitter) as T;\n    }\n\n    if (typeof target === 'function') {\n      return this._bindFunction(context, target);\n    }\n    return target;\n  }\n\n  private _bindFunction<T extends Function>(context: Context, target: T): T {\n    const manager = this;\n    const contextWrapper = function (this: never, ...args: unknown[]) {\n      return manager.with(context, () => target.apply(this, args));\n    };\n    Object.defineProperty(contextWrapper, 'length', {\n      enumerable: false,\n      configurable: true,\n      writable: false,\n      value: target.length,\n    });\n    /**\n     * It isn't possible to tell Typescript that contextWrapper is the same as T\n     * so we forced to cast as any here.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return contextWrapper as any;\n  }\n\n  /**\n   * By default, EventEmitter call their callback with their context, which we do\n   * not want, instead we will bind a specific context to all callbacks that\n   * go through it.\n   * @param context the context we want to bind\n   * @param ee EventEmitter an instance of EventEmitter to patch\n   */\n  private _bindEventEmitter<T extends EventEmitter>(context: Context, ee: T): T {\n    const map = this._getPatchMap(ee);\n    if (map !== undefined) return ee;\n    this._createPatchMap(ee);\n\n    // patch methods that add a listener to propagate context\n    ADD_LISTENER_METHODS.forEach(methodName => {\n      if (ee[methodName] === undefined) return;\n      ee[methodName] = this._patchAddListener(ee, ee[methodName], context);\n    });\n    // patch methods that remove a listener\n    if (typeof ee.removeListener === 'function') {\n      ee.removeListener = this._patchRemoveListener(ee, ee.removeListener);\n    }\n    if (typeof ee.off === 'function') {\n      ee.off = this._patchRemoveListener(ee, ee.off);\n    }\n    // patch method that remove all listeners\n    if (typeof ee.removeAllListeners === 'function') {\n      ee.removeAllListeners = this._patchRemoveAllListeners(ee, ee.removeAllListeners);\n    }\n    return ee;\n  }\n\n  /**\n   * Patch methods that remove a given listener so that we match the \"patched\"\n   * version of that listener (the one that propagate context).\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveListener(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      const events = contextManager._getPatchMap(ee)?.[event];\n      if (events === undefined) {\n        return original.call(this, event, listener);\n      }\n      const patchedListener = events.get(listener);\n      return original.call(this, event, patchedListener || listener);\n    };\n  }\n\n  /**\n   * Patch methods that remove all listeners so we remove our\n   * internal references for a given event.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   */\n  private _patchRemoveAllListeners(ee: EventEmitter, original: Function) {\n    const contextManager = this;\n    return function (this: never, event: string) {\n      const map = contextManager._getPatchMap(ee);\n      if (map !== undefined) {\n        if (arguments.length === 0) {\n          contextManager._createPatchMap(ee);\n        } else if (map[event] !== undefined) {\n          delete map[event];\n        }\n      }\n      return original.apply(this, arguments);\n    };\n  }\n\n  /**\n   * Patch methods on an event emitter instance that can add listeners so we\n   * can force them to propagate a given context.\n   * @param ee EventEmitter instance\n   * @param original reference to the patched method\n   * @param [context] context to propagate when calling listeners\n   */\n  private _patchAddListener(ee: EventEmitter, original: Function, context: Context) {\n    const contextManager = this;\n    return function (this: never, event: string, listener: Func<void>) {\n      /**\n       * This check is required to prevent double-wrapping the listener.\n       * The implementation for ee.once wraps the listener and calls ee.on.\n       * Without this check, we would wrap that wrapped listener.\n       * This causes an issue because ee.removeListener depends on the onceWrapper\n       * to properly remove the listener. If we wrap their wrapper, we break\n       * that detection.\n       */\n      if (contextManager._wrapped) {\n        return original.call(this, event, listener);\n      }\n      let map = contextManager._getPatchMap(ee);\n      if (map === undefined) {\n        map = contextManager._createPatchMap(ee);\n      }\n      let listeners = map[event];\n      if (listeners === undefined) {\n        listeners = new WeakMap();\n        map[event] = listeners;\n      }\n      const patchedListener = contextManager.bind(context, listener);\n      // store a weak reference of the user listener to ours\n      listeners.set(listener, patchedListener);\n\n      /**\n       * See comment at the start of this function for the explanation of this property.\n       */\n      contextManager._wrapped = true;\n      try {\n        return original.call(this, event, patchedListener);\n      } finally {\n        contextManager._wrapped = false;\n      }\n    };\n  }\n\n  private _createPatchMap(ee: EventEmitter): PatchMap {\n    const map = Object.create(null);\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    (ee as any)[this._kOtListeners] = map;\n    return map;\n  }\n  private _getPatchMap(ee: EventEmitter): PatchMap | undefined {\n    return (ee as never)[this._kOtListeners];\n  }\n\n  private readonly _kOtListeners = Symbol('OtListeners');\n  private _wrapped = false;\n}\n","/*\n * Copyright The OpenTelemetry Authors\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *      https://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n * NOTICE from the Sentry authors:\n * - Code vendored from: https://github.com/open-telemetry/opentelemetry-js/blob/6515ed8098333646a63a74a8c0150cc2daf520db/packages/opentelemetry-context-async-hooks/src/AbstractAsyncHooksContextManager.ts\n * - Modifications:\n *   - Added lint rules\n *   - Modified import path to AbstractAsyncHooksContextManager\n *   - Added Sentry logging\n *   - Modified constructor to access AsyncLocalStorage class from global object instead of the Node.js API\n */\n\n/* eslint-disable @typescript-eslint/explicit-member-accessibility */\n/* eslint-disable jsdoc/require-jsdoc */\n\nimport type { Context } from '@opentelemetry/api';\nimport { ROOT_CONTEXT } from '@opentelemetry/api';\nimport { GLOBAL_OBJ, logger } from '@sentry/core';\nimport type { AsyncLocalStorage } from 'async_hooks';\nimport { DEBUG_BUILD } from '../debug-build';\nimport { AbstractAsyncHooksContextManager } from './abstract-async-hooks-context-manager';\n\nexport class AsyncLocalStorageContextManager extends AbstractAsyncHooksContextManager {\n  private _asyncLocalStorage: AsyncLocalStorage<Context>;\n\n  constructor() {\n    super();\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-explicit-any\n    const MaybeGlobalAsyncLocalStorageConstructor = (GLOBAL_OBJ as any).AsyncLocalStorage;\n\n    if (!MaybeGlobalAsyncLocalStorageConstructor) {\n      DEBUG_BUILD &&\n        logger.warn(\n          \"Tried to register AsyncLocalStorage async context strategy in a runtime that doesn't support AsyncLocalStorage.\",\n        );\n\n      // @ts-expect-error Vendored type shenanigans\n      this._asyncLocalStorage = {\n        getStore() {\n          return undefined;\n        },\n        run(_store: unknown, callback: () => Context, ...args: unknown[]) {\n          return callback.apply(this, args);\n        },\n        disable() {\n          // noop\n        },\n      };\n    } else {\n      this._asyncLocalStorage = new MaybeGlobalAsyncLocalStorageConstructor();\n    }\n  }\n\n  active(): Context {\n    return this._asyncLocalStorage.getStore() ?? ROOT_CONTEXT;\n  }\n\n  with<A extends unknown[], F extends (...args: A) => ReturnType<F>>(\n    context: Context,\n    fn: F,\n    thisArg?: ThisParameterType<F>,\n    ...args: A\n  ): ReturnType<F> {\n    const cb = thisArg == null ? fn : fn.bind(thisArg);\n    return this._asyncLocalStorage.run(context, cb as never, ...args);\n  }\n\n  enable(): this {\n    return this;\n  }\n\n  disable(): this {\n    this._asyncLocalStorage.disable();\n    return this;\n  }\n}\n","import { context, diag, DiagLogLevel, propagation, trace } from '@opentelemetry/api';\nimport { Resource } from '@opentelemetry/resources';\nimport { BasicTracerProvider } from '@opentelemetry/sdk-trace-base';\nimport {\n  ATTR_SERVICE_NAME,\n  ATTR_SERVICE_VERSION,\n  SEMRESATTRS_SERVICE_NAMESPACE,\n} from '@opentelemetry/semantic-conventions';\nimport type { Client, Integration, Options } from '@sentry/core';\nimport {\n  consoleIntegration,\n  createStackParser,\n  dedupeIntegration,\n  functionToStringIntegration,\n  getCurrentScope,\n  getIntegrationsToSetup,\n  GLOBAL_OBJ,\n  hasSpansEnabled,\n  inboundFiltersIntegration,\n  linkedErrorsIntegration,\n  logger,\n  nodeStackLineParser,\n  requestDataIntegration,\n  SDK_VERSION,\n  stackParserFromStackParserOptions,\n} from '@sentry/core';\nimport {\n  enhanceDscWithOpenTelemetryRootSpanName,\n  openTelemetrySetupCheck,\n  SentryPropagator,\n  SentrySampler,\n  SentrySpanProcessor,\n  setOpenTelemetryContextAsyncContextStrategy,\n  setupEventContextTrace,\n  wrapContextManagerClass,\n} from '@sentry/opentelemetry';\nimport { VercelEdgeClient } from './client';\nimport { DEBUG_BUILD } from './debug-build';\nimport { winterCGFetchIntegration } from './integrations/wintercg-fetch';\nimport { makeEdgeTransport } from './transports';\nimport type { VercelEdgeOptions } from './types';\nimport { getVercelEnv } from './utils/vercel';\nimport { AsyncLocalStorageContextManager } from './vendored/async-local-storage-context-manager';\n\ndeclare const process: {\n  env: Record<string, string>;\n};\n\nconst nodeStackParser = createStackParser(nodeStackLineParser());\n\n/** Get the default integrations for the browser SDK. */\nexport function getDefaultIntegrations(options: Options): Integration[] {\n  return [\n    dedupeIntegration(),\n    // TODO(v10): Replace with `eventFiltersIntegration` once we remove the deprecated `inboundFiltersIntegration`\n    // eslint-disable-next-line deprecation/deprecation\n    inboundFiltersIntegration(),\n    functionToStringIntegration(),\n    linkedErrorsIntegration(),\n    winterCGFetchIntegration(),\n    consoleIntegration(),\n    // TODO(v10): integration can be included - but integration should not add IP address etc\n    ...(options.sendDefaultPii ? [requestDataIntegration()] : []),\n  ];\n}\n\n/** Inits the Sentry NextJS SDK on the Edge Runtime. */\nexport function init(options: VercelEdgeOptions = {}): Client | undefined {\n  setOpenTelemetryContextAsyncContextStrategy();\n\n  const scope = getCurrentScope();\n  scope.update(options.initialScope);\n\n  if (options.defaultIntegrations === undefined) {\n    options.defaultIntegrations = getDefaultIntegrations(options);\n  }\n\n  if (options.dsn === undefined && process.env.SENTRY_DSN) {\n    options.dsn = process.env.SENTRY_DSN;\n  }\n\n  if (options.tracesSampleRate === undefined && process.env.SENTRY_TRACES_SAMPLE_RATE) {\n    const tracesSampleRate = parseFloat(process.env.SENTRY_TRACES_SAMPLE_RATE);\n    if (isFinite(tracesSampleRate)) {\n      options.tracesSampleRate = tracesSampleRate;\n    }\n  }\n\n  if (options.release === undefined) {\n    const detectedRelease = getSentryRelease();\n    if (detectedRelease !== undefined) {\n      options.release = detectedRelease;\n    }\n  }\n\n  options.environment =\n    options.environment || process.env.SENTRY_ENVIRONMENT || getVercelEnv(false) || process.env.NODE_ENV;\n\n  const client = new VercelEdgeClient({\n    ...options,\n    stackParser: stackParserFromStackParserOptions(options.stackParser || nodeStackParser),\n    integrations: getIntegrationsToSetup(options),\n    transport: options.transport || makeEdgeTransport,\n  });\n  // The client is on the current scope, from where it generally is inherited\n  getCurrentScope().setClient(client);\n\n  client.init();\n\n  // If users opt-out of this, they _have_ to set up OpenTelemetry themselves\n  // There is no way to use this SDK without OpenTelemetry!\n  if (!options.skipOpenTelemetrySetup) {\n    setupOtel(client);\n    validateOpenTelemetrySetup();\n  }\n\n  enhanceDscWithOpenTelemetryRootSpanName(client);\n  setupEventContextTrace(client);\n\n  return client;\n}\n\nfunction validateOpenTelemetrySetup(): void {\n  if (!DEBUG_BUILD) {\n    return;\n  }\n\n  const setup = openTelemetrySetupCheck();\n\n  const required: ReturnType<typeof openTelemetrySetupCheck> = ['SentryContextManager', 'SentryPropagator'];\n\n  if (hasSpansEnabled()) {\n    required.push('SentrySpanProcessor');\n  }\n\n  for (const k of required) {\n    if (!setup.includes(k)) {\n      logger.error(\n        `You have to set up the ${k}. Without this, the OpenTelemetry & Sentry integration will not work properly.`,\n      );\n    }\n  }\n\n  if (!setup.includes('SentrySampler')) {\n    logger.warn(\n      'You have to set up the SentrySampler. Without this, the OpenTelemetry & Sentry integration may still work, but sample rates set for the Sentry SDK will not be respected. If you use a custom sampler, make sure to use `wrapSamplingDecision`.',\n    );\n  }\n}\n\n// exported for tests\n// eslint-disable-next-line jsdoc/require-jsdoc\nexport function setupOtel(client: VercelEdgeClient): void {\n  if (client.getOptions().debug) {\n    setupOpenTelemetryLogger();\n  }\n\n  // Create and configure NodeTracerProvider\n  const provider = new BasicTracerProvider({\n    sampler: new SentrySampler(client),\n    resource: new Resource({\n      [ATTR_SERVICE_NAME]: 'edge',\n      // eslint-disable-next-line deprecation/deprecation\n      [SEMRESATTRS_SERVICE_NAMESPACE]: 'sentry',\n      [ATTR_SERVICE_VERSION]: SDK_VERSION,\n    }),\n    forceFlushTimeoutMillis: 500,\n    spanProcessors: [\n      new SentrySpanProcessor({\n        timeout: client.getOptions().maxSpanWaitDuration,\n      }),\n    ],\n  });\n\n  const SentryContextManager = wrapContextManagerClass(AsyncLocalStorageContextManager);\n\n  trace.setGlobalTracerProvider(provider);\n  propagation.setGlobalPropagator(new SentryPropagator());\n  context.setGlobalContextManager(new SentryContextManager());\n\n  client.traceProvider = provider;\n}\n\n/**\n * Setup the OTEL logger to use our own logger.\n */\nfunction setupOpenTelemetryLogger(): void {\n  const otelLogger = new Proxy(logger as typeof logger & { verbose: (typeof logger)['debug'] }, {\n    get(target, prop, receiver) {\n      const actualProp = prop === 'verbose' ? 'debug' : prop;\n      return Reflect.get(target, actualProp, receiver);\n    },\n  });\n\n  // Disable diag, to ensure this works even if called multiple times\n  diag.disable();\n  diag.setLogger(otelLogger, DiagLogLevel.DEBUG);\n}\n\n/**\n * Returns a release dynamically from environment variables.\n */\n// eslint-disable-next-line complexity\nexport function getSentryRelease(fallback?: string): string | undefined {\n  // Always read first as Sentry takes this as precedence\n  if (process.env.SENTRY_RELEASE) {\n    return process.env.SENTRY_RELEASE;\n  }\n\n  // This supports the variable that sentry-webpack-plugin injects\n  if (GLOBAL_OBJ.SENTRY_RELEASE?.id) {\n    return GLOBAL_OBJ.SENTRY_RELEASE.id;\n  }\n\n  // This list is in approximate alpha order, separated into 3 categories:\n  // 1. Git providers\n  // 2. CI providers with specific environment variables (has the provider name in the variable name)\n  // 3. CI providers with generic environment variables (checked for last to prevent possible false positives)\n\n  const possibleReleaseNameOfGitProvider =\n    // GitHub Actions - https://help.github.com/en/actions/configuring-and-managing-workflows/using-environment-variables#default-environment-variables\n    process.env['GITHUB_SHA'] ||\n    // GitLab CI - https://docs.gitlab.com/ee/ci/variables/predefined_variables.html\n    process.env['CI_MERGE_REQUEST_SOURCE_BRANCH_SHA'] ||\n    process.env['CI_BUILD_REF'] ||\n    process.env['CI_COMMIT_SHA'] ||\n    // Bitbucket - https://support.atlassian.com/bitbucket-cloud/docs/variables-and-secrets/\n    process.env['BITBUCKET_COMMIT'];\n\n  const possibleReleaseNameOfCiProvidersWithSpecificEnvVar =\n    // AppVeyor - https://www.appveyor.com/docs/environment-variables/\n    process.env['APPVEYOR_PULL_REQUEST_HEAD_COMMIT'] ||\n    process.env['APPVEYOR_REPO_COMMIT'] ||\n    // AWS CodeBuild - https://docs.aws.amazon.com/codebuild/latest/userguide/build-env-ref-env-vars.html\n    process.env['CODEBUILD_RESOLVED_SOURCE_VERSION'] ||\n    // AWS Amplify - https://docs.aws.amazon.com/amplify/latest/userguide/environment-variables.html\n    process.env['AWS_COMMIT_ID'] ||\n    // Azure Pipelines - https://docs.microsoft.com/en-us/azure/devops/pipelines/build/variables?view=azure-devops&tabs=yaml\n    process.env['BUILD_SOURCEVERSION'] ||\n    // Bitrise - https://devcenter.bitrise.io/builds/available-environment-variables/\n    process.env['GIT_CLONE_COMMIT_HASH'] ||\n    // Buddy CI - https://buddy.works/docs/pipelines/environment-variables#default-environment-variables\n    process.env['BUDDY_EXECUTION_REVISION'] ||\n    // Builtkite - https://buildkite.com/docs/pipelines/environment-variables\n    process.env['BUILDKITE_COMMIT'] ||\n    // CircleCI - https://circleci.com/docs/variables/\n    process.env['CIRCLE_SHA1'] ||\n    // Cirrus CI - https://cirrus-ci.org/guide/writing-tasks/#environment-variables\n    process.env['CIRRUS_CHANGE_IN_REPO'] ||\n    // Codefresh - https://codefresh.io/docs/docs/codefresh-yaml/variables/\n    process.env['CF_REVISION'] ||\n    // Codemagic - https://docs.codemagic.io/yaml-basic-configuration/environment-variables/\n    process.env['CM_COMMIT'] ||\n    // Cloudflare Pages - https://developers.cloudflare.com/pages/platform/build-configuration/#environment-variables\n    process.env['CF_PAGES_COMMIT_SHA'] ||\n    // Drone - https://docs.drone.io/pipeline/environment/reference/\n    process.env['DRONE_COMMIT_SHA'] ||\n    // Flightcontrol - https://www.flightcontrol.dev/docs/guides/flightcontrol/environment-variables#built-in-environment-variables\n    process.env['FC_GIT_COMMIT_SHA'] ||\n    // Heroku #1 https://devcenter.heroku.com/articles/heroku-ci\n    process.env['HEROKU_TEST_RUN_COMMIT_VERSION'] ||\n    // Heroku #2 https://docs.sentry.io/product/integrations/deployment/heroku/#configure-releases\n    process.env['HEROKU_SLUG_COMMIT'] ||\n    // Railway - https://docs.railway.app/reference/variables#git-variables\n    process.env['RAILWAY_GIT_COMMIT_SHA'] ||\n    // Render - https://render.com/docs/environment-variables\n    process.env['RENDER_GIT_COMMIT'] ||\n    // Semaphore CI - https://docs.semaphoreci.com/ci-cd-environment/environment-variables\n    process.env['SEMAPHORE_GIT_SHA'] ||\n    // TravisCI - https://docs.travis-ci.com/user/environment-variables/#default-environment-variables\n    process.env['TRAVIS_PULL_REQUEST_SHA'] ||\n    // Vercel - https://vercel.com/docs/v2/build-step#system-environment-variables\n    process.env['VERCEL_GIT_COMMIT_SHA'] ||\n    process.env['VERCEL_GITHUB_COMMIT_SHA'] ||\n    process.env['VERCEL_GITLAB_COMMIT_SHA'] ||\n    process.env['VERCEL_BITBUCKET_COMMIT_SHA'] ||\n    // Zeit (now known as Vercel)\n    process.env['ZEIT_GITHUB_COMMIT_SHA'] ||\n    process.env['ZEIT_GITLAB_COMMIT_SHA'] ||\n    process.env['ZEIT_BITBUCKET_COMMIT_SHA'];\n\n  const possibleReleaseNameOfCiProvidersWithGenericEnvVar =\n    // CloudBees CodeShip - https://docs.cloudbees.com/docs/cloudbees-codeship/latest/pro-builds-and-configuration/environment-variables\n    process.env['CI_COMMIT_ID'] ||\n    // Coolify - https://coolify.io/docs/knowledge-base/environment-variables\n    process.env['SOURCE_COMMIT'] ||\n    // Heroku #3 https://devcenter.heroku.com/changelog-items/630\n    process.env['SOURCE_VERSION'] ||\n    // Jenkins - https://plugins.jenkins.io/git/#environment-variables\n    process.env['GIT_COMMIT'] ||\n    // Netlify - https://docs.netlify.com/configure-builds/environment-variables/#build-metadata\n    process.env['COMMIT_REF'] ||\n    // TeamCity - https://www.jetbrains.com/help/teamcity/predefined-build-parameters.html\n    process.env['BUILD_VCS_NUMBER'] ||\n    // Woodpecker CI - https://woodpecker-ci.org/docs/usage/environment\n    process.env['CI_COMMIT_SHA'];\n\n  return (\n    possibleReleaseNameOfGitProvider ||\n    possibleReleaseNameOfCiProvidersWithSpecificEnvVar ||\n    possibleReleaseNameOfCiProvidersWithGenericEnvVar ||\n    fallback\n  );\n}\n","import type { Log, LogSeverityLevel, ParameterizedString } from '@sentry/core';\nimport { _INTERNAL_captureLog } from '@sentry/core';\n\n/**\n * Capture a log with the given level.\n *\n * @param level - The level of the log.\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., userId: 100.\n * @param severityNumber - The severity number of the log.\n */\nfunction captureLog(\n  level: LogSeverityLevel,\n  message: ParameterizedString,\n  attributes?: Log['attributes'],\n  severityNumber?: Log['severityNumber'],\n): void {\n  _INTERNAL_captureLog({ level, message, attributes, severityNumber });\n}\n\n/**\n * @summary Capture a log with the `trace` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { userId: 100, route: '/dashboard' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.trace('User clicked submit button', {\n *   buttonId: 'submit-form',\n *   formId: 'user-profile',\n *   timestamp: Date.now()\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.trace(Sentry.logger.fmt`User ${user} navigated to ${page}`, {\n *   userId: '123',\n *   sessionId: 'abc-xyz'\n * });\n * ```\n */\nexport function trace(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('trace', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `debug` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { component: 'Header', state: 'loading' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.debug('Component mounted', {\n *   component: 'UserProfile',\n *   props: { userId: 123 },\n *   renderTime: 150\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.debug(Sentry.logger.fmt`API request to ${endpoint} failed`, {\n *   statusCode: 404,\n *   requestId: 'req-123',\n *   duration: 250\n * });\n * ```\n */\nexport function debug(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('debug', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `info` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { feature: 'checkout', status: 'completed' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.info('User completed checkout', {\n *   orderId: 'order-123',\n *   amount: 99.99,\n *   paymentMethod: 'credit_card'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.info(Sentry.logger.fmt`User ${user} updated profile picture`, {\n *   userId: 'user-123',\n *   imageSize: '2.5MB',\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function info(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('info', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `warn` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { browser: 'Chrome', version: '91.0' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.warn('Browser compatibility issue detected', {\n *   browser: 'Safari',\n *   version: '14.0',\n *   feature: 'WebRTC',\n *   fallback: 'enabled'\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.warn(Sentry.logger.fmt`API endpoint ${endpoint} is deprecated`, {\n *   recommendedEndpoint: '/api/v2/users',\n *   sunsetDate: '2024-12-31',\n *   clientVersion: '1.2.3'\n * });\n * ```\n */\nexport function warn(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('warn', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `error` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { error: 'NetworkError', url: '/api/data' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.error('Failed to load user data', {\n *   error: 'NetworkError',\n *   url: '/api/users/123',\n *   statusCode: 500,\n *   retryCount: 3\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.error(Sentry.logger.fmt`Payment processing failed for order ${orderId}`, {\n *   error: 'InsufficientFunds',\n *   amount: 100.00,\n *   currency: 'USD',\n *   userId: 'user-456'\n * });\n * ```\n */\nexport function error(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('error', message, attributes);\n}\n\n/**\n * @summary Capture a log with the `fatal` level. Requires `_experiments.enableLogs` to be enabled.\n *\n * @param message - The message to log.\n * @param attributes - Arbitrary structured data that stores information about the log - e.g., { appState: 'corrupted', sessionId: 'abc-123' }.\n *\n * @example\n *\n * ```\n * Sentry.logger.fatal('Application state corrupted', {\n *   lastKnownState: 'authenticated',\n *   sessionId: 'session-123',\n *   timestamp: Date.now(),\n *   recoveryAttempted: true\n * });\n * ```\n *\n * @example With template strings\n *\n * ```\n * Sentry.logger.fatal(Sentry.logger.fmt`Critical system failure in ${service}`, {\n *   service: 'payment-processor',\n *   errorCode: 'CRITICAL_FAILURE',\n *   affectedUsers: 150,\n *   timestamp: Date.now()\n * });\n * ```\n */\nexport function fatal(message: ParameterizedString, attributes?: Log['attributes']): void {\n  captureLog('fatal', message, attributes);\n}\n\nexport { fmt } from '@sentry/core';\n"],"names":["TMP_TELEMETRY_SDK_NAME","TMP_TELEMETRY_SDK_LANGUAGE","TMP_TELEMETRY_SDK_VERSION","SEMRESATTRS_TELEMETRY_SDK_NAME","SEMRESATTRS_TELEMETRY_SDK_LANGUAGE","SEMRESATTRS_TELEMETRY_SDK_VERSION","suppressTracing","__read","this","__values","VERSION","performance","trace","__spreadArray","__assign","DEBUG_BUILD"],"mappings":"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","ignoreList":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57]}}]
}